#[allow(
    unused_variables,
    non_upper_case_globals,
    non_snake_case,
    unused_unsafe,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
pub mod Windows {
    #[allow(
        unused_variables,
        non_upper_case_globals,
        non_snake_case,
        unused_unsafe,
        non_camel_case_types,
        dead_code,
        clippy::all
    )]
    pub mod ApplicationModel {
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct ISuspendingEventArgs(::windows::IInspectable);
        unsafe impl ::windows::Interface for ISuspendingEventArgs {
            type Vtable = ISuspendingEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2516982789,
                11706,
                19720,
                [176, 189, 43, 48, 161, 49, 198, 170],
            );
        }
        impl ISuspendingEventArgs {}
        unsafe impl ::windows::RuntimeType for ISuspendingEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"{96061c05-2dba-4d08-b0bd-2b30a131c6aa}");
        }
        impl ::std::convert::From<ISuspendingEventArgs> for ::windows::IInspectable {
            fn from(value: ISuspendingEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&ISuspendingEventArgs> for ::windows::IInspectable {
            fn from(value: &ISuspendingEventArgs) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ISuspendingEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ISuspendingEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct ISuspendingEventArgs_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
        );
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct SuspendingEventArgs(::windows::IInspectable);
        impl SuspendingEventArgs {}
        unsafe impl ::windows::RuntimeType for SuspendingEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.SuspendingEventArgs;{96061c05-2dba-4d08-b0bd-2b30a131c6aa})" ) ;
        }
        unsafe impl ::windows::Interface for SuspendingEventArgs {
            type Vtable = ISuspendingEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                2516982789,
                11706,
                19720,
                [176, 189, 43, 48, 161, 49, 198, 170],
            );
        }
        impl ::windows::RuntimeName for SuspendingEventArgs {
            const NAME: &'static str = "Windows.ApplicationModel.SuspendingEventArgs";
        }
        impl ::std::convert::From<SuspendingEventArgs> for ::windows::IInspectable {
            fn from(value: SuspendingEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&SuspendingEventArgs> for ::windows::IInspectable {
            fn from(value: &SuspendingEventArgs) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SuspendingEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SuspendingEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        impl ::std::convert::From<SuspendingEventArgs> for ISuspendingEventArgs {
            fn from(value: SuspendingEventArgs) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&SuspendingEventArgs> for ISuspendingEventArgs {
            fn from(value: &SuspendingEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::windows::IntoParam<'a, ISuspendingEventArgs> for SuspendingEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ISuspendingEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<ISuspendingEventArgs>::into(self))
            }
        }
        impl<'a> ::windows::IntoParam<'a, ISuspendingEventArgs> for &'a SuspendingEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ISuspendingEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<ISuspendingEventArgs>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for SuspendingEventArgs {}
        unsafe impl ::std::marker::Sync for SuspendingEventArgs {}
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct IEnteredBackgroundEventArgs(::windows::IInspectable);
        unsafe impl ::windows::Interface for IEnteredBackgroundEventArgs {
            type Vtable = IEnteredBackgroundEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4146257090,
                38951,
                16445,
                [170, 237, 236, 202, 154, 193, 115, 152],
            );
        }
        impl IEnteredBackgroundEventArgs {}
        unsafe impl ::windows::RuntimeType for IEnteredBackgroundEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"{f722dcc2-9827-403d-aaed-ecca9ac17398}");
        }
        impl ::std::convert::From<IEnteredBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: IEnteredBackgroundEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&IEnteredBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: &IEnteredBackgroundEventArgs) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IEnteredBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IEnteredBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct IEnteredBackgroundEventArgs_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
        );
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct EnteredBackgroundEventArgs(::windows::IInspectable);
        impl EnteredBackgroundEventArgs {}
        unsafe impl ::windows::RuntimeType for EnteredBackgroundEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.EnteredBackgroundEventArgs;{f722dcc2-9827-403d-aaed-ecca9ac17398})" ) ;
        }
        unsafe impl ::windows::Interface for EnteredBackgroundEventArgs {
            type Vtable = IEnteredBackgroundEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                4146257090,
                38951,
                16445,
                [170, 237, 236, 202, 154, 193, 115, 152],
            );
        }
        impl ::windows::RuntimeName for EnteredBackgroundEventArgs {
            const NAME: &'static str = "Windows.ApplicationModel.EnteredBackgroundEventArgs";
        }
        impl ::std::convert::From<EnteredBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: EnteredBackgroundEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&EnteredBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: &EnteredBackgroundEventArgs) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for EnteredBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a EnteredBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        impl ::std::convert::From<EnteredBackgroundEventArgs> for IEnteredBackgroundEventArgs {
            fn from(value: EnteredBackgroundEventArgs) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&EnteredBackgroundEventArgs> for IEnteredBackgroundEventArgs {
            fn from(value: &EnteredBackgroundEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::windows::IntoParam<'a, IEnteredBackgroundEventArgs> for EnteredBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, IEnteredBackgroundEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<IEnteredBackgroundEventArgs>::into(
                    self,
                ))
            }
        }
        impl<'a> ::windows::IntoParam<'a, IEnteredBackgroundEventArgs> for &'a EnteredBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, IEnteredBackgroundEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<IEnteredBackgroundEventArgs>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for EnteredBackgroundEventArgs {}
        unsafe impl ::std::marker::Sync for EnteredBackgroundEventArgs {}
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct ILeavingBackgroundEventArgs(::windows::IInspectable);
        unsafe impl ::windows::Interface for ILeavingBackgroundEventArgs {
            type Vtable = ILeavingBackgroundEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                969338010,
                44654,
                18169,
                [160, 122, 207, 194, 63, 136, 115, 62],
            );
        }
        impl ILeavingBackgroundEventArgs {}
        unsafe impl ::windows::RuntimeType for ILeavingBackgroundEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"{39c6ec9a-ae6e-46f9-a07a-cfc23f88733e}");
        }
        impl ::std::convert::From<ILeavingBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: ILeavingBackgroundEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&ILeavingBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: &ILeavingBackgroundEventArgs) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ILeavingBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ILeavingBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        #[repr(C)]
        #[doc(hidden)]
        pub struct ILeavingBackgroundEventArgs_abi(
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                iid: &::windows::Guid,
                interface: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                count: *mut u32,
                values: *mut *mut ::windows::Guid,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut ::windows::RawPtr,
            ) -> ::windows::HRESULT,
            pub  unsafe extern "system" fn(
                this: ::windows::RawPtr,
                value: *mut i32,
            ) -> ::windows::HRESULT,
            pub unsafe extern "system" fn(),
        );
        #[repr(transparent)]
        #[derive(
            :: std :: cmp :: PartialEq,
            :: std :: cmp :: Eq,
            :: std :: clone :: Clone,
            :: std :: fmt :: Debug,
        )]
        pub struct LeavingBackgroundEventArgs(::windows::IInspectable);
        impl LeavingBackgroundEventArgs {}
        unsafe impl ::windows::RuntimeType for LeavingBackgroundEventArgs {
            type DefaultType = ::std::option::Option<Self>;
            const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.LeavingBackgroundEventArgs;{39c6ec9a-ae6e-46f9-a07a-cfc23f88733e})" ) ;
        }
        unsafe impl ::windows::Interface for LeavingBackgroundEventArgs {
            type Vtable = ILeavingBackgroundEventArgs_abi;
            const IID: ::windows::Guid = ::windows::Guid::from_values(
                969338010,
                44654,
                18169,
                [160, 122, 207, 194, 63, 136, 115, 62],
            );
        }
        impl ::windows::RuntimeName for LeavingBackgroundEventArgs {
            const NAME: &'static str = "Windows.ApplicationModel.LeavingBackgroundEventArgs";
        }
        impl ::std::convert::From<LeavingBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: LeavingBackgroundEventArgs) -> Self {
                value.0
            }
        }
        impl ::std::convert::From<&LeavingBackgroundEventArgs> for ::windows::IInspectable {
            fn from(value: &LeavingBackgroundEventArgs) -> Self {
                value.0.clone()
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for LeavingBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Owned(self.0)
            }
        }
        impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a LeavingBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                ::windows::Param::Borrowed(&self.0)
            }
        }
        impl ::std::convert::From<LeavingBackgroundEventArgs> for ILeavingBackgroundEventArgs {
            fn from(value: LeavingBackgroundEventArgs) -> Self {
                unsafe { ::std::mem::transmute(value) }
            }
        }
        impl ::std::convert::From<&LeavingBackgroundEventArgs> for ILeavingBackgroundEventArgs {
            fn from(value: &LeavingBackgroundEventArgs) -> Self {
                ::std::convert::From::from(::std::clone::Clone::clone(value))
            }
        }
        impl<'a> ::windows::IntoParam<'a, ILeavingBackgroundEventArgs> for LeavingBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ILeavingBackgroundEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<ILeavingBackgroundEventArgs>::into(
                    self,
                ))
            }
        }
        impl<'a> ::windows::IntoParam<'a, ILeavingBackgroundEventArgs> for &'a LeavingBackgroundEventArgs {
            fn into_param(self) -> ::windows::Param<'a, ILeavingBackgroundEventArgs> {
                ::windows::Param::Owned(::std::convert::Into::<ILeavingBackgroundEventArgs>::into(
                    ::std::clone::Clone::clone(self),
                ))
            }
        }
        unsafe impl ::std::marker::Send for LeavingBackgroundEventArgs {}
        unsafe impl ::std::marker::Sync for LeavingBackgroundEventArgs {}
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod Activation {
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IActivatedEventArgs {
                type Vtable = IActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3479508755,
                    52488,
                    20440,
                    [182, 151, 162, 129, 182, 84, 78, 46],
                );
            }
            impl IActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = self;
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = self;
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = self;
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{cf651713-cd08-4fd8-b697-a281b6544e2e}");
            }
            impl ::std::convert::From<IActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ActivationKind,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ApplicationExecutionState,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ILaunchActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ILaunchActivatedEventArgs {
                type Vtable = ILaunchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4224269862,
                    41290,
                    19279,
                    [130, 176, 51, 190, 217, 32, 175, 82],
                );
            }
            impl ILaunchActivatedEventArgs {
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ILaunchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{fbc93e26-a14a-4b4f-82b0-33bed920af52}");
            }
            impl ::std::convert::From<ILaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ILaunchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ILaunchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ILaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ILaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ILaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ILaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ILaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ILaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILaunchActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ILockScreenCallActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ILockScreenCallActivatedEventArgs {
                type Vtable = ILockScreenCallActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    116621246,
                    46578,
                    17547,
                    [177, 62, 227, 40, 172, 28, 81, 106],
                );
            }
            impl ILockScreenCallActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ILockScreenCallActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{06f37fbe-b5f2-448b-b13e-e328ac1c516a}");
            }
            impl ::std::convert::From<ILockScreenCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ILockScreenCallActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILockScreenCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ILockScreenCallActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ILockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ILockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ILockScreenCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ILockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILockScreenCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ILockScreenCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ILockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ILockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILockScreenCallActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: ILockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILockScreenCallActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: &ILockScreenCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for ILockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs>
                for &'a ILockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILockScreenCallActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContinuationActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContinuationActivatedEventArgs {
                type Vtable = IContinuationActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3850438325,
                    5471,
                    19092,
                    [167, 66, 199, 224, 143, 78, 24, 140],
                );
            }
            impl IContinuationActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContinuationActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{e58106b5-155f-4a94-a742-c7e08f4e188c}");
            }
            impl ::std::convert::From<IContinuationActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContinuationActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContinuationActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContinuationActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContinuationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IContinuationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContinuationActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContinuationActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContinuationActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContinuationActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContinuationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContinuationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContinuationActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileOpenPickerContinuationEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileOpenPickerContinuationEventArgs {
                type Vtable = IFileOpenPickerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4042932026,
                    54504,
                    19155,
                    [156, 52, 35, 8, 243, 47, 206, 201],
                );
            }
            impl IFileOpenPickerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileOpenPickerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{f0fa3f3a-d4e8-4ad3-9c34-2308f32fcec9}");
            }
            impl ::std::convert::From<IFileOpenPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: IFileOpenPickerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileOpenPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: &IFileOpenPickerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IFileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileOpenPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: IFileOpenPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileOpenPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &IFileOpenPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IFileOpenPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IFileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IFileOpenPickerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: IFileOpenPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileOpenPickerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: &IFileOpenPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for IFileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a IFileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileOpenPickerContinuationEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IActivatedEventArgsWithUser(::windows::IInspectable);
            unsafe impl ::windows::Interface for IActivatedEventArgsWithUser {
                type Vtable = IActivatedEventArgsWithUser_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    485530526,
                    39266,
                    18742,
                    [128, 255, 175, 200, 232, 174, 92, 140],
                );
            }
            impl IActivatedEventArgsWithUser {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IActivatedEventArgsWithUser {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{1cf09b9e-9962-4936-80ff-afc8e8ae5c8c}");
            }
            impl ::std::convert::From<IActivatedEventArgsWithUser> for ::windows::IInspectable {
                fn from(value: IActivatedEventArgsWithUser) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IActivatedEventArgsWithUser> for ::windows::IInspectable {
                fn from(value: &IActivatedEventArgsWithUser) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IActivatedEventArgsWithUser {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IActivatedEventArgsWithUser {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IActivatedEventArgsWithUser> for IActivatedEventArgs {
                fn from(value: IActivatedEventArgsWithUser) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IActivatedEventArgsWithUser> for IActivatedEventArgs {
                fn from(value: &IActivatedEventArgsWithUser) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IActivatedEventArgsWithUser {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IActivatedEventArgsWithUser_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FileOpenPickerContinuationEventArgs(::windows::IInspectable);
            impl FileOpenPickerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FileOpenPickerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.FileOpenPickerContinuationEventArgs;{f0fa3f3a-d4e8-4ad3-9c34-2308f32fcec9})" ) ;
            }
            unsafe impl ::windows::Interface for FileOpenPickerContinuationEventArgs {
                type Vtable = IFileOpenPickerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4042932026,
                    54504,
                    19155,
                    [156, 52, 35, 8, 243, 47, 206, 201],
                );
            }
            impl ::windows::RuntimeName for FileOpenPickerContinuationEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.FileOpenPickerContinuationEventArgs";
            }
            impl ::std::convert::From<FileOpenPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: FileOpenPickerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FileOpenPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: &FileOpenPickerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FileOpenPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FileOpenPickerContinuationEventArgs>
                for IFileOpenPickerContinuationEventArgs
            {
                fn from(value: FileOpenPickerContinuationEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FileOpenPickerContinuationEventArgs>
                for IFileOpenPickerContinuationEventArgs
            {
                fn from(value: &FileOpenPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileOpenPickerContinuationEventArgs>
                for FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileOpenPickerContinuationEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileOpenPickerContinuationEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileOpenPickerContinuationEventArgs>
                for &'a FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileOpenPickerContinuationEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileOpenPickerContinuationEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileOpenPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: FileOpenPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileOpenPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &FileOpenPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for FileOpenPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a FileOpenPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileOpenPickerContinuationEventArgs> for IContinuationActivatedEventArgs {
                fn from(value: FileOpenPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileOpenPickerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: &FileOpenPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<FileOpenPickerContinuationEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: FileOpenPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileOpenPickerContinuationEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &FileOpenPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a FileOpenPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for FileOpenPickerContinuationEventArgs {}
            unsafe impl ::std::marker::Sync for FileOpenPickerContinuationEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITileActivatedInfo(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITileActivatedInfo {
                type Vtable = ITileActivatedInfo_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2162467761,
                    14720,
                    20247,
                    [183, 56, 137, 25, 78, 11, 143, 101],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITileActivatedInfo_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct TileActivatedInfo(::windows::IInspectable);
            impl TileActivatedInfo {}
            unsafe impl ::windows::RuntimeType for TileActivatedInfo {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.TileActivatedInfo;{80e4a3b1-3980-4f17-b738-89194e0b8f65})" ) ;
            }
            unsafe impl ::windows::Interface for TileActivatedInfo {
                type Vtable = ITileActivatedInfo_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2162467761,
                    14720,
                    20247,
                    [183, 56, 137, 25, 78, 11, 143, 101],
                );
            }
            impl ::windows::RuntimeName for TileActivatedInfo {
                const NAME: &'static str = "Windows.ApplicationModel.Activation.TileActivatedInfo";
            }
            impl ::std::convert::From<TileActivatedInfo> for ::windows::IInspectable {
                fn from(value: TileActivatedInfo) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TileActivatedInfo> for ::windows::IInspectable {
                fn from(value: &TileActivatedInfo) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TileActivatedInfo {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TileActivatedInfo {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for TileActivatedInfo {}
            unsafe impl ::std::marker::Sync for TileActivatedInfo {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IWalletActionActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWalletActionActivatedEventArgs {
                type Vtable = IWalletActionActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4244374139,
                    6682,
                    19746,
                    [146, 63, 174, 111, 69, 250, 82, 217],
                );
            }
            impl IWalletActionActivatedEventArgs {
                pub fn ItemId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ActionId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IWalletActionActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{fcfc027b-1a1a-4d22-923f-ae6f45fa52d9}");
            }
            impl ::std::convert::From<IWalletActionActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IWalletActionActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IWalletActionActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IWalletActionActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IWalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IWalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IWalletActionActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IWalletActionActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IWalletActionActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IWalletActionActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IWalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IWalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWalletActionActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WalletActionActivatedEventArgs(::windows::IInspectable);
            impl WalletActionActivatedEventArgs {
                pub fn ItemId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ActionId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WalletActionActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.WalletActionActivatedEventArgs;{fcfc027b-1a1a-4d22-923f-ae6f45fa52d9})" ) ;
            }
            unsafe impl ::windows::Interface for WalletActionActivatedEventArgs {
                type Vtable = IWalletActionActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4244374139,
                    6682,
                    19746,
                    [146, 63, 174, 111, 69, 250, 82, 217],
                );
            }
            impl ::windows::RuntimeName for WalletActionActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.WalletActionActivatedEventArgs";
            }
            impl ::std::convert::From<WalletActionActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: WalletActionActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&WalletActionActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &WalletActionActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for WalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a WalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<WalletActionActivatedEventArgs> for IWalletActionActivatedEventArgs {
                fn from(value: WalletActionActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&WalletActionActivatedEventArgs> for IWalletActionActivatedEventArgs {
                fn from(value: &WalletActionActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IWalletActionActivatedEventArgs>
                for WalletActionActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IWalletActionActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IWalletActionActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IWalletActionActivatedEventArgs>
                for &'a WalletActionActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IWalletActionActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IWalletActionActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<WalletActionActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: WalletActionActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WalletActionActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &WalletActionActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for WalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a WalletActionActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for WalletActionActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for WalletActionActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IPrint3DWorkflowActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPrint3DWorkflowActivatedEventArgs {
                type Vtable = IPrint3DWorkflowActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1062725515,
                    62124,
                    17945,
                    [131, 2, 239, 133, 94, 28, 155, 144],
                );
            }
            impl IPrint3DWorkflowActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IPrint3DWorkflowActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{3f57e78b-f2ac-4619-8302-ef855e1c9b90}");
            }
            impl ::std::convert::From<IPrint3DWorkflowActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IPrint3DWorkflowActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IPrint3DWorkflowActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IPrint3DWorkflowActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IPrint3DWorkflowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IPrint3DWorkflowActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IPrint3DWorkflowActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IPrint3DWorkflowActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPrint3DWorkflowActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IPrint3DWorkflowActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IPrint3DWorkflowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IPrint3DWorkflowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPrint3DWorkflowActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IPickerReturnedActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPickerReturnedActivatedEventArgs {
                type Vtable = IPickerReturnedActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    906883001,
                    43475,
                    18820,
                    [164, 237, 158, 199, 52, 96, 73, 33],
                );
            }
            impl IPickerReturnedActivatedEventArgs {
                pub fn PickerOperationId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IPickerReturnedActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{360defb9-a9d3-4984-a4ed-9ec734604921}");
            }
            impl ::std::convert::From<IPickerReturnedActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IPickerReturnedActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IPickerReturnedActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IPickerReturnedActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IPickerReturnedActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IPickerReturnedActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IPickerReturnedActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IPickerReturnedActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPickerReturnedActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IPickerReturnedActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IPickerReturnedActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IPickerReturnedActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPickerReturnedActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ISearchActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISearchActivatedEventArgs {
                type Vtable = ISearchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2360568145,
                    22728,
                    17379,
                    [148, 188, 65, 211, 63, 139, 99, 14],
                );
            }
            impl ISearchActivatedEventArgs {
                pub fn QueryText(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Language(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ISearchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{8cb36951-58c8-43e3-94bc-41d33f8b630e}");
            }
            impl ::std::convert::From<ISearchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ISearchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ISearchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ISearchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ISearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ISearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ISearchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ISearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ISearchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ISearchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ISearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ISearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISearchActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IDeviceActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDeviceActivatedEventArgs {
                type Vtable = IDeviceActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3444619689,
                    52752,
                    17618,
                    [130, 52, 195, 85, 160, 115, 239, 51],
                );
            }
            impl IDeviceActivatedEventArgs {
                pub fn DeviceInformationId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IDeviceActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{cd50b9a9-ce10-44d2-8234-c355a073ef33}");
            }
            impl ::std::convert::From<IDeviceActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IDeviceActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IDeviceActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IDeviceActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IDeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IDeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IDeviceActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IDeviceActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDeviceActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IDeviceActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IDeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IDeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDeviceActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            #[derive(
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
            )]
            pub struct ActivationCameraSettingsContract(pub u8);
            #[repr(C)]
            #[derive(
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
            )]
            pub struct ContactActivatedEventsContract(pub u8);
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactActivatedEventArgs {
                type Vtable = IContactActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3592921540,
                    49189,
                    19521,
                    [157, 239, 241, 234, 250, 208, 117, 231],
                );
            }
            impl IContactActivatedEventArgs {
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{d627a1c4-c025-4c41-9def-f1eafad075e7}");
            }
            impl ::std::convert::From<IContactActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IContactActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactMapActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactMapActivatedEventArgs {
                type Vtable = IContactMapActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3006003312,
                    61159,
                    19154,
                    [170, 241, 168, 126, 255, 207, 0, 164],
                );
            }
            impl IContactMapActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactMapActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{b32bf870-eee7-4ad2-aaf1-a87effcf00a4}");
            }
            impl ::std::convert::From<IContactMapActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactMapActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactMapActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactMapActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactMapActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactMapActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactMapActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactMapActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IContactMapActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: IContactMapActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactMapActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &IContactMapActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for IContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a IContactMapActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactMapActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactMapActivatedEventArgs(::windows::IInspectable);
            impl ContactMapActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactMapActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactMapActivatedEventArgs;{b32bf870-eee7-4ad2-aaf1-a87effcf00a4})" ) ;
            }
            unsafe impl ::windows::Interface for ContactMapActivatedEventArgs {
                type Vtable = IContactMapActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3006003312,
                    61159,
                    19154,
                    [170, 241, 168, 126, 255, 207, 0, 164],
                );
            }
            impl ::windows::RuntimeName for ContactMapActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactMapActivatedEventArgs";
            }
            impl ::std::convert::From<ContactMapActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactMapActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactMapActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactMapActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactMapActivatedEventArgs> for IContactMapActivatedEventArgs {
                fn from(value: ContactMapActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactMapActivatedEventArgs> for IContactMapActivatedEventArgs {
                fn from(value: &ContactMapActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactMapActivatedEventArgs> for ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactMapActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactMapActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactMapActivatedEventArgs>
                for &'a ContactMapActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactMapActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactMapActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ContactMapActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactMapActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactMapActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactMapActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ContactMapActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: ContactMapActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactMapActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &ContactMapActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for &'a ContactMapActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ContactMapActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactMapActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAppointmentsProviderActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IAppointmentsProviderActivatedEventArgs {
                type Vtable = IAppointmentsProviderActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    862241797,
                    37692,
                    20093,
                    [160, 52, 80, 15, 184, 220, 217, 243],
                );
            }
            impl IAppointmentsProviderActivatedEventArgs {
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IAppointmentsProviderActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{3364c405-933c-4e7d-a034-500fb8dcd9f3}");
            }
            impl ::std::convert::From<IAppointmentsProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IAppointmentsProviderActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IAppointmentsProviderActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IAppointmentsProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IAppointmentsProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IAppointmentsProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IAppointmentsProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IAppointmentsProviderActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IAppointmentsProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAppointmentsProviderActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(
                ::windows::IInspectable,
            );
            unsafe impl ::windows::Interface for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs {
                type Vtable = IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    962130021,
                    38977,
                    19621,
                    [153, 155, 136, 81, 152, 185, 239, 42],
                );
            }
            impl IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs {
                pub fn LocalId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn RoamingId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType
                for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{3958f065-9841-4ca5-999b-885198b9ef2a}");
            }
            impl ::std::convert::From<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(
                    value: IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    value.0
                }
            }
            impl
                ::std::convert::From<&IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(
                    value: &IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(
                    value: IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl
                ::std::convert::From<&IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(
                    value: &IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(
                    value: IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl
                ::std::convert::From<&IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(
                    value: &IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct AppointmentsProviderShowAppointmentDetailsActivatedEventArgs(
                ::windows::IInspectable,
            );
            impl AppointmentsProviderShowAppointmentDetailsActivatedEventArgs {
                pub fn LocalId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn RoamingId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType
                for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.AppointmentsProviderShowAppointmentDetailsActivatedEventArgs;{3958f065-9841-4ca5-999b-885198b9ef2a})" ) ;
            }
            unsafe impl ::windows::Interface for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs {
                type Vtable = IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    962130021,
                    38977,
                    19621,
                    [153, 155, 136, 81, 152, 185, 239, 42],
                );
            }
            impl ::windows::RuntimeName for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs {
                const NAME : & 'static str ="Windows.ApplicationModel.Activation.AppointmentsProviderShowAppointmentDetailsActivatedEventArgs" ;
            }
            impl ::std::convert::From<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(
                    value: AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(
                    value: &AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn from(
                    value: AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn from(
                    value: &AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                > for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                > for &'a AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(
                    value: AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(
                    value: &AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(
                    value: AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(
                    value: &AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(
                    value: AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(
                    value: &AppointmentsProviderShowAppointmentDetailsActivatedEventArgs,
                ) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a AppointmentsProviderShowAppointmentDetailsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for AppointmentsProviderShowAppointmentDetailsActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ICommandLineActivationOperation(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICommandLineActivationOperation {
                type Vtable = ICommandLineActivationOperation_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2571839553,
                    50590,
                    20329,
                    [188, 253, 182, 30, 212, 230, 34, 235],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICommandLineActivationOperation_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CommandLineActivationOperation(::windows::IInspectable);
            impl CommandLineActivationOperation {
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn CurrentDirectoryPath(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetExitCode(&self, value: i32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn ExitCode(&self) -> ::windows::Result<i32> {
                    let this = self;
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for CommandLineActivationOperation {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.CommandLineActivationOperation;{994b2841-c59e-4f69-bcfd-b61ed4e622eb})" ) ;
            }
            unsafe impl ::windows::Interface for CommandLineActivationOperation {
                type Vtable = ICommandLineActivationOperation_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2571839553,
                    50590,
                    20329,
                    [188, 253, 182, 30, 212, 230, 34, 235],
                );
            }
            impl ::windows::RuntimeName for CommandLineActivationOperation {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.CommandLineActivationOperation";
            }
            impl ::std::convert::From<CommandLineActivationOperation> for ::windows::IInspectable {
                fn from(value: CommandLineActivationOperation) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&CommandLineActivationOperation> for ::windows::IInspectable {
                fn from(value: &CommandLineActivationOperation) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for CommandLineActivationOperation {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a CommandLineActivationOperation {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for CommandLineActivationOperation {}
            unsafe impl ::std::marker::Sync for CommandLineActivationOperation {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactCallActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactCallActivatedEventArgs {
                type Vtable = IContactCallActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3269399751,
                    12523,
                    16838,
                    [179, 188, 91, 22, 148, 249, 218, 179],
                );
            }
            impl IContactCallActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactCallActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{c2df14c7-30eb-41c6-b3bc-5b1694f9dab3}");
            }
            impl ::std::convert::From<IContactCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactCallActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactCallActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IContactCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: IContactCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &IContactCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for IContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a IContactCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactCallActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactCallActivatedEventArgs(::windows::IInspectable);
            impl ContactCallActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactCallActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactCallActivatedEventArgs;{c2df14c7-30eb-41c6-b3bc-5b1694f9dab3})" ) ;
            }
            unsafe impl ::windows::Interface for ContactCallActivatedEventArgs {
                type Vtable = IContactCallActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3269399751,
                    12523,
                    16838,
                    [179, 188, 91, 22, 148, 249, 218, 179],
                );
            }
            impl ::windows::RuntimeName for ContactCallActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactCallActivatedEventArgs";
            }
            impl ::std::convert::From<ContactCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactCallActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactCallActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactCallActivatedEventArgs> for IContactCallActivatedEventArgs {
                fn from(value: ContactCallActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactCallActivatedEventArgs> for IContactCallActivatedEventArgs {
                fn from(value: &ContactCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactCallActivatedEventArgs>
                for ContactCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactCallActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactCallActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactCallActivatedEventArgs>
                for &'a ContactCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactCallActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactCallActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ContactCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ContactCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: ContactCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &ContactCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for ContactCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a ContactCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ContactCallActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactCallActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ILockScreenActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ILockScreenActivatedEventArgs {
                type Vtable = ILockScreenActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1017608550,
                    24840,
                    19009,
                    [130, 32, 238, 125, 19, 60, 133, 50],
                );
            }
            impl ILockScreenActivatedEventArgs {
                pub fn Info(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ILockScreenActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{3ca77966-6108-4a41-8220-ee7d133c8532}");
            }
            impl ::std::convert::From<ILockScreenActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ILockScreenActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILockScreenActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ILockScreenActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ILockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ILockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ILockScreenActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ILockScreenActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILockScreenActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ILockScreenActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ILockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ILockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILockScreenActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct LockScreenActivatedEventArgs(::windows::IInspectable);
            impl LockScreenActivatedEventArgs {
                pub fn Info(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for LockScreenActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.LockScreenActivatedEventArgs;{3ca77966-6108-4a41-8220-ee7d133c8532})" ) ;
            }
            unsafe impl ::windows::Interface for LockScreenActivatedEventArgs {
                type Vtable = ILockScreenActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1017608550,
                    24840,
                    19009,
                    [130, 32, 238, 125, 19, 60, 133, 50],
                );
            }
            impl ::windows::RuntimeName for LockScreenActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.LockScreenActivatedEventArgs";
            }
            impl ::std::convert::From<LockScreenActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: LockScreenActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LockScreenActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &LockScreenActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for LockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a LockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<LockScreenActivatedEventArgs> for ILockScreenActivatedEventArgs {
                fn from(value: LockScreenActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LockScreenActivatedEventArgs> for ILockScreenActivatedEventArgs {
                fn from(value: &LockScreenActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILockScreenActivatedEventArgs> for LockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILockScreenActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILockScreenActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILockScreenActivatedEventArgs>
                for &'a LockScreenActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILockScreenActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILockScreenActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<LockScreenActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: LockScreenActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LockScreenActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &LockScreenActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for LockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a LockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LockScreenActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: LockScreenActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LockScreenActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &LockScreenActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for LockScreenActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a LockScreenActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for LockScreenActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for LockScreenActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactPickerActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactPickerActivatedEventArgs {
                type Vtable = IContactPickerActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3461851879,
                    25673,
                    17831,
                    [151, 31, 209, 19, 190, 122, 137, 54],
                );
            }
            impl IContactPickerActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactPickerActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{ce57aae7-6449-45a7-971f-d113be7a8936}");
            }
            impl ::std::convert::From<IContactPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactPickerActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactPickerActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IContactPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactPickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactPickerActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactPickerActivatedEventArgs(::windows::IInspectable);
            impl ContactPickerActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactPickerActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactPickerActivatedEventArgs;{ce57aae7-6449-45a7-971f-d113be7a8936})" ) ;
            }
            unsafe impl ::windows::Interface for ContactPickerActivatedEventArgs {
                type Vtable = IContactPickerActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3461851879,
                    25673,
                    17831,
                    [151, 31, 209, 19, 190, 122, 137, 54],
                );
            }
            impl ::windows::RuntimeName for ContactPickerActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactPickerActivatedEventArgs";
            }
            impl ::std::convert::From<ContactPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactPickerActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactPickerActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactPickerActivatedEventArgs> for IContactPickerActivatedEventArgs {
                fn from(value: ContactPickerActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactPickerActivatedEventArgs> for IContactPickerActivatedEventArgs {
                fn from(value: &ContactPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactPickerActivatedEventArgs>
                for ContactPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactPickerActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactPickerActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactPickerActivatedEventArgs>
                for &'a ContactPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactPickerActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactPickerActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ContactPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactPickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for ContactPickerActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactPickerActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IToastNotificationActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IToastNotificationActivatedEventArgs {
                type Vtable = IToastNotificationActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2460512130,
                    21136,
                    17181,
                    [190, 133, 196, 170, 238, 184, 104, 95],
                );
            }
            impl IToastNotificationActivatedEventArgs {
                pub fn Argument(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IToastNotificationActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{92a86f82-5290-431d-be85-c4aaeeb8685f}");
            }
            impl ::std::convert::From<IToastNotificationActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IToastNotificationActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IToastNotificationActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IToastNotificationActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IToastNotificationActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IToastNotificationActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IToastNotificationActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IToastNotificationActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IToastNotificationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IToastNotificationActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(C)]
            #[derive(
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
            )]
            pub struct WebUISearchActivatedEventsContract(pub u8);
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactVideoCallActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactVideoCallActivatedEventArgs {
                type Vtable = IContactVideoCallActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1627889080,
                    58343,
                    19279,
                    [133, 141, 92, 99, 169, 110, 246, 132],
                );
            }
            impl IContactVideoCallActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactVideoCallActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{61079db8-e3e7-4b4f-858d-5c63a96ef684}");
            }
            impl ::std::convert::From<IContactVideoCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactVideoCallActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactVideoCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactVideoCallActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactVideoCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactVideoCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactVideoCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactVideoCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactVideoCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactVideoCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactVideoCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IContactVideoCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: IContactVideoCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactVideoCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &IContactVideoCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for IContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a IContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactVideoCallActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileActivatedEventArgs {
                type Vtable = IFileActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3140156467,
                    37809,
                    17133,
                    [139, 38, 35, 109, 217, 199, 132, 150],
                );
            }
            impl IFileActivatedEventArgs {
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{bb2afc33-93b1-42ed-8b26-236dd9c78496}");
            }
            impl ::std::convert::From<IFileActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IFileActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IFileActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IFileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IFileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IFileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IFileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IFileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactPostActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactPostActivatedEventArgs {
                type Vtable = IContactPostActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3009035367,
                    61927,
                    18005,
                    [173, 110, 72, 87, 88, 143, 85, 47],
                );
            }
            impl IContactPostActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactPostActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{b35a3c67-f1e7-4655-ad6e-4857588f552f}");
            }
            impl ::std::convert::From<IContactPostActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactPostActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactPostActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactPostActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactPostActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactPostActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactPostActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactPostActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IContactPostActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: IContactPostActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactPostActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &IContactPostActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for IContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a IContactPostActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactPostActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs(
                ::windows::IInspectable,
            );
            unsafe impl ::windows::Interface for IAppointmentsProviderReplaceAppointmentActivatedEventArgs {
                type Vtable = IAppointmentsProviderReplaceAppointmentActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    357677012,
                    43393,
                    16487,
                    [138, 98, 5, 36, 228, 173, 225, 33],
                );
            }
            impl IAppointmentsProviderReplaceAppointmentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IAppointmentsProviderReplaceAppointmentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{1551b7d4-a981-4067-8a62-0524e4ade121}");
            }
            impl ::std::convert::From<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: IAppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &IAppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IApplicationViewActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplicationViewActivatedEventArgs {
                type Vtable = IApplicationViewActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2467098443,
                    47145,
                    16636,
                    [136, 244, 133, 19, 232, 166, 71, 56],
                );
            }
            impl IApplicationViewActivatedEventArgs {
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this = self;
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IApplicationViewActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{930cef4b-b829-40fc-88f4-8513e8a64738}");
            }
            impl ::std::convert::From<IApplicationViewActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IApplicationViewActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IApplicationViewActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IApplicationViewActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IApplicationViewActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IApplicationViewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IApplicationViewActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IApplicationViewActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IApplicationViewActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IApplicationViewActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IApplicationViewActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplicationViewActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAppointmentsProviderShowTimeFrameActivatedEventArgs(
                ::windows::IInspectable,
            );
            unsafe impl ::windows::Interface for IAppointmentsProviderShowTimeFrameActivatedEventArgs {
                type Vtable = IAppointmentsProviderShowTimeFrameActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2611915686,
                    3595,
                    18858,
                    [186, 188, 18, 177, 220, 119, 73, 134],
                );
            }
            impl IAppointmentsProviderShowTimeFrameActivatedEventArgs {
                pub fn Duration(&self) -> ::windows::Result<super::super::Foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::TimeSpan>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IAppointmentsProviderShowTimeFrameActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{9baeaba6-0e0b-49aa-babc-12b1dc774986}");
            }
            impl ::std::convert::From<IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: IAppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &IAppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAppointmentsProviderShowTimeFrameActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IBarcodeScannerPreviewActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBarcodeScannerPreviewActivatedEventArgs {
                type Vtable = IBarcodeScannerPreviewActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1735555452,
                    39359,
                    17225,
                    [175, 34, 228, 18, 53, 96, 55, 28],
                );
            }
            impl IBarcodeScannerPreviewActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn ConnectionId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IBarcodeScannerPreviewActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{6772797c-99bf-4349-af22-e4123560371c}");
            }
            impl ::std::convert::From<IBarcodeScannerPreviewActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IBarcodeScannerPreviewActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IBarcodeScannerPreviewActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IBarcodeScannerPreviewActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IBarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IBarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IBarcodeScannerPreviewActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IBarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IBarcodeScannerPreviewActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IBarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IBarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IBarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBarcodeScannerPreviewActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileSavePickerActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileSavePickerActivatedEventArgs {
                type Vtable = IFileSavePickerActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2176949489,
                    29926,
                    17287,
                    [130, 235, 187, 143, 214, 75, 67, 70],
                );
            }
            impl IFileSavePickerActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileSavePickerActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{81c19cf1-74e6-4387-82eb-bb8fd64b4346}");
            }
            impl ::std::convert::From<IFileSavePickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IFileSavePickerActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileSavePickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IFileSavePickerActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFileSavePickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileSavePickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IFileSavePickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileSavePickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IFileSavePickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IFileSavePickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IFileSavePickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileSavePickerActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileSavePickerActivatedEventArgs2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileSavePickerActivatedEventArgs2 {
                type Vtable = IFileSavePickerActivatedEventArgs2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1802763795,
                    11506,
                    19784,
                    [140, 188, 175, 103, 210, 63, 28, 231],
                );
            }
            impl IFileSavePickerActivatedEventArgs2 {
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn EnterpriseId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileSavePickerActivatedEventArgs2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{6b73fe13-2cf2-4d48-8cbc-af67d23f1ce7}");
            }
            impl ::std::convert::From<IFileSavePickerActivatedEventArgs2> for ::windows::IInspectable {
                fn from(value: IFileSavePickerActivatedEventArgs2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileSavePickerActivatedEventArgs2> for ::windows::IInspectable {
                fn from(value: &IFileSavePickerActivatedEventArgs2) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFileSavePickerActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileSavePickerActivatedEventArgs2
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileSavePickerActivatedEventArgs2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FileSavePickerActivatedEventArgs(::windows::IInspectable);
            impl FileSavePickerActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IFileSavePickerActivatedEventArgs2>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn EnterpriseId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IFileSavePickerActivatedEventArgs2>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FileSavePickerActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs;{81c19cf1-74e6-4387-82eb-bb8fd64b4346})" ) ;
            }
            unsafe impl ::windows::Interface for FileSavePickerActivatedEventArgs {
                type Vtable = IFileSavePickerActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2176949489,
                    29926,
                    17287,
                    [130, 235, 187, 143, 214, 75, 67, 70],
                );
            }
            impl ::windows::RuntimeName for FileSavePickerActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs";
            }
            impl ::std::convert::From<FileSavePickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: FileSavePickerActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FileSavePickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &FileSavePickerActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FileSavePickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FileSavePickerActivatedEventArgs> for IFileSavePickerActivatedEventArgs {
                fn from(value: FileSavePickerActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FileSavePickerActivatedEventArgs> for IFileSavePickerActivatedEventArgs {
                fn from(value: &FileSavePickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileSavePickerActivatedEventArgs>
                for FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileSavePickerActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IFileSavePickerActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileSavePickerActivatedEventArgs>
                for &'a FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileSavePickerActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IFileSavePickerActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<FileSavePickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: FileSavePickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileSavePickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &FileSavePickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for FileSavePickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a FileSavePickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileSavePickerActivatedEventArgs> for IFileSavePickerActivatedEventArgs2 {
                fn from(value: FileSavePickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileSavePickerActivatedEventArgs>
                for IFileSavePickerActivatedEventArgs2
            {
                fn from(value: &FileSavePickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileSavePickerActivatedEventArgs2>
                for FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileSavePickerActivatedEventArgs2> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileSavePickerActivatedEventArgs2,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileSavePickerActivatedEventArgs2>
                for &'a FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileSavePickerActivatedEventArgs2> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileSavePickerActivatedEventArgs2,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileSavePickerActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: FileSavePickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileSavePickerActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &FileSavePickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a FileSavePickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for FileSavePickerActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for FileSavePickerActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ICameraSettingsActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICameraSettingsActivatedEventArgs {
                type Vtable = ICameraSettingsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4217873672,
                    11693,
                    18698,
                    [145, 112, 220, 160, 54, 235, 17, 75],
                );
            }
            impl ICameraSettingsActivatedEventArgs {
                pub fn VideoDeviceController(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn VideoDeviceExtension(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ICameraSettingsActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{fb67a508-2dad-490a-9170-dca036eb114b}");
            }
            impl ::std::convert::From<ICameraSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ICameraSettingsActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ICameraSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ICameraSettingsActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ICameraSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ICameraSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ICameraSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ICameraSettingsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ICameraSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ICameraSettingsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ICameraSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ICameraSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICameraSettingsActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IDevicePairingActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDevicePairingActivatedEventArgs {
                type Vtable = IDevicePairingActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3953185252,
                    60614,
                    16712,
                    [148, 237, 244, 179, 126, 192, 91, 62],
                );
            }
            impl IDevicePairingActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IDevicePairingActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{eba0d1e4-ecc6-4148-94ed-f4b37ec05b3e}");
            }
            impl ::std::convert::From<IDevicePairingActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IDevicePairingActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IDevicePairingActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IDevicePairingActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IDevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IDevicePairingActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IDevicePairingActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IDevicePairingActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDevicePairingActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IDevicePairingActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IDevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IDevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDevicePairingActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DevicePairingActivatedEventArgs(::windows::IInspectable);
            impl DevicePairingActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DevicePairingActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.DevicePairingActivatedEventArgs;{eba0d1e4-ecc6-4148-94ed-f4b37ec05b3e})" ) ;
            }
            unsafe impl ::windows::Interface for DevicePairingActivatedEventArgs {
                type Vtable = IDevicePairingActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3953185252,
                    60614,
                    16712,
                    [148, 237, 244, 179, 126, 192, 91, 62],
                );
            }
            impl ::windows::RuntimeName for DevicePairingActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.DevicePairingActivatedEventArgs";
            }
            impl ::std::convert::From<DevicePairingActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: DevicePairingActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DevicePairingActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &DevicePairingActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DevicePairingActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: DevicePairingActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DevicePairingActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &DevicePairingActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for DevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a DevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DevicePairingActivatedEventArgs> for IDevicePairingActivatedEventArgs {
                fn from(value: DevicePairingActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DevicePairingActivatedEventArgs> for IDevicePairingActivatedEventArgs {
                fn from(value: &DevicePairingActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IDevicePairingActivatedEventArgs>
                for DevicePairingActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IDevicePairingActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IDevicePairingActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IDevicePairingActivatedEventArgs>
                for &'a DevicePairingActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IDevicePairingActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IDevicePairingActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DevicePairingActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: DevicePairingActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DevicePairingActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &DevicePairingActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for DevicePairingActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a DevicePairingActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for DevicePairingActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for DevicePairingActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IVoiceCommandActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVoiceCommandActivatedEventArgs {
                type Vtable = IVoiceCommandActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2878528765,
                    36163,
                    19942,
                    [151, 117, 32, 112, 75, 88, 27, 0],
                );
            }
            impl IVoiceCommandActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IVoiceCommandActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{ab92dcfd-8d43-4de6-9775-20704b581b00}");
            }
            impl ::std::convert::From<IVoiceCommandActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IVoiceCommandActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IVoiceCommandActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IVoiceCommandActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IVoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IVoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IVoiceCommandActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IVoiceCommandActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IVoiceCommandActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IVoiceCommandActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IVoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IVoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVoiceCommandActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VoiceCommandActivatedEventArgs(::windows::IInspectable);
            impl VoiceCommandActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for VoiceCommandActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.VoiceCommandActivatedEventArgs;{ab92dcfd-8d43-4de6-9775-20704b581b00})" ) ;
            }
            unsafe impl ::windows::Interface for VoiceCommandActivatedEventArgs {
                type Vtable = IVoiceCommandActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2878528765,
                    36163,
                    19942,
                    [151, 117, 32, 112, 75, 88, 27, 0],
                );
            }
            impl ::windows::RuntimeName for VoiceCommandActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.VoiceCommandActivatedEventArgs";
            }
            impl ::std::convert::From<VoiceCommandActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: VoiceCommandActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VoiceCommandActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &VoiceCommandActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<VoiceCommandActivatedEventArgs> for IVoiceCommandActivatedEventArgs {
                fn from(value: VoiceCommandActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&VoiceCommandActivatedEventArgs> for IVoiceCommandActivatedEventArgs {
                fn from(value: &VoiceCommandActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IVoiceCommandActivatedEventArgs>
                for VoiceCommandActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IVoiceCommandActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IVoiceCommandActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IVoiceCommandActivatedEventArgs>
                for &'a VoiceCommandActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IVoiceCommandActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IVoiceCommandActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<VoiceCommandActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: VoiceCommandActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&VoiceCommandActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &VoiceCommandActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for VoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a VoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<VoiceCommandActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: VoiceCommandActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&VoiceCommandActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &VoiceCommandActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for VoiceCommandActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a VoiceCommandActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for VoiceCommandActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for VoiceCommandActivatedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ActivationKind(pub i32);
            impl ActivationKind {
                pub const Launch: ActivationKind = ActivationKind(0i32);
                pub const Search: ActivationKind = ActivationKind(1i32);
                pub const ShareTarget: ActivationKind = ActivationKind(2i32);
                pub const File: ActivationKind = ActivationKind(3i32);
                pub const Protocol: ActivationKind = ActivationKind(4i32);
                pub const FileOpenPicker: ActivationKind = ActivationKind(5i32);
                pub const FileSavePicker: ActivationKind = ActivationKind(6i32);
                pub const CachedFileUpdater: ActivationKind = ActivationKind(7i32);
                pub const ContactPicker: ActivationKind = ActivationKind(8i32);
                pub const Device: ActivationKind = ActivationKind(9i32);
                pub const PrintTaskSettings: ActivationKind = ActivationKind(10i32);
                pub const CameraSettings: ActivationKind = ActivationKind(11i32);
                pub const RestrictedLaunch: ActivationKind = ActivationKind(12i32);
                pub const AppointmentsProvider: ActivationKind = ActivationKind(13i32);
                pub const Contact: ActivationKind = ActivationKind(14i32);
                pub const LockScreenCall: ActivationKind = ActivationKind(15i32);
                pub const VoiceCommand: ActivationKind = ActivationKind(16i32);
                pub const LockScreen: ActivationKind = ActivationKind(17i32);
                pub const PickerReturned: ActivationKind = ActivationKind(1000i32);
                pub const WalletAction: ActivationKind = ActivationKind(1001i32);
                pub const PickFileContinuation: ActivationKind = ActivationKind(1002i32);
                pub const PickSaveFileContinuation: ActivationKind = ActivationKind(1003i32);
                pub const PickFolderContinuation: ActivationKind = ActivationKind(1004i32);
                pub const WebAuthenticationBrokerContinuation: ActivationKind =
                    ActivationKind(1005i32);
                pub const WebAccountProvider: ActivationKind = ActivationKind(1006i32);
                pub const ComponentUI: ActivationKind = ActivationKind(1007i32);
                pub const ProtocolForResults: ActivationKind = ActivationKind(1009i32);
                pub const ToastNotification: ActivationKind = ActivationKind(1010i32);
                pub const Print3DWorkflow: ActivationKind = ActivationKind(1011i32);
                pub const DialReceiver: ActivationKind = ActivationKind(1012i32);
                pub const DevicePairing: ActivationKind = ActivationKind(1013i32);
                pub const UserDataAccountsProvider: ActivationKind = ActivationKind(1014i32);
                pub const FilePickerExperience: ActivationKind = ActivationKind(1015i32);
                pub const LockScreenComponent: ActivationKind = ActivationKind(1016i32);
                pub const ContactPanel: ActivationKind = ActivationKind(1017i32);
                pub const PrintWorkflowForegroundTask: ActivationKind = ActivationKind(1018i32);
                pub const GameUIProvider: ActivationKind = ActivationKind(1019i32);
                pub const StartupTask: ActivationKind = ActivationKind(1020i32);
                pub const CommandLineLaunch: ActivationKind = ActivationKind(1021i32);
                pub const BarcodeScannerProvider: ActivationKind = ActivationKind(1022i32);
            }
            impl ::std::convert::From<i32> for ActivationKind {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ActivationKind {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ActivationKind {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.ApplicationModel.Activation.ActivationKind;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ICachedFileUpdaterActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICachedFileUpdaterActivatedEventArgs {
                type Vtable = ICachedFileUpdaterActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3496915399,
                    14341,
                    20171,
                    [183, 87, 108, 241, 94, 38, 254, 243],
                );
            }
            impl ICachedFileUpdaterActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ICachedFileUpdaterActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{d06eb1c7-3805-4ecb-b757-6cf15e26fef3}");
            }
            impl ::std::convert::From<ICachedFileUpdaterActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ICachedFileUpdaterActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ICachedFileUpdaterActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ICachedFileUpdaterActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for ICachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ICachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ICachedFileUpdaterActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ICachedFileUpdaterActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ICachedFileUpdaterActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ICachedFileUpdaterActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ICachedFileUpdaterActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a ICachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICachedFileUpdaterActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactMessageActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactMessageActivatedEventArgs {
                type Vtable = IContactMessageActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3730410930,
                    3587,
                    17328,
                    [191, 86, 188, 196, 11, 49, 98, 223],
                );
            }
            impl IContactMessageActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactMessageActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{de598db2-0e03-43b0-bf56-bcc40b3162df}");
            }
            impl ::std::convert::From<IContactMessageActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactMessageActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactMessageActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactMessageActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactMessageActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactMessageActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactMessageActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactMessageActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IContactMessageActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: IContactMessageActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactMessageActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &IContactMessageActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for IContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a IContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactMessageActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IViewSwitcherProvider(::windows::IInspectable);
            unsafe impl ::windows::Interface for IViewSwitcherProvider {
                type Vtable = IViewSwitcherProvider_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    871532710,
                    23596,
                    19751,
                    [186, 199, 117, 54, 8, 143, 18, 25],
                );
            }
            impl IViewSwitcherProvider {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IViewSwitcherProvider {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{33f288a6-5c2c-4d27-bac7-7536088f1219}");
            }
            impl ::std::convert::From<IViewSwitcherProvider> for ::windows::IInspectable {
                fn from(value: IViewSwitcherProvider) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IViewSwitcherProvider> for ::windows::IInspectable {
                fn from(value: &IViewSwitcherProvider) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IViewSwitcherProvider {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IViewSwitcherProvider {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IViewSwitcherProvider> for IActivatedEventArgs {
                fn from(value: IViewSwitcherProvider) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IViewSwitcherProvider> for IActivatedEventArgs {
                fn from(value: &IViewSwitcherProvider) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IViewSwitcherProvider {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IViewSwitcherProvider {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IViewSwitcherProvider_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct AppointmentsProviderShowTimeFrameActivatedEventArgs(::windows::IInspectable);
            impl AppointmentsProviderShowTimeFrameActivatedEventArgs {
                pub fn Duration(&self) -> ::windows::Result<super::super::Foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::TimeSpan>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for AppointmentsProviderShowTimeFrameActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.AppointmentsProviderShowTimeFrameActivatedEventArgs;{9baeaba6-0e0b-49aa-babc-12b1dc774986})" ) ;
            }
            unsafe impl ::windows::Interface for AppointmentsProviderShowTimeFrameActivatedEventArgs {
                type Vtable = IAppointmentsProviderShowTimeFrameActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2611915686,
                    3595,
                    18858,
                    [186, 188, 18, 177, 220, 119, 73, 134],
                );
            }
            impl ::windows::RuntimeName for AppointmentsProviderShowTimeFrameActivatedEventArgs {
                const NAME : & 'static str ="Windows.ApplicationModel.Activation.AppointmentsProviderShowTimeFrameActivatedEventArgs" ;
            }
            impl ::std::convert::From<AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn from(value: AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IAppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderShowTimeFrameActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                for &'a AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderShowTimeFrameActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderShowTimeFrameActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderShowTimeFrameActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: &AppointmentsProviderShowTimeFrameActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a AppointmentsProviderShowTimeFrameActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for AppointmentsProviderShowTimeFrameActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for AppointmentsProviderShowTimeFrameActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactPanelActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactPanelActivatedEventArgs {
                type Vtable = IContactPanelActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1388012516,
                    54228,
                    19299,
                    [128, 81, 74, 242, 8, 44, 171, 128],
                );
            }
            impl IContactPanelActivatedEventArgs {}
            unsafe impl ::windows::RuntimeType for IContactPanelActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{52bb63e4-d3d4-4b63-8051-4af2082cab80}");
            }
            impl ::std::convert::From<IContactPanelActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactPanelActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactPanelActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactPanelActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactPanelActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactPanelActivatedEventArgs(::windows::IInspectable);
            impl ContactPanelActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactPanelActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactPanelActivatedEventArgs;{52bb63e4-d3d4-4b63-8051-4af2082cab80})" ) ;
            }
            unsafe impl ::windows::Interface for ContactPanelActivatedEventArgs {
                type Vtable = IContactPanelActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1388012516,
                    54228,
                    19299,
                    [128, 81, 74, 242, 8, 44, 171, 128],
                );
            }
            impl ::windows::RuntimeName for ContactPanelActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactPanelActivatedEventArgs";
            }
            impl ::std::convert::From<ContactPanelActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactPanelActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactPanelActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactPanelActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactPanelActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactPanelActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactPanelActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactPanelActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ContactPanelActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: ContactPanelActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactPanelActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &ContactPanelActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for ContactPanelActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a ContactPanelActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ContactPanelActivatedEventArgs> for IContactPanelActivatedEventArgs {
                fn from(value: ContactPanelActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactPanelActivatedEventArgs> for IContactPanelActivatedEventArgs {
                fn from(value: &ContactPanelActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactPanelActivatedEventArgs>
                for ContactPanelActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactPanelActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactPanelActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactPanelActivatedEventArgs>
                for &'a ContactPanelActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactPanelActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactPanelActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ContactPanelActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactPanelActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BarcodeScannerPreviewActivatedEventArgs(::windows::IInspectable);
            impl BarcodeScannerPreviewActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn ConnectionId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for BarcodeScannerPreviewActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.BarcodeScannerPreviewActivatedEventArgs;{6772797c-99bf-4349-af22-e4123560371c})" ) ;
            }
            unsafe impl ::windows::Interface for BarcodeScannerPreviewActivatedEventArgs {
                type Vtable = IBarcodeScannerPreviewActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1735555452,
                    39359,
                    17225,
                    [175, 34, 228, 18, 53, 96, 55, 28],
                );
            }
            impl ::windows::RuntimeName for BarcodeScannerPreviewActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.BarcodeScannerPreviewActivatedEventArgs";
            }
            impl ::std::convert::From<BarcodeScannerPreviewActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BarcodeScannerPreviewActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<BarcodeScannerPreviewActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&BarcodeScannerPreviewActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for BarcodeScannerPreviewActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<BarcodeScannerPreviewActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&BarcodeScannerPreviewActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: &BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<BarcodeScannerPreviewActivatedEventArgs>
                for IBarcodeScannerPreviewActivatedEventArgs
            {
                fn from(value: BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&BarcodeScannerPreviewActivatedEventArgs>
                for IBarcodeScannerPreviewActivatedEventArgs
            {
                fn from(value: &BarcodeScannerPreviewActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IBarcodeScannerPreviewActivatedEventArgs>
                for BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IBarcodeScannerPreviewActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IBarcodeScannerPreviewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IBarcodeScannerPreviewActivatedEventArgs>
                for &'a BarcodeScannerPreviewActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IBarcodeScannerPreviewActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IBarcodeScannerPreviewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for BarcodeScannerPreviewActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for BarcodeScannerPreviewActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IContactsProviderActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IContactsProviderActivatedEventArgs {
                type Vtable = IContactsProviderActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1166073000,
                    22352,
                    18710,
                    [170, 82, 192, 130, 149, 33, 235, 148],
                );
            }
            impl IContactsProviderActivatedEventArgs {
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IContactsProviderActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{4580dca8-5750-4916-aa52-c0829521eb94}");
            }
            impl ::std::convert::From<IContactsProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IContactsProviderActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IContactsProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IContactsProviderActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IContactsProviderActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IContactsProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IContactsProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IContactsProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IContactsProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IContactsProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IContactsProviderActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IContactsProviderActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IContactsProviderActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAppointmentsProviderAddAppointmentActivatedEventArgs(
                ::windows::IInspectable,
            );
            unsafe impl ::windows::Interface for IAppointmentsProviderAddAppointmentActivatedEventArgs {
                type Vtable = IAppointmentsProviderAddAppointmentActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2726695783,
                    52965,
                    20045,
                    [158, 215, 65, 195, 78, 193, 139, 2],
                );
            }
            impl IAppointmentsProviderAddAppointmentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IAppointmentsProviderAddAppointmentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{a2861367-cee5-4e4d-9ed7-41c34ec18b02}");
            }
            impl ::std::convert::From<IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: IAppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &IAppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAppointmentsProviderAddAppointmentActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IShareTargetActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IShareTargetActivatedEventArgs {
                type Vtable = IShareTargetActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1272641992,
                    52658,
                    19147,
                    [191, 195, 102, 72, 86, 51, 120, 236],
                );
            }
            impl IShareTargetActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IShareTargetActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{4bdaf9c8-cdb2-4acb-bfc3-6648563378ec}");
            }
            impl ::std::convert::From<IShareTargetActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IShareTargetActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IShareTargetActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IShareTargetActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IShareTargetActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IShareTargetActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IShareTargetActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IShareTargetActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IShareTargetActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ShareTargetActivatedEventArgs(::windows::IInspectable);
            impl ShareTargetActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ShareTargetActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs;{4bdaf9c8-cdb2-4acb-bfc3-6648563378ec})" ) ;
            }
            unsafe impl ::windows::Interface for ShareTargetActivatedEventArgs {
                type Vtable = IShareTargetActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1272641992,
                    52658,
                    19147,
                    [191, 195, 102, 72, 86, 51, 120, 236],
                );
            }
            impl ::windows::RuntimeName for ShareTargetActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs";
            }
            impl ::std::convert::From<ShareTargetActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ShareTargetActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ShareTargetActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ShareTargetActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ShareTargetActivatedEventArgs> for IShareTargetActivatedEventArgs {
                fn from(value: ShareTargetActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ShareTargetActivatedEventArgs> for IShareTargetActivatedEventArgs {
                fn from(value: &ShareTargetActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IShareTargetActivatedEventArgs>
                for ShareTargetActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IShareTargetActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IShareTargetActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IShareTargetActivatedEventArgs>
                for &'a ShareTargetActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IShareTargetActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IShareTargetActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ShareTargetActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ShareTargetActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ShareTargetActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ShareTargetActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ShareTargetActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: ShareTargetActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ShareTargetActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &ShareTargetActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for ShareTargetActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a ShareTargetActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ShareTargetActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ShareTargetActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileOpenPickerActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileOpenPickerActivatedEventArgs {
                type Vtable = IFileOpenPickerActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1921151106,
                    21797,
                    19442,
                    [188, 9, 31, 80, 149, 212, 150, 77],
                );
            }
            impl IFileOpenPickerActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileOpenPickerActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{72827082-5525-4bf2-bc09-1f5095d4964d}");
            }
            impl ::std::convert::From<IFileOpenPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IFileOpenPickerActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileOpenPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IFileOpenPickerActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFileOpenPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileOpenPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IFileOpenPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileOpenPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IFileOpenPickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IFileOpenPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IFileOpenPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileOpenPickerActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileSavePickerContinuationEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileSavePickerContinuationEventArgs {
                type Vtable = IFileSavePickerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    746876897,
                    15277,
                    20275,
                    [140, 139, 228, 111, 174, 130, 75, 75],
                );
            }
            impl IFileSavePickerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileSavePickerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{2c846fe1-3bad-4f33-8c8b-e46fae824b4b}");
            }
            impl ::std::convert::From<IFileSavePickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: IFileSavePickerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileSavePickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: &IFileSavePickerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IFileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileSavePickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: IFileSavePickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileSavePickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &IFileSavePickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IFileSavePickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IFileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IFileSavePickerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: IFileSavePickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileSavePickerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: &IFileSavePickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for IFileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a IFileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileSavePickerContinuationEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FileSavePickerContinuationEventArgs(::windows::IInspectable);
            impl FileSavePickerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FileSavePickerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.FileSavePickerContinuationEventArgs;{2c846fe1-3bad-4f33-8c8b-e46fae824b4b})" ) ;
            }
            unsafe impl ::windows::Interface for FileSavePickerContinuationEventArgs {
                type Vtable = IFileSavePickerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    746876897,
                    15277,
                    20275,
                    [140, 139, 228, 111, 174, 130, 75, 75],
                );
            }
            impl ::windows::RuntimeName for FileSavePickerContinuationEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.FileSavePickerContinuationEventArgs";
            }
            impl ::std::convert::From<FileSavePickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: FileSavePickerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FileSavePickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: &FileSavePickerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FileSavePickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FileSavePickerContinuationEventArgs>
                for IFileSavePickerContinuationEventArgs
            {
                fn from(value: FileSavePickerContinuationEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FileSavePickerContinuationEventArgs>
                for IFileSavePickerContinuationEventArgs
            {
                fn from(value: &FileSavePickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileSavePickerContinuationEventArgs>
                for FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileSavePickerContinuationEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileSavePickerContinuationEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileSavePickerContinuationEventArgs>
                for &'a FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileSavePickerContinuationEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileSavePickerContinuationEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileSavePickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: FileSavePickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileSavePickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &FileSavePickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for FileSavePickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a FileSavePickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileSavePickerContinuationEventArgs> for IContinuationActivatedEventArgs {
                fn from(value: FileSavePickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileSavePickerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: &FileSavePickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<FileSavePickerContinuationEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: FileSavePickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileSavePickerContinuationEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &FileSavePickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a FileSavePickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for FileSavePickerContinuationEventArgs {}
            unsafe impl ::std::marker::Sync for FileSavePickerContinuationEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ApplicationExecutionState(pub i32);
            impl ApplicationExecutionState {
                pub const NotRunning: ApplicationExecutionState = ApplicationExecutionState(0i32);
                pub const Running: ApplicationExecutionState = ApplicationExecutionState(1i32);
                pub const Suspended: ApplicationExecutionState = ApplicationExecutionState(2i32);
                pub const Terminated: ApplicationExecutionState = ApplicationExecutionState(3i32);
                pub const ClosedByUser: ApplicationExecutionState = ApplicationExecutionState(4i32);
            }
            impl ::std::convert::From<i32> for ApplicationExecutionState {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ApplicationExecutionState {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ApplicationExecutionState {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.ApplicationModel.Activation.ApplicationExecutionState;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IBackgroundActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBackgroundActivatedEventArgs {
                type Vtable = IBackgroundActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2870263520,
                    59232,
                    17422,
                    [169, 28, 68, 121, 109, 227, 169, 45],
                );
            }
            impl IBackgroundActivatedEventArgs {}
            unsafe impl ::windows::RuntimeType for IBackgroundActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{ab14bee0-e760-440e-a91c-44796de3a92d}");
            }
            impl ::std::convert::From<IBackgroundActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IBackgroundActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IBackgroundActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IBackgroundActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IBackgroundActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IBackgroundActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBackgroundActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileOpenPickerActivatedEventArgs2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileOpenPickerActivatedEventArgs2 {
                type Vtable = IFileOpenPickerActivatedEventArgs2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1584602982,
                    36127,
                    17915,
                    [175, 29, 115, 32, 92, 143, 199, 161],
                );
            }
            impl IFileOpenPickerActivatedEventArgs2 {
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileOpenPickerActivatedEventArgs2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{5e731f66-8d1f-45fb-af1d-73205c8fc7a1}");
            }
            impl ::std::convert::From<IFileOpenPickerActivatedEventArgs2> for ::windows::IInspectable {
                fn from(value: IFileOpenPickerActivatedEventArgs2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileOpenPickerActivatedEventArgs2> for ::windows::IInspectable {
                fn from(value: &IFileOpenPickerActivatedEventArgs2) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFileOpenPickerActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileOpenPickerActivatedEventArgs2
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileOpenPickerActivatedEventArgs2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactPostActivatedEventArgs(::windows::IInspectable);
            impl ContactPostActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactPostActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactPostActivatedEventArgs;{b35a3c67-f1e7-4655-ad6e-4857588f552f})" ) ;
            }
            unsafe impl ::windows::Interface for ContactPostActivatedEventArgs {
                type Vtable = IContactPostActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3009035367,
                    61927,
                    18005,
                    [173, 110, 72, 87, 88, 143, 85, 47],
                );
            }
            impl ::windows::RuntimeName for ContactPostActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactPostActivatedEventArgs";
            }
            impl ::std::convert::From<ContactPostActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactPostActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactPostActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactPostActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactPostActivatedEventArgs> for IContactPostActivatedEventArgs {
                fn from(value: ContactPostActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactPostActivatedEventArgs> for IContactPostActivatedEventArgs {
                fn from(value: &ContactPostActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactPostActivatedEventArgs>
                for ContactPostActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactPostActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactPostActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactPostActivatedEventArgs>
                for &'a ContactPostActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactPostActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactPostActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ContactPostActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactPostActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactPostActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactPostActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ContactPostActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: ContactPostActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactPostActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &ContactPostActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for ContactPostActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a ContactPostActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ContactPostActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactPostActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct Print3DWorkflowActivatedEventArgs(::windows::IInspectable);
            impl Print3DWorkflowActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for Print3DWorkflowActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.Print3DWorkflowActivatedEventArgs;{3f57e78b-f2ac-4619-8302-ef855e1c9b90})" ) ;
            }
            unsafe impl ::windows::Interface for Print3DWorkflowActivatedEventArgs {
                type Vtable = IPrint3DWorkflowActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1062725515,
                    62124,
                    17945,
                    [131, 2, 239, 133, 94, 28, 155, 144],
                );
            }
            impl ::windows::RuntimeName for Print3DWorkflowActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.Print3DWorkflowActivatedEventArgs";
            }
            impl ::std::convert::From<Print3DWorkflowActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: Print3DWorkflowActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&Print3DWorkflowActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &Print3DWorkflowActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for Print3DWorkflowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a Print3DWorkflowActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<Print3DWorkflowActivatedEventArgs>
                for IPrint3DWorkflowActivatedEventArgs
            {
                fn from(value: Print3DWorkflowActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&Print3DWorkflowActivatedEventArgs>
                for IPrint3DWorkflowActivatedEventArgs
            {
                fn from(value: &Print3DWorkflowActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPrint3DWorkflowActivatedEventArgs>
                for Print3DWorkflowActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IPrint3DWorkflowActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IPrint3DWorkflowActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPrint3DWorkflowActivatedEventArgs>
                for &'a Print3DWorkflowActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IPrint3DWorkflowActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IPrint3DWorkflowActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<Print3DWorkflowActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: Print3DWorkflowActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&Print3DWorkflowActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &Print3DWorkflowActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for Print3DWorkflowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a Print3DWorkflowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for Print3DWorkflowActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for Print3DWorkflowActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileActivatedEventArgsWithNeighboringFiles(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileActivatedEventArgsWithNeighboringFiles {
                type Vtable = IFileActivatedEventArgsWithNeighboringFiles_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1127981476,
                    57826,
                    18685,
                    [183, 252, 181, 214, 238, 230, 80, 51],
                );
            }
            impl IFileActivatedEventArgsWithNeighboringFiles {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IFileActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileActivatedEventArgsWithNeighboringFiles {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{433ba1a4-e1e2-48fd-b7fc-b5d6eee65033}");
            }
            impl ::std::convert::From<IFileActivatedEventArgsWithNeighboringFiles> for ::windows::IInspectable {
                fn from(value: IFileActivatedEventArgsWithNeighboringFiles) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgsWithNeighboringFiles>
                for ::windows::IInspectable
            {
                fn from(value: &IFileActivatedEventArgsWithNeighboringFiles) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IFileActivatedEventArgsWithNeighboringFiles
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileActivatedEventArgsWithNeighboringFiles
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileActivatedEventArgsWithNeighboringFiles> for IActivatedEventArgs {
                fn from(value: IFileActivatedEventArgsWithNeighboringFiles) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgsWithNeighboringFiles> for IActivatedEventArgs {
                fn from(value: &IFileActivatedEventArgsWithNeighboringFiles) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IFileActivatedEventArgsWithNeighboringFiles
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IFileActivatedEventArgsWithNeighboringFiles
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IFileActivatedEventArgsWithNeighboringFiles> for IFileActivatedEventArgs {
                fn from(value: IFileActivatedEventArgsWithNeighboringFiles) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgsWithNeighboringFiles>
                for IFileActivatedEventArgs
            {
                fn from(value: &IFileActivatedEventArgsWithNeighboringFiles) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgs>
                for IFileActivatedEventArgsWithNeighboringFiles
            {
                fn into_param(self) -> ::windows::Param<'a, IFileActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IFileActivatedEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgs>
                for &'a IFileActivatedEventArgsWithNeighboringFiles
            {
                fn into_param(self) -> ::windows::Param<'a, IFileActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IFileActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileActivatedEventArgsWithNeighboringFiles_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFileActivatedEventArgsWithCallerPackageFamilyName(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFileActivatedEventArgsWithCallerPackageFamilyName {
                type Vtable = IFileActivatedEventArgsWithCallerPackageFamilyName_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    761327723,
                    53855,
                    19749,
                    [134, 83, 225, 197, 225, 16, 131, 9],
                );
            }
            impl IFileActivatedEventArgsWithCallerPackageFamilyName {
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFileActivatedEventArgsWithCallerPackageFamilyName {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{2d60f06b-d25f-4d25-8653-e1c5e1108309}");
            }
            impl ::std::convert::From<IFileActivatedEventArgsWithCallerPackageFamilyName>
                for ::windows::IInspectable
            {
                fn from(value: IFileActivatedEventArgsWithCallerPackageFamilyName) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgsWithCallerPackageFamilyName>
                for ::windows::IInspectable
            {
                fn from(value: &IFileActivatedEventArgsWithCallerPackageFamilyName) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IFileActivatedEventArgsWithCallerPackageFamilyName
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFileActivatedEventArgsWithCallerPackageFamilyName
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFileActivatedEventArgsWithCallerPackageFamilyName>
                for IActivatedEventArgs
            {
                fn from(value: IFileActivatedEventArgsWithCallerPackageFamilyName) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFileActivatedEventArgsWithCallerPackageFamilyName>
                for IActivatedEventArgs
            {
                fn from(value: &IFileActivatedEventArgsWithCallerPackageFamilyName) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IFileActivatedEventArgsWithCallerPackageFamilyName
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IFileActivatedEventArgsWithCallerPackageFamilyName
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFileActivatedEventArgsWithCallerPackageFamilyName_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FileActivatedEventArgs(::windows::IInspectable);
            impl FileActivatedEventArgs {
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = &::windows::Interface::cast::<
                        IFileActivatedEventArgsWithCallerPackageFamilyName,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FileActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.FileActivatedEventArgs;{bb2afc33-93b1-42ed-8b26-236dd9c78496})" ) ;
            }
            unsafe impl ::windows::Interface for FileActivatedEventArgs {
                type Vtable = IFileActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3140156467,
                    37809,
                    17133,
                    [139, 38, 35, 109, 217, 199, 132, 150],
                );
            }
            impl ::windows::RuntimeName for FileActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.FileActivatedEventArgs";
            }
            impl ::std::convert::From<FileActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: FileActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs> for IFileActivatedEventArgs {
                fn from(value: FileActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for IFileActivatedEventArgs {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgs> for FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IFileActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IFileActivatedEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgs> for &'a FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IFileActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IFileActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs> for FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a FileActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs>
                for IFileActivatedEventArgsWithCallerPackageFamilyName
            {
                fn from(value: FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs>
                for IFileActivatedEventArgsWithCallerPackageFamilyName
            {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgsWithCallerPackageFamilyName>
                for FileActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IFileActivatedEventArgsWithCallerPackageFamilyName>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileActivatedEventArgsWithCallerPackageFamilyName,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgsWithCallerPackageFamilyName>
                for &'a FileActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IFileActivatedEventArgsWithCallerPackageFamilyName>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileActivatedEventArgsWithCallerPackageFamilyName,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs> for IFileActivatedEventArgsWithNeighboringFiles {
                fn from(value: FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for IFileActivatedEventArgsWithNeighboringFiles {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgsWithNeighboringFiles>
                for FileActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IFileActivatedEventArgsWithNeighboringFiles>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileActivatedEventArgsWithNeighboringFiles,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileActivatedEventArgsWithNeighboringFiles>
                for &'a FileActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IFileActivatedEventArgsWithNeighboringFiles>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileActivatedEventArgsWithNeighboringFiles,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: FileActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &FileActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for &'a FileActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for FileActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for FileActivatedEventArgs {}
            #[repr(C)]
            #[derive(
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
            )]
            pub struct ActivatedEventsContract(pub u8);
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactMessageActivatedEventArgs(::windows::IInspectable);
            impl ContactMessageActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactMessageActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactMessageActivatedEventArgs;{de598db2-0e03-43b0-bf56-bcc40b3162df})" ) ;
            }
            unsafe impl ::windows::Interface for ContactMessageActivatedEventArgs {
                type Vtable = IContactMessageActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3730410930,
                    3587,
                    17328,
                    [191, 86, 188, 196, 11, 49, 98, 223],
                );
            }
            impl ::windows::RuntimeName for ContactMessageActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactMessageActivatedEventArgs";
            }
            impl ::std::convert::From<ContactMessageActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactMessageActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactMessageActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactMessageActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactMessageActivatedEventArgs> for IContactMessageActivatedEventArgs {
                fn from(value: ContactMessageActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactMessageActivatedEventArgs> for IContactMessageActivatedEventArgs {
                fn from(value: &ContactMessageActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactMessageActivatedEventArgs>
                for ContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactMessageActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactMessageActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactMessageActivatedEventArgs>
                for &'a ContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactMessageActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactMessageActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ContactMessageActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactMessageActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactMessageActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactMessageActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ContactMessageActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: ContactMessageActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactMessageActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &ContactMessageActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs> for ContactMessageActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a ContactMessageActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ContactMessageActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactMessageActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct LockScreenCallActivatedEventArgs(::windows::IInspectable);
            impl LockScreenCallActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for LockScreenCallActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.LockScreenCallActivatedEventArgs;{06f37fbe-b5f2-448b-b13e-e328ac1c516a})" ) ;
            }
            unsafe impl ::windows::Interface for LockScreenCallActivatedEventArgs {
                type Vtable = ILockScreenCallActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    116621246,
                    46578,
                    17547,
                    [177, 62, 227, 40, 172, 28, 81, 106],
                );
            }
            impl ::windows::RuntimeName for LockScreenCallActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.LockScreenCallActivatedEventArgs";
            }
            impl ::std::convert::From<LockScreenCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: LockScreenCallActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LockScreenCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &LockScreenCallActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for LockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a LockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<LockScreenCallActivatedEventArgs> for ILockScreenCallActivatedEventArgs {
                fn from(value: LockScreenCallActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LockScreenCallActivatedEventArgs> for ILockScreenCallActivatedEventArgs {
                fn from(value: &LockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILockScreenCallActivatedEventArgs>
                for LockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILockScreenCallActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILockScreenCallActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILockScreenCallActivatedEventArgs>
                for &'a LockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILockScreenCallActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILockScreenCallActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<LockScreenCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: LockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LockScreenCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &LockScreenCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for LockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a LockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LockScreenCallActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: LockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LockScreenCallActivatedEventArgs>
                for IApplicationViewActivatedEventArgs
            {
                fn from(value: &LockScreenCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for LockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a LockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<LockScreenCallActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: LockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LockScreenCallActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: &LockScreenCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for LockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs>
                for &'a LockScreenCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<LockScreenCallActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: LockScreenCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LockScreenCallActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &LockScreenCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for LockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a LockScreenCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LockScreenCallActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for LockScreenCallActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IProtocolActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IProtocolActivatedEventArgs {
                type Vtable = IProtocolActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1620440285,
                    47040,
                    18091,
                    [129, 254, 217, 15, 54, 208, 13, 36],
                );
            }
            impl IProtocolActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IProtocolActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{6095f4dd-b7c0-46ab-81fe-d90f36d00d24}");
            }
            impl ::std::convert::From<IProtocolActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IProtocolActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IProtocolActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IProtocolActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IProtocolActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IProtocolActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IProtocolActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IProtocolActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IPrintTaskSettingsActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPrintTaskSettingsActivatedEventArgs {
                type Vtable = IPrintTaskSettingsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3996164297,
                    52822,
                    18533,
                    [186, 142, 137, 84, 172, 39, 17, 7],
                );
            }
            impl IPrintTaskSettingsActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IPrintTaskSettingsActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{ee30a0c9-ce56-4865-ba8e-8954ac271107}");
            }
            impl ::std::convert::From<IPrintTaskSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IPrintTaskSettingsActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IPrintTaskSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IPrintTaskSettingsActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IPrintTaskSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IPrintTaskSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IPrintTaskSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IPrintTaskSettingsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPrintTaskSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IPrintTaskSettingsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IPrintTaskSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IPrintTaskSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPrintTaskSettingsActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ISearchActivatedEventArgsWithLinguisticDetails(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISearchActivatedEventArgsWithLinguisticDetails {
                type Vtable = ISearchActivatedEventArgsWithLinguisticDetails_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3231658970,
                    2219,
                    18737,
                    [155, 124, 69, 16, 37, 242, 31, 129],
                );
            }
            impl ISearchActivatedEventArgsWithLinguisticDetails {}
            unsafe impl ::windows::RuntimeType for ISearchActivatedEventArgsWithLinguisticDetails {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{c09f33da-08ab-4931-9b7c-451025f21f81}");
            }
            impl ::std::convert::From<ISearchActivatedEventArgsWithLinguisticDetails>
                for ::windows::IInspectable
            {
                fn from(value: ISearchActivatedEventArgsWithLinguisticDetails) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ISearchActivatedEventArgsWithLinguisticDetails>
                for ::windows::IInspectable
            {
                fn from(value: &ISearchActivatedEventArgsWithLinguisticDetails) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for ISearchActivatedEventArgsWithLinguisticDetails
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ISearchActivatedEventArgsWithLinguisticDetails
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISearchActivatedEventArgsWithLinguisticDetails_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SearchActivatedEventArgs(::windows::IInspectable);
            impl SearchActivatedEventArgs {
                pub fn QueryText(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Language(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SearchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.SearchActivatedEventArgs;{8cb36951-58c8-43e3-94bc-41d33f8b630e})" ) ;
            }
            unsafe impl ::windows::Interface for SearchActivatedEventArgs {
                type Vtable = ISearchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2360568145,
                    22728,
                    17379,
                    [148, 188, 65, 211, 63, 139, 99, 14],
                );
            }
            impl ::windows::RuntimeName for SearchActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.SearchActivatedEventArgs";
            }
            impl ::std::convert::From<SearchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<SearchActivatedEventArgs> for ISearchActivatedEventArgs {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs> for ISearchActivatedEventArgs {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ISearchActivatedEventArgs> for SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ISearchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ISearchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ISearchActivatedEventArgs> for &'a SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ISearchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ISearchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<SearchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<SearchActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs> for SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a SearchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<SearchActivatedEventArgs>
                for ISearchActivatedEventArgsWithLinguisticDetails
            {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs>
                for ISearchActivatedEventArgsWithLinguisticDetails
            {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ISearchActivatedEventArgsWithLinguisticDetails>
                for SearchActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, ISearchActivatedEventArgsWithLinguisticDetails>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        ISearchActivatedEventArgsWithLinguisticDetails,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ISearchActivatedEventArgsWithLinguisticDetails>
                for &'a SearchActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, ISearchActivatedEventArgsWithLinguisticDetails>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        ISearchActivatedEventArgsWithLinguisticDetails,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<SearchActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<SearchActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: SearchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SearchActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &SearchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for &'a SearchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for SearchActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for SearchActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CameraSettingsActivatedEventArgs(::windows::IInspectable);
            impl CameraSettingsActivatedEventArgs {
                pub fn VideoDeviceController(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn VideoDeviceExtension(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for CameraSettingsActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.CameraSettingsActivatedEventArgs;{fb67a508-2dad-490a-9170-dca036eb114b})" ) ;
            }
            unsafe impl ::windows::Interface for CameraSettingsActivatedEventArgs {
                type Vtable = ICameraSettingsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4217873672,
                    11693,
                    18698,
                    [145, 112, 220, 160, 54, 235, 17, 75],
                );
            }
            impl ::windows::RuntimeName for CameraSettingsActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.CameraSettingsActivatedEventArgs";
            }
            impl ::std::convert::From<CameraSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: CameraSettingsActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&CameraSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &CameraSettingsActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for CameraSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a CameraSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<CameraSettingsActivatedEventArgs> for ICameraSettingsActivatedEventArgs {
                fn from(value: CameraSettingsActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&CameraSettingsActivatedEventArgs> for ICameraSettingsActivatedEventArgs {
                fn from(value: &CameraSettingsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICameraSettingsActivatedEventArgs>
                for CameraSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ICameraSettingsActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ICameraSettingsActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICameraSettingsActivatedEventArgs>
                for &'a CameraSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ICameraSettingsActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ICameraSettingsActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<CameraSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: CameraSettingsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&CameraSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &CameraSettingsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for CameraSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a CameraSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for CameraSettingsActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for CameraSettingsActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFolderPickerContinuationEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFolderPickerContinuationEventArgs {
                type Vtable = IFolderPickerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1367876454,
                    40779,
                    18831,
                    [190, 176, 66, 104, 79, 110, 28, 41],
                );
            }
            impl IFolderPickerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFolderPickerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{51882366-9f4b-498f-beb0-42684f6e1c29}");
            }
            impl ::std::convert::From<IFolderPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: IFolderPickerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFolderPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: &IFolderPickerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFolderPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IFolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IFolderPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: IFolderPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFolderPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &IFolderPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IFolderPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IFolderPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IFolderPickerContinuationEventArgs> for IContinuationActivatedEventArgs {
                fn from(value: IFolderPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IFolderPickerContinuationEventArgs> for IContinuationActivatedEventArgs {
                fn from(value: &IFolderPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for IFolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a IFolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFolderPickerContinuationEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FolderPickerContinuationEventArgs(::windows::IInspectable);
            impl FolderPickerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FolderPickerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.FolderPickerContinuationEventArgs;{51882366-9f4b-498f-beb0-42684f6e1c29})" ) ;
            }
            unsafe impl ::windows::Interface for FolderPickerContinuationEventArgs {
                type Vtable = IFolderPickerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1367876454,
                    40779,
                    18831,
                    [190, 176, 66, 104, 79, 110, 28, 41],
                );
            }
            impl ::windows::RuntimeName for FolderPickerContinuationEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.FolderPickerContinuationEventArgs";
            }
            impl ::std::convert::From<FolderPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: FolderPickerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FolderPickerContinuationEventArgs> for ::windows::IInspectable {
                fn from(value: &FolderPickerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FolderPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FolderPickerContinuationEventArgs>
                for IFolderPickerContinuationEventArgs
            {
                fn from(value: FolderPickerContinuationEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FolderPickerContinuationEventArgs>
                for IFolderPickerContinuationEventArgs
            {
                fn from(value: &FolderPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFolderPickerContinuationEventArgs>
                for FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFolderPickerContinuationEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFolderPickerContinuationEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFolderPickerContinuationEventArgs>
                for &'a FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFolderPickerContinuationEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFolderPickerContinuationEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FolderPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: FolderPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FolderPickerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &FolderPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for FolderPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a FolderPickerContinuationEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FolderPickerContinuationEventArgs> for IContinuationActivatedEventArgs {
                fn from(value: FolderPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FolderPickerContinuationEventArgs> for IContinuationActivatedEventArgs {
                fn from(value: &FolderPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<FolderPickerContinuationEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: FolderPickerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FolderPickerContinuationEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &FolderPickerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a FolderPickerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for FolderPickerContinuationEventArgs {}
            unsafe impl ::std::marker::Sync for FolderPickerContinuationEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISplashScreen(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISplashScreen {
                type Vtable = ISplashScreen_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3394082652,
                    54486,
                    17392,
                    [151, 192, 8, 51, 198, 57, 28, 36],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISplashScreen_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    cookie: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SplashScreen(::windows::IInspectable);
            impl SplashScreen {
                pub fn RemoveDismissed<'a>(
                    &self,
                    cookie: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            cookie.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SplashScreen {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.SplashScreen;{ca4d975c-d4d6-43f0-97c0-0833c6391c24})" ) ;
            }
            unsafe impl ::windows::Interface for SplashScreen {
                type Vtable = ISplashScreen_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3394082652,
                    54486,
                    17392,
                    [151, 192, 8, 51, 198, 57, 28, 36],
                );
            }
            impl ::windows::RuntimeName for SplashScreen {
                const NAME: &'static str = "Windows.ApplicationModel.Activation.SplashScreen";
            }
            impl ::std::convert::From<SplashScreen> for ::windows::IInspectable {
                fn from(value: SplashScreen) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&SplashScreen> for ::windows::IInspectable {
                fn from(value: &SplashScreen) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SplashScreen {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SplashScreen {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IUserDataAccountProviderActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUserDataAccountProviderActivatedEventArgs {
                type Vtable = IUserDataAccountProviderActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    466220835,
                    36593,
                    19025,
                    [166, 58, 254, 113, 30, 234, 182, 7],
                );
            }
            impl IUserDataAccountProviderActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IUserDataAccountProviderActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{1bc9f723-8ef1-4a51-a63a-fe711eeab607}");
            }
            impl ::std::convert::From<IUserDataAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IUserDataAccountProviderActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IUserDataAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IUserDataAccountProviderActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IUserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IUserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IUserDataAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IUserDataAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IUserDataAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IUserDataAccountProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IUserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IUserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUserDataAccountProviderActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct UserDataAccountProviderActivatedEventArgs(::windows::IInspectable);
            impl UserDataAccountProviderActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for UserDataAccountProviderActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.UserDataAccountProviderActivatedEventArgs;{1bc9f723-8ef1-4a51-a63a-fe711eeab607})" ) ;
            }
            unsafe impl ::windows::Interface for UserDataAccountProviderActivatedEventArgs {
                type Vtable = IUserDataAccountProviderActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    466220835,
                    36593,
                    19025,
                    [166, 58, 254, 113, 30, 234, 182, 7],
                );
            }
            impl ::windows::RuntimeName for UserDataAccountProviderActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.UserDataAccountProviderActivatedEventArgs";
            }
            impl ::std::convert::From<UserDataAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: UserDataAccountProviderActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&UserDataAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &UserDataAccountProviderActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for UserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a UserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<UserDataAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: UserDataAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&UserDataAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &UserDataAccountProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for UserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a UserDataAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<UserDataAccountProviderActivatedEventArgs>
                for IUserDataAccountProviderActivatedEventArgs
            {
                fn from(value: UserDataAccountProviderActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&UserDataAccountProviderActivatedEventArgs>
                for IUserDataAccountProviderActivatedEventArgs
            {
                fn from(value: &UserDataAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IUserDataAccountProviderActivatedEventArgs>
                for UserDataAccountProviderActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IUserDataAccountProviderActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IUserDataAccountProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IUserDataAccountProviderActivatedEventArgs>
                for &'a UserDataAccountProviderActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IUserDataAccountProviderActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IUserDataAccountProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for UserDataAccountProviderActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for UserDataAccountProviderActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ContactVideoCallActivatedEventArgs(::windows::IInspectable);
            impl ContactVideoCallActivatedEventArgs {
                pub fn ServiceId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ServiceUserId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IContactActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ContactVideoCallActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ContactVideoCallActivatedEventArgs;{61079db8-e3e7-4b4f-858d-5c63a96ef684})" ) ;
            }
            unsafe impl ::windows::Interface for ContactVideoCallActivatedEventArgs {
                type Vtable = IContactVideoCallActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1627889080,
                    58343,
                    19279,
                    [133, 141, 92, 99, 169, 110, 246, 132],
                );
            }
            impl ::windows::RuntimeName for ContactVideoCallActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ContactVideoCallActivatedEventArgs";
            }
            impl ::std::convert::From<ContactVideoCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ContactVideoCallActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ContactVideoCallActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ContactVideoCallActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ContactVideoCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ContactVideoCallActivatedEventArgs>
                for IContactVideoCallActivatedEventArgs
            {
                fn from(value: ContactVideoCallActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ContactVideoCallActivatedEventArgs>
                for IContactVideoCallActivatedEventArgs
            {
                fn from(value: &ContactVideoCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactVideoCallActivatedEventArgs>
                for ContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactVideoCallActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IContactVideoCallActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactVideoCallActivatedEventArgs>
                for &'a ContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactVideoCallActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IContactVideoCallActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ContactVideoCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ContactVideoCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactVideoCallActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ContactVideoCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ContactVideoCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ContactVideoCallActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ContactVideoCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: ContactVideoCallActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ContactVideoCallActivatedEventArgs> for IContactActivatedEventArgs {
                fn from(value: &ContactVideoCallActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for ContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContactActivatedEventArgs>
                for &'a ContactVideoCallActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContactActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContactActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ContactVideoCallActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ContactVideoCallActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IWebAccountProviderActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWebAccountProviderActivatedEventArgs {
                type Vtable = IWebAccountProviderActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1924601716,
                    39146,
                    19663,
                    [151, 82, 70, 217, 5, 16, 4, 241],
                );
            }
            impl IWebAccountProviderActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IWebAccountProviderActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{72b71774-98ea-4ccf-9752-46d9051004f1}");
            }
            impl ::std::convert::From<IWebAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IWebAccountProviderActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IWebAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IWebAccountProviderActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IWebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IWebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IWebAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IWebAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IWebAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IWebAccountProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IWebAccountProviderActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IWebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWebAccountProviderActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct PickerReturnedActivatedEventArgs(::windows::IInspectable);
            impl PickerReturnedActivatedEventArgs {
                pub fn PickerOperationId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for PickerReturnedActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.PickerReturnedActivatedEventArgs;{360defb9-a9d3-4984-a4ed-9ec734604921})" ) ;
            }
            unsafe impl ::windows::Interface for PickerReturnedActivatedEventArgs {
                type Vtable = IPickerReturnedActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    906883001,
                    43475,
                    18820,
                    [164, 237, 158, 199, 52, 96, 73, 33],
                );
            }
            impl ::windows::RuntimeName for PickerReturnedActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.PickerReturnedActivatedEventArgs";
            }
            impl ::std::convert::From<PickerReturnedActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: PickerReturnedActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&PickerReturnedActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &PickerReturnedActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for PickerReturnedActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a PickerReturnedActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<PickerReturnedActivatedEventArgs> for IPickerReturnedActivatedEventArgs {
                fn from(value: PickerReturnedActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&PickerReturnedActivatedEventArgs> for IPickerReturnedActivatedEventArgs {
                fn from(value: &PickerReturnedActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPickerReturnedActivatedEventArgs>
                for PickerReturnedActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IPickerReturnedActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IPickerReturnedActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPickerReturnedActivatedEventArgs>
                for &'a PickerReturnedActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IPickerReturnedActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IPickerReturnedActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<PickerReturnedActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: PickerReturnedActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&PickerReturnedActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &PickerReturnedActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for PickerReturnedActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a PickerReturnedActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for PickerReturnedActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for PickerReturnedActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData(
                ::windows::IInspectable,
            );
            unsafe impl ::windows::Interface for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData {
                type Vtable = IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3628731410,
                    23695,
                    17292,
                    [131, 203, 194, 143, 204, 11, 47, 219],
                );
            }
            impl IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData {
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{d84a0c12-5c8f-438c-83cb-c28fcc0b2fdb}");
            }
            impl ::std::convert::From<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>
                for ::windows::IInspectable
            {
                fn from(
                    value: IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                ) -> Self {
                    value.0
                }
            }
            impl
                ::std::convert::From<&IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>
                for ::windows::IInspectable
            {
                fn from(
                    value: &IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                ) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>
                for IActivatedEventArgs
            {
                fn from(
                    value: IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                ) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl
                ::std::convert::From<&IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>
                for IActivatedEventArgs
            {
                fn from(
                    value: &IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                ) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ProtocolActivatedEventArgs(::windows::IInspectable);
            impl ProtocolActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = &::windows::Interface::cast::<
                        IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ProtocolActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs;{6095f4dd-b7c0-46ab-81fe-d90f36d00d24})" ) ;
            }
            unsafe impl ::windows::Interface for ProtocolActivatedEventArgs {
                type Vtable = IProtocolActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1620440285,
                    47040,
                    18091,
                    [129, 254, 217, 15, 54, 208, 13, 36],
                );
            }
            impl ::windows::RuntimeName for ProtocolActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs";
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs> for IProtocolActivatedEventArgs {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs> for IProtocolActivatedEventArgs {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IProtocolActivatedEventArgs> for ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IProtocolActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IProtocolActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IProtocolActivatedEventArgs> for &'a ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IProtocolActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IProtocolActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for ProtocolActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a ProtocolActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs>
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs>
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > for ProtocolActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > for &'a ProtocolActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ProtocolActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: ProtocolActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &ProtocolActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for &'a ProtocolActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ProtocolActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ProtocolActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FileOpenPickerActivatedEventArgs(::windows::IInspectable);
            impl FileOpenPickerActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IFileOpenPickerActivatedEventArgs2>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FileOpenPickerActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs;{72827082-5525-4bf2-bc09-1f5095d4964d})" ) ;
            }
            unsafe impl ::windows::Interface for FileOpenPickerActivatedEventArgs {
                type Vtable = IFileOpenPickerActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1921151106,
                    21797,
                    19442,
                    [188, 9, 31, 80, 149, 212, 150, 77],
                );
            }
            impl ::windows::RuntimeName for FileOpenPickerActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs";
            }
            impl ::std::convert::From<FileOpenPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: FileOpenPickerActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FileOpenPickerActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &FileOpenPickerActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FileOpenPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FileOpenPickerActivatedEventArgs> for IFileOpenPickerActivatedEventArgs {
                fn from(value: FileOpenPickerActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&FileOpenPickerActivatedEventArgs> for IFileOpenPickerActivatedEventArgs {
                fn from(value: &FileOpenPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileOpenPickerActivatedEventArgs>
                for FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileOpenPickerActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IFileOpenPickerActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileOpenPickerActivatedEventArgs>
                for &'a FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileOpenPickerActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IFileOpenPickerActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<FileOpenPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: FileOpenPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileOpenPickerActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &FileOpenPickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for FileOpenPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a FileOpenPickerActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FileOpenPickerActivatedEventArgs> for IFileOpenPickerActivatedEventArgs2 {
                fn from(value: FileOpenPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileOpenPickerActivatedEventArgs>
                for IFileOpenPickerActivatedEventArgs2
            {
                fn from(value: &FileOpenPickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileOpenPickerActivatedEventArgs2>
                for FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileOpenPickerActivatedEventArgs2> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileOpenPickerActivatedEventArgs2,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IFileOpenPickerActivatedEventArgs2>
                for &'a FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IFileOpenPickerActivatedEventArgs2> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IFileOpenPickerActivatedEventArgs2,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FileOpenPickerActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: FileOpenPickerActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FileOpenPickerActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &FileOpenPickerActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a FileOpenPickerActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for FileOpenPickerActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for FileOpenPickerActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IProtocolForResultsActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IProtocolForResultsActivatedEventArgs {
                type Vtable = IProtocolForResultsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3880858306,
                    31463,
                    17687,
                    [128, 172, 219, 232, 215, 204, 91, 156],
                );
            }
            impl IProtocolForResultsActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IProtocolForResultsActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{e75132c2-7ae7-4517-80ac-dbe8d7cc5b9c}");
            }
            impl ::std::convert::From<IProtocolForResultsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IProtocolForResultsActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IProtocolForResultsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IProtocolForResultsActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IProtocolForResultsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IProtocolForResultsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IProtocolForResultsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IProtocolForResultsActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ProtocolForResultsActivatedEventArgs(::windows::IInspectable);
            impl ProtocolForResultsActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn CallerPackageFamilyName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = &::windows::Interface::cast::<
                        IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ProtocolForResultsActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ProtocolForResultsActivatedEventArgs;{e75132c2-7ae7-4517-80ac-dbe8d7cc5b9c})" ) ;
            }
            unsafe impl ::windows::Interface for ProtocolForResultsActivatedEventArgs {
                type Vtable = IProtocolForResultsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3880858306,
                    31463,
                    17687,
                    [128, 172, 219, 232, 215, 204, 91, 156],
                );
            }
            impl ::windows::RuntimeName for ProtocolForResultsActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ProtocolForResultsActivatedEventArgs";
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs>
                for IProtocolForResultsActivatedEventArgs
            {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs>
                for IProtocolForResultsActivatedEventArgs
            {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IProtocolForResultsActivatedEventArgs>
                for ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IProtocolForResultsActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IProtocolForResultsActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IProtocolForResultsActivatedEventArgs>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IProtocolForResultsActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IProtocolForResultsActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ProtocolForResultsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs>
                for IApplicationViewActivatedEventArgs
            {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs>
                for IApplicationViewActivatedEventArgs
            {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs> for IProtocolActivatedEventArgs {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs> for IProtocolActivatedEventArgs {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IProtocolActivatedEventArgs>
                for ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IProtocolActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IProtocolActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IProtocolActivatedEventArgs>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IProtocolActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IProtocolActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs>
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs>
                for IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
            {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > for ProtocolForResultsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for ProtocolForResultsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ProtocolForResultsActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: ProtocolForResultsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ProtocolForResultsActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &ProtocolForResultsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a ProtocolForResultsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ProtocolForResultsActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ProtocolForResultsActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WebAccountProviderActivatedEventArgs(::windows::IInspectable);
            impl WebAccountProviderActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WebAccountProviderActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.WebAccountProviderActivatedEventArgs;{72b71774-98ea-4ccf-9752-46d9051004f1})" ) ;
            }
            unsafe impl ::windows::Interface for WebAccountProviderActivatedEventArgs {
                type Vtable = IWebAccountProviderActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1924601716,
                    39146,
                    19663,
                    [151, 82, 70, 217, 5, 16, 4, 241],
                );
            }
            impl ::windows::RuntimeName for WebAccountProviderActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.WebAccountProviderActivatedEventArgs";
            }
            impl ::std::convert::From<WebAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: WebAccountProviderActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&WebAccountProviderActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &WebAccountProviderActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<WebAccountProviderActivatedEventArgs>
                for IWebAccountProviderActivatedEventArgs
            {
                fn from(value: WebAccountProviderActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&WebAccountProviderActivatedEventArgs>
                for IWebAccountProviderActivatedEventArgs
            {
                fn from(value: &WebAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IWebAccountProviderActivatedEventArgs>
                for WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IWebAccountProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IWebAccountProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IWebAccountProviderActivatedEventArgs>
                for &'a WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IWebAccountProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IWebAccountProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<WebAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: WebAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WebAccountProviderActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &WebAccountProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for WebAccountProviderActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<WebAccountProviderActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: WebAccountProviderActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WebAccountProviderActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &WebAccountProviderActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a WebAccountProviderActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for WebAccountProviderActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for WebAccountProviderActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IWebAuthenticationBrokerContinuationEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWebAuthenticationBrokerContinuationEventArgs {
                type Vtable = IWebAuthenticationBrokerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1977459668,
                    30484,
                    17725,
                    [183, 255, 185, 94, 58, 23, 9, 218],
                );
            }
            impl IWebAuthenticationBrokerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IWebAuthenticationBrokerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{75dda3d4-7714-453d-b7ff-b95e3a1709da}");
            }
            impl ::std::convert::From<IWebAuthenticationBrokerContinuationEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: IWebAuthenticationBrokerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IWebAuthenticationBrokerContinuationEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &IWebAuthenticationBrokerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IWebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IWebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IWebAuthenticationBrokerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: IWebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IWebAuthenticationBrokerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &IWebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IWebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IWebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IWebAuthenticationBrokerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: IWebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IWebAuthenticationBrokerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: &IWebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for IWebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a IWebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWebAuthenticationBrokerContinuationEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WebAuthenticationBrokerContinuationEventArgs(::windows::IInspectable);
            impl WebAuthenticationBrokerContinuationEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WebAuthenticationBrokerContinuationEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.WebAuthenticationBrokerContinuationEventArgs;{75dda3d4-7714-453d-b7ff-b95e3a1709da})" ) ;
            }
            unsafe impl ::windows::Interface for WebAuthenticationBrokerContinuationEventArgs {
                type Vtable = IWebAuthenticationBrokerContinuationEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1977459668,
                    30484,
                    17725,
                    [183, 255, 185, 94, 58, 23, 9, 218],
                );
            }
            impl ::windows::RuntimeName for WebAuthenticationBrokerContinuationEventArgs {
                const NAME : & 'static str ="Windows.ApplicationModel.Activation.WebAuthenticationBrokerContinuationEventArgs" ;
            }
            impl ::std::convert::From<WebAuthenticationBrokerContinuationEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&WebAuthenticationBrokerContinuationEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<WebAuthenticationBrokerContinuationEventArgs>
                for IWebAuthenticationBrokerContinuationEventArgs
            {
                fn from(value: WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&WebAuthenticationBrokerContinuationEventArgs>
                for IWebAuthenticationBrokerContinuationEventArgs
            {
                fn from(value: &WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IWebAuthenticationBrokerContinuationEventArgs>
                for WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IWebAuthenticationBrokerContinuationEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IWebAuthenticationBrokerContinuationEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IWebAuthenticationBrokerContinuationEventArgs>
                for &'a WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IWebAuthenticationBrokerContinuationEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IWebAuthenticationBrokerContinuationEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<WebAuthenticationBrokerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WebAuthenticationBrokerContinuationEventArgs> for IActivatedEventArgs {
                fn from(value: &WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<WebAuthenticationBrokerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WebAuthenticationBrokerContinuationEventArgs>
                for IContinuationActivatedEventArgs
            {
                fn from(value: &WebAuthenticationBrokerContinuationEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IContinuationActivatedEventArgs>
                for &'a WebAuthenticationBrokerContinuationEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IContinuationActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IContinuationActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for WebAuthenticationBrokerContinuationEventArgs {}
            unsafe impl ::std::marker::Sync for WebAuthenticationBrokerContinuationEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct AppointmentsProviderAddAppointmentActivatedEventArgs(
                ::windows::IInspectable,
            );
            impl AppointmentsProviderAddAppointmentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for AppointmentsProviderAddAppointmentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.AppointmentsProviderAddAppointmentActivatedEventArgs;{a2861367-cee5-4e4d-9ed7-41c34ec18b02})" ) ;
            }
            unsafe impl ::windows::Interface for AppointmentsProviderAddAppointmentActivatedEventArgs {
                type Vtable = IAppointmentsProviderAddAppointmentActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2726695783,
                    52965,
                    20045,
                    [158, 215, 65, 195, 78, 193, 139, 2],
                );
            }
            impl ::windows::RuntimeName for AppointmentsProviderAddAppointmentActivatedEventArgs {
                const NAME : & 'static str ="Windows.ApplicationModel.Activation.AppointmentsProviderAddAppointmentActivatedEventArgs" ;
            }
            impl ::std::convert::From<AppointmentsProviderAddAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&AppointmentsProviderAddAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn from(value: AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IAppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderAddAppointmentActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderAddAppointmentActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderAddAppointmentActivatedEventArgs>
                for &'a AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderAddAppointmentActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderAddAppointmentActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderAddAppointmentActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: &AppointmentsProviderAddAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a AppointmentsProviderAddAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for AppointmentsProviderAddAppointmentActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for AppointmentsProviderAddAppointmentActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs(
                ::windows::IInspectable,
            );
            unsafe impl ::windows::Interface for IAppointmentsProviderRemoveAppointmentActivatedEventArgs {
                type Vtable = IAppointmentsProviderRemoveAppointmentActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1964980920,
                    2958,
                    17692,
                    [159, 21, 150, 110, 105, 155, 172, 37],
                );
            }
            impl IAppointmentsProviderRemoveAppointmentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IAppointmentsProviderRemoveAppointmentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{751f3ab8-0b8e-451c-9f15-966e699bac25}");
            }
            impl ::std::convert::From<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: IAppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &IAppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: IAppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &IAppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct AppointmentsProviderRemoveAppointmentActivatedEventArgs(
                ::windows::IInspectable,
            );
            impl AppointmentsProviderRemoveAppointmentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for AppointmentsProviderRemoveAppointmentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.AppointmentsProviderRemoveAppointmentActivatedEventArgs;{751f3ab8-0b8e-451c-9f15-966e699bac25})" ) ;
            }
            unsafe impl ::windows::Interface for AppointmentsProviderRemoveAppointmentActivatedEventArgs {
                type Vtable = IAppointmentsProviderRemoveAppointmentActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1964980920,
                    2958,
                    17692,
                    [159, 21, 150, 110, 105, 155, 172, 37],
                );
            }
            impl ::windows::RuntimeName for AppointmentsProviderRemoveAppointmentActivatedEventArgs {
                const NAME : & 'static str ="Windows.ApplicationModel.Activation.AppointmentsProviderRemoveAppointmentActivatedEventArgs" ;
            }
            impl ::std::convert::From<AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn from(value: AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IAppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderRemoveAppointmentActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for &'a AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderRemoveAppointmentActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderRemoveAppointmentActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: &AppointmentsProviderRemoveAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a AppointmentsProviderRemoveAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for AppointmentsProviderRemoveAppointmentActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for AppointmentsProviderRemoveAppointmentActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IDialReceiverActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDialReceiverActivatedEventArgs {
                type Vtable = IDialReceiverActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4218912471,
                    34286,
                    17774,
                    [164, 77, 133, 215, 48, 231, 10, 237],
                );
            }
            impl IDialReceiverActivatedEventArgs {
                pub fn AppName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IDialReceiverActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{fb777ed7-85ee-456e-a44d-85d730e70aed}");
            }
            impl ::std::convert::From<IDialReceiverActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IDialReceiverActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IDialReceiverActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IDialReceiverActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IDialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IDialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IDialReceiverActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IDialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDialReceiverActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IDialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IDialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IDialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<IDialReceiverActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: IDialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IDialReceiverActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: &IDialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for IDialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs>
                for &'a IDialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDialReceiverActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ToastNotificationActivatedEventArgs(::windows::IInspectable);
            impl ToastNotificationActivatedEventArgs {
                pub fn Argument(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ToastNotificationActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.ToastNotificationActivatedEventArgs;{92a86f82-5290-431d-be85-c4aaeeb8685f})" ) ;
            }
            unsafe impl ::windows::Interface for ToastNotificationActivatedEventArgs {
                type Vtable = IToastNotificationActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2460512130,
                    21136,
                    17181,
                    [190, 133, 196, 170, 238, 184, 104, 95],
                );
            }
            impl ::windows::RuntimeName for ToastNotificationActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.ToastNotificationActivatedEventArgs";
            }
            impl ::std::convert::From<ToastNotificationActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ToastNotificationActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ToastNotificationActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ToastNotificationActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ToastNotificationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ToastNotificationActivatedEventArgs>
                for IToastNotificationActivatedEventArgs
            {
                fn from(value: ToastNotificationActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&ToastNotificationActivatedEventArgs>
                for IToastNotificationActivatedEventArgs
            {
                fn from(value: &ToastNotificationActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IToastNotificationActivatedEventArgs>
                for ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IToastNotificationActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IToastNotificationActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IToastNotificationActivatedEventArgs>
                for &'a ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IToastNotificationActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IToastNotificationActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ToastNotificationActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ToastNotificationActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ToastNotificationActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ToastNotificationActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ToastNotificationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ToastNotificationActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ToastNotificationActivatedEventArgs>
                for IApplicationViewActivatedEventArgs
            {
                fn from(value: ToastNotificationActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ToastNotificationActivatedEventArgs>
                for IApplicationViewActivatedEventArgs
            {
                fn from(value: &ToastNotificationActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ToastNotificationActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: ToastNotificationActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ToastNotificationActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &ToastNotificationActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a ToastNotificationActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for ToastNotificationActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for ToastNotificationActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ICommandLineActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICommandLineActivatedEventArgs {
                type Vtable = ICommandLineActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1158039340,
                    106,
                    18667,
                    [138, 251, 208, 122, 178, 94, 51, 102],
                );
            }
            impl ICommandLineActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Operation(&self) -> ::windows::Result<CommandLineActivationOperation> {
                    let this = self;
                    unsafe {
                        let mut result__: <CommandLineActivationOperation as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CommandLineActivationOperation>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ICommandLineActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{4506472c-006a-48eb-8afb-d07ab25e3366}");
            }
            impl ::std::convert::From<ICommandLineActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: ICommandLineActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ICommandLineActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &ICommandLineActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ICommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ICommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ICommandLineActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: ICommandLineActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ICommandLineActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &ICommandLineActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ICommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ICommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICommandLineActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IRestrictedLaunchActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IRestrictedLaunchActivatedEventArgs {
                type Vtable = IRestrictedLaunchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3770133633,
                    49091,
                    17220,
                    [165, 218, 25, 253, 90, 39, 186, 174],
                );
            }
            impl IRestrictedLaunchActivatedEventArgs {
                pub fn SharedContext(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IRestrictedLaunchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{e0b7ac81-bfc3-4344-a5da-19fd5a27baae}");
            }
            impl ::std::convert::From<IRestrictedLaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IRestrictedLaunchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IRestrictedLaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IRestrictedLaunchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IRestrictedLaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a IRestrictedLaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IRestrictedLaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IRestrictedLaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IRestrictedLaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IRestrictedLaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IRestrictedLaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IRestrictedLaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRestrictedLaunchActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct AppointmentsProviderReplaceAppointmentActivatedEventArgs(
                ::windows::IInspectable,
            );
            impl AppointmentsProviderReplaceAppointmentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IAppointmentsProviderActivatedEventArgs>(
                            self,
                        )
                        .unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for AppointmentsProviderReplaceAppointmentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.AppointmentsProviderReplaceAppointmentActivatedEventArgs;{1551b7d4-a981-4067-8a62-0524e4ade121})" ) ;
            }
            unsafe impl ::windows::Interface for AppointmentsProviderReplaceAppointmentActivatedEventArgs {
                type Vtable = IAppointmentsProviderReplaceAppointmentActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    357677012,
                    43393,
                    16487,
                    [138, 98, 5, 36, 228, 173, 225, 33],
                );
            }
            impl ::windows::RuntimeName for AppointmentsProviderReplaceAppointmentActivatedEventArgs {
                const NAME : & 'static str ="Windows.ApplicationModel.Activation.AppointmentsProviderReplaceAppointmentActivatedEventArgs" ;
            }
            impl ::std::convert::From<AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for ::windows::IInspectable
            {
                fn from(value: &AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn from(value: AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IAppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderReplaceAppointmentActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for &'a AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderReplaceAppointmentActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IAppointmentsProviderActivatedEventArgs
            {
                fn from(value: &AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IAppointmentsProviderActivatedEventArgs>
                for &'a AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, IAppointmentsProviderActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IAppointmentsProviderActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&AppointmentsProviderReplaceAppointmentActivatedEventArgs>
                for IActivatedEventArgsWithUser
            {
                fn from(value: &AppointmentsProviderReplaceAppointmentActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a AppointmentsProviderReplaceAppointmentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for AppointmentsProviderReplaceAppointmentActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for AppointmentsProviderReplaceAppointmentActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IPrelaunchActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPrelaunchActivatedEventArgs {
                type Vtable = IPrelaunchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    205812091,
                    6647,
                    18646,
                    [176, 70, 207, 34, 130, 110, 170, 116],
                );
            }
            impl IPrelaunchActivatedEventArgs {
                pub fn PrelaunchActivated(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IPrelaunchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{0c44717b-19f7-48d6-b046-cf22826eaa74}");
            }
            impl ::std::convert::From<IPrelaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IPrelaunchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IPrelaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IPrelaunchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IPrelaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IPrelaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IPrelaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IPrelaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IPrelaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IPrelaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IPrelaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IPrelaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPrelaunchActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ILaunchActivatedEventArgs2(::windows::IInspectable);
            unsafe impl ::windows::Interface for ILaunchActivatedEventArgs2 {
                type Vtable = ILaunchActivatedEventArgs2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    265518780,
                    40393,
                    18101,
                    [154, 206, 189, 149, 212, 86, 83, 69],
                );
            }
            impl ILaunchActivatedEventArgs2 {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileActivatedInfo(&self) -> ::windows::Result<TileActivatedInfo> {
                    let this = self;
                    unsafe {
                        let mut result__: <TileActivatedInfo as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<TileActivatedInfo>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ILaunchActivatedEventArgs2 {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{0fd37ebc-9dc9-46b5-9ace-bd95d4565345}");
            }
            impl ::std::convert::From<ILaunchActivatedEventArgs2> for ::windows::IInspectable {
                fn from(value: ILaunchActivatedEventArgs2) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ILaunchActivatedEventArgs2> for ::windows::IInspectable {
                fn from(value: &ILaunchActivatedEventArgs2) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ILaunchActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ILaunchActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ILaunchActivatedEventArgs2> for IActivatedEventArgs {
                fn from(value: ILaunchActivatedEventArgs2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILaunchActivatedEventArgs2> for IActivatedEventArgs {
                fn from(value: &ILaunchActivatedEventArgs2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for ILaunchActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a ILaunchActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ILaunchActivatedEventArgs2> for ILaunchActivatedEventArgs {
                fn from(value: ILaunchActivatedEventArgs2) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ILaunchActivatedEventArgs2> for ILaunchActivatedEventArgs {
                fn from(value: &ILaunchActivatedEventArgs2) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for ILaunchActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for &'a ILaunchActivatedEventArgs2 {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ILaunchActivatedEventArgs2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct LaunchActivatedEventArgs(::windows::IInspectable);
            impl LaunchActivatedEventArgs {
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn PrelaunchActivated(&self) -> ::windows::Result<bool> {
                    let this =
                        &::windows::Interface::cast::<IPrelaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn TileActivatedInfo(&self) -> ::windows::Result<TileActivatedInfo> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs2>(self).unwrap();
                    unsafe {
                        let mut result__: <TileActivatedInfo as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<TileActivatedInfo>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for LaunchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs;{fbc93e26-a14a-4b4f-82b0-33bed920af52})" ) ;
            }
            unsafe impl ::windows::Interface for LaunchActivatedEventArgs {
                type Vtable = ILaunchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4224269862,
                    41290,
                    19279,
                    [130, 176, 51, 190, 217, 32, 175, 82],
                );
            }
            impl ::windows::RuntimeName for LaunchActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.LaunchActivatedEventArgs";
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a LaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for IPrelaunchActivatedEventArgs {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for IPrelaunchActivatedEventArgs {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPrelaunchActivatedEventArgs> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IPrelaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IPrelaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPrelaunchActivatedEventArgs> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IPrelaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IPrelaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<LaunchActivatedEventArgs> for ILaunchActivatedEventArgs2 {
                fn from(value: LaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&LaunchActivatedEventArgs> for ILaunchActivatedEventArgs2 {
                fn from(value: &LaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs2> for LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs2> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs2>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs2> for &'a LaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs2> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs2>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for LaunchActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for LaunchActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IStartupTaskActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStartupTaskActivatedEventArgs {
                type Vtable = IStartupTaskActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    61938264,
                    21110,
                    19857,
                    [134, 33, 84, 97, 24, 100, 213, 250],
                );
            }
            impl IStartupTaskActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn TaskId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IStartupTaskActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{03b11a58-5276-4d91-8621-54611864d5fa}");
            }
            impl ::std::convert::From<IStartupTaskActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: IStartupTaskActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IStartupTaskActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &IStartupTaskActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IStartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IStartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<IStartupTaskActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: IStartupTaskActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&IStartupTaskActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &IStartupTaskActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for IStartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a IStartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStartupTaskActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct RestrictedLaunchActivatedEventArgs(::windows::IInspectable);
            impl RestrictedLaunchActivatedEventArgs {
                pub fn SharedContext(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for RestrictedLaunchActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.RestrictedLaunchActivatedEventArgs;{e0b7ac81-bfc3-4344-a5da-19fd5a27baae})" ) ;
            }
            unsafe impl ::windows::Interface for RestrictedLaunchActivatedEventArgs {
                type Vtable = IRestrictedLaunchActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3770133633,
                    49091,
                    17220,
                    [165, 218, 25, 253, 90, 39, 186, 174],
                );
            }
            impl ::windows::RuntimeName for RestrictedLaunchActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.RestrictedLaunchActivatedEventArgs";
            }
            impl ::std::convert::From<RestrictedLaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: RestrictedLaunchActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&RestrictedLaunchActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &RestrictedLaunchActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for RestrictedLaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a RestrictedLaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<RestrictedLaunchActivatedEventArgs>
                for IRestrictedLaunchActivatedEventArgs
            {
                fn from(value: RestrictedLaunchActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&RestrictedLaunchActivatedEventArgs>
                for IRestrictedLaunchActivatedEventArgs
            {
                fn from(value: &RestrictedLaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IRestrictedLaunchActivatedEventArgs>
                for RestrictedLaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IRestrictedLaunchActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IRestrictedLaunchActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IRestrictedLaunchActivatedEventArgs>
                for &'a RestrictedLaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IRestrictedLaunchActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IRestrictedLaunchActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<RestrictedLaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: RestrictedLaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&RestrictedLaunchActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &RestrictedLaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for RestrictedLaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a RestrictedLaunchActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<RestrictedLaunchActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: RestrictedLaunchActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&RestrictedLaunchActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &RestrictedLaunchActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for RestrictedLaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a RestrictedLaunchActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for RestrictedLaunchActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for RestrictedLaunchActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BackgroundActivatedEventArgs(::windows::IInspectable);
            impl BackgroundActivatedEventArgs {}
            unsafe impl ::windows::RuntimeType for BackgroundActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs;{ab14bee0-e760-440e-a91c-44796de3a92d})" ) ;
            }
            unsafe impl ::windows::Interface for BackgroundActivatedEventArgs {
                type Vtable = IBackgroundActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2870263520,
                    59232,
                    17422,
                    [169, 28, 68, 121, 109, 227, 169, 45],
                );
            }
            impl ::windows::RuntimeName for BackgroundActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs";
            }
            impl ::std::convert::From<BackgroundActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: BackgroundActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BackgroundActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &BackgroundActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for BackgroundActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a BackgroundActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<BackgroundActivatedEventArgs> for IBackgroundActivatedEventArgs {
                fn from(value: BackgroundActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&BackgroundActivatedEventArgs> for IBackgroundActivatedEventArgs {
                fn from(value: &BackgroundActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IBackgroundActivatedEventArgs> for BackgroundActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IBackgroundActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IBackgroundActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IBackgroundActivatedEventArgs>
                for &'a BackgroundActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IBackgroundActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IBackgroundActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for BackgroundActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for BackgroundActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CachedFileUpdaterActivatedEventArgs(::windows::IInspectable);
            impl CachedFileUpdaterActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for CachedFileUpdaterActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs;{d06eb1c7-3805-4ecb-b757-6cf15e26fef3})" ) ;
            }
            unsafe impl ::windows::Interface for CachedFileUpdaterActivatedEventArgs {
                type Vtable = ICachedFileUpdaterActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3496915399,
                    14341,
                    20171,
                    [183, 87, 108, 241, 94, 38, 254, 243],
                );
            }
            impl ::windows::RuntimeName for CachedFileUpdaterActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs";
            }
            impl ::std::convert::From<CachedFileUpdaterActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: CachedFileUpdaterActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&CachedFileUpdaterActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &CachedFileUpdaterActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for CachedFileUpdaterActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a CachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<CachedFileUpdaterActivatedEventArgs>
                for ICachedFileUpdaterActivatedEventArgs
            {
                fn from(value: CachedFileUpdaterActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&CachedFileUpdaterActivatedEventArgs>
                for ICachedFileUpdaterActivatedEventArgs
            {
                fn from(value: &CachedFileUpdaterActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICachedFileUpdaterActivatedEventArgs>
                for CachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ICachedFileUpdaterActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        ICachedFileUpdaterActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICachedFileUpdaterActivatedEventArgs>
                for &'a CachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ICachedFileUpdaterActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        ICachedFileUpdaterActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<CachedFileUpdaterActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: CachedFileUpdaterActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&CachedFileUpdaterActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &CachedFileUpdaterActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for CachedFileUpdaterActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a CachedFileUpdaterActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<CachedFileUpdaterActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: CachedFileUpdaterActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&CachedFileUpdaterActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &CachedFileUpdaterActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for CachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a CachedFileUpdaterActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for CachedFileUpdaterActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for CachedFileUpdaterActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CommandLineActivatedEventArgs(::windows::IInspectable);
            impl CommandLineActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn Operation(&self) -> ::windows::Result<CommandLineActivationOperation> {
                    let this = self;
                    unsafe {
                        let mut result__: <CommandLineActivationOperation as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CommandLineActivationOperation>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for CommandLineActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.CommandLineActivatedEventArgs;{4506472c-006a-48eb-8afb-d07ab25e3366})" ) ;
            }
            unsafe impl ::windows::Interface for CommandLineActivatedEventArgs {
                type Vtable = ICommandLineActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1158039340,
                    106,
                    18667,
                    [138, 251, 208, 122, 178, 94, 51, 102],
                );
            }
            impl ::windows::RuntimeName for CommandLineActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.CommandLineActivatedEventArgs";
            }
            impl ::std::convert::From<CommandLineActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: CommandLineActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&CommandLineActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &CommandLineActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for CommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a CommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<CommandLineActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: CommandLineActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&CommandLineActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &CommandLineActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for CommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a CommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<CommandLineActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: CommandLineActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&CommandLineActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &CommandLineActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for CommandLineActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a CommandLineActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<CommandLineActivatedEventArgs> for ICommandLineActivatedEventArgs {
                fn from(value: CommandLineActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&CommandLineActivatedEventArgs> for ICommandLineActivatedEventArgs {
                fn from(value: &CommandLineActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICommandLineActivatedEventArgs>
                for CommandLineActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ICommandLineActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ICommandLineActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICommandLineActivatedEventArgs>
                for &'a CommandLineActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ICommandLineActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ICommandLineActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for CommandLineActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for CommandLineActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DeviceActivatedEventArgs(::windows::IInspectable);
            impl DeviceActivatedEventArgs {
                pub fn DeviceInformationId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Verb(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DeviceActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.DeviceActivatedEventArgs;{cd50b9a9-ce10-44d2-8234-c355a073ef33})" ) ;
            }
            unsafe impl ::windows::Interface for DeviceActivatedEventArgs {
                type Vtable = IDeviceActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3444619689,
                    52752,
                    17618,
                    [130, 52, 195, 85, 160, 115, 239, 51],
                );
            }
            impl ::windows::RuntimeName for DeviceActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.DeviceActivatedEventArgs";
            }
            impl ::std::convert::From<DeviceActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: DeviceActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DeviceActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &DeviceActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DeviceActivatedEventArgs> for IDeviceActivatedEventArgs {
                fn from(value: DeviceActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DeviceActivatedEventArgs> for IDeviceActivatedEventArgs {
                fn from(value: &DeviceActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IDeviceActivatedEventArgs> for DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IDeviceActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IDeviceActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IDeviceActivatedEventArgs> for &'a DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IDeviceActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IDeviceActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DeviceActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: DeviceActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DeviceActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &DeviceActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DeviceActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: DeviceActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DeviceActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: &DeviceActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs> for DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a DeviceActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DeviceActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: DeviceActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DeviceActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &DeviceActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DeviceActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: DeviceActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DeviceActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &DeviceActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for &'a DeviceActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for DeviceActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for DeviceActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DialReceiverActivatedEventArgs(::windows::IInspectable);
            impl DialReceiverActivatedEventArgs {
                pub fn AppName(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn CurrentlyShownApplicationViewId(&self) -> ::windows::Result<i32> {
                    let this =
                        &::windows::Interface::cast::<IApplicationViewActivatedEventArgs>(self)
                            .unwrap();
                    unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    }
                }
                pub fn Arguments(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn TileId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<ILaunchActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DialReceiverActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.DialReceiverActivatedEventArgs;{fb777ed7-85ee-456e-a44d-85d730e70aed})" ) ;
            }
            unsafe impl ::windows::Interface for DialReceiverActivatedEventArgs {
                type Vtable = IDialReceiverActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4218912471,
                    34286,
                    17774,
                    [164, 77, 133, 215, 48, 231, 10, 237],
                );
            }
            impl ::windows::RuntimeName for DialReceiverActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.DialReceiverActivatedEventArgs";
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for IDialReceiverActivatedEventArgs {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for IDialReceiverActivatedEventArgs {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IDialReceiverActivatedEventArgs>
                for DialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IDialReceiverActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IDialReceiverActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IDialReceiverActivatedEventArgs>
                for &'a DialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IDialReceiverActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IDialReceiverActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for IApplicationViewActivatedEventArgs {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for DialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IApplicationViewActivatedEventArgs>
                for &'a DialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IApplicationViewActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IApplicationViewActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for ILaunchActivatedEventArgs {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs> for DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, ILaunchActivatedEventArgs>
                for &'a DialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ILaunchActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<ILaunchActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for IViewSwitcherProvider {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IViewSwitcherProvider> for &'a DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IViewSwitcherProvider> {
                    ::windows::Param::Owned(::std::convert::Into::<IViewSwitcherProvider>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DialReceiverActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: DialReceiverActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DialReceiverActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &DialReceiverActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for DialReceiverActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a DialReceiverActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for DialReceiverActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for DialReceiverActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct PrintTaskSettingsActivatedEventArgs(::windows::IInspectable);
            impl PrintTaskSettingsActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for PrintTaskSettingsActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.PrintTaskSettingsActivatedEventArgs;{ee30a0c9-ce56-4865-ba8e-8954ac271107})" ) ;
            }
            unsafe impl ::windows::Interface for PrintTaskSettingsActivatedEventArgs {
                type Vtable = IPrintTaskSettingsActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3996164297,
                    52822,
                    18533,
                    [186, 142, 137, 84, 172, 39, 17, 7],
                );
            }
            impl ::windows::RuntimeName for PrintTaskSettingsActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.PrintTaskSettingsActivatedEventArgs";
            }
            impl ::std::convert::From<PrintTaskSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: PrintTaskSettingsActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&PrintTaskSettingsActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &PrintTaskSettingsActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for PrintTaskSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a PrintTaskSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<PrintTaskSettingsActivatedEventArgs>
                for IPrintTaskSettingsActivatedEventArgs
            {
                fn from(value: PrintTaskSettingsActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&PrintTaskSettingsActivatedEventArgs>
                for IPrintTaskSettingsActivatedEventArgs
            {
                fn from(value: &PrintTaskSettingsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPrintTaskSettingsActivatedEventArgs>
                for PrintTaskSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IPrintTaskSettingsActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IPrintTaskSettingsActivatedEventArgs,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IPrintTaskSettingsActivatedEventArgs>
                for &'a PrintTaskSettingsActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IPrintTaskSettingsActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        IPrintTaskSettingsActivatedEventArgs,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<PrintTaskSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: PrintTaskSettingsActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&PrintTaskSettingsActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &PrintTaskSettingsActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for PrintTaskSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a PrintTaskSettingsActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for PrintTaskSettingsActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for PrintTaskSettingsActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct LockScreenComponentActivatedEventArgs(::windows::IInspectable);
            impl LockScreenComponentActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = self;
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = self;
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = self;
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for LockScreenComponentActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.LockScreenComponentActivatedEventArgs;{cf651713-cd08-4fd8-b697-a281b6544e2e})" ) ;
            }
            unsafe impl ::windows::Interface for LockScreenComponentActivatedEventArgs {
                type Vtable = IActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3479508755,
                    52488,
                    20440,
                    [182, 151, 162, 129, 182, 84, 78, 46],
                );
            }
            impl ::windows::RuntimeName for LockScreenComponentActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.LockScreenComponentActivatedEventArgs";
            }
            impl ::std::convert::From<LockScreenComponentActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: LockScreenComponentActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&LockScreenComponentActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &LockScreenComponentActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for LockScreenComponentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a LockScreenComponentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<LockScreenComponentActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: LockScreenComponentActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&LockScreenComponentActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &LockScreenComponentActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for LockScreenComponentActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs>
                for &'a LockScreenComponentActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for LockScreenComponentActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for LockScreenComponentActivatedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct StartupTaskActivatedEventArgs(::windows::IInspectable);
            impl StartupTaskActivatedEventArgs {
                pub fn Kind(&self) -> ::windows::Result<ActivationKind> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ActivationKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ActivationKind>(result__)
                    }
                }
                pub fn PreviousExecutionState(
                    &self,
                ) -> ::windows::Result<ApplicationExecutionState> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationExecutionState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationExecutionState>(result__)
                    }
                }
                pub fn SplashScreen(&self) -> ::windows::Result<SplashScreen> {
                    let this = &::windows::Interface::cast::<IActivatedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <SplashScreen as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SplashScreen>(result__)
                    }
                }
                pub fn TaskId(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for StartupTaskActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.ApplicationModel.Activation.StartupTaskActivatedEventArgs;{03b11a58-5276-4d91-8621-54611864d5fa})" ) ;
            }
            unsafe impl ::windows::Interface for StartupTaskActivatedEventArgs {
                type Vtable = IStartupTaskActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    61938264,
                    21110,
                    19857,
                    [134, 33, 84, 97, 24, 100, 213, 250],
                );
            }
            impl ::windows::RuntimeName for StartupTaskActivatedEventArgs {
                const NAME: &'static str =
                    "Windows.ApplicationModel.Activation.StartupTaskActivatedEventArgs";
            }
            impl ::std::convert::From<StartupTaskActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: StartupTaskActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StartupTaskActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &StartupTaskActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for StartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a StartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<StartupTaskActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: StartupTaskActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StartupTaskActivatedEventArgs> for IActivatedEventArgs {
                fn from(value: &StartupTaskActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for StartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgs> for &'a StartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<IActivatedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StartupTaskActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: StartupTaskActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&StartupTaskActivatedEventArgs> for IActivatedEventArgsWithUser {
                fn from(value: &StartupTaskActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser> for StartupTaskActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IActivatedEventArgsWithUser>
                for &'a StartupTaskActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IActivatedEventArgsWithUser> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IActivatedEventArgsWithUser>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl ::std::convert::From<StartupTaskActivatedEventArgs> for IStartupTaskActivatedEventArgs {
                fn from(value: StartupTaskActivatedEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&StartupTaskActivatedEventArgs> for IStartupTaskActivatedEventArgs {
                fn from(value: &StartupTaskActivatedEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IStartupTaskActivatedEventArgs>
                for StartupTaskActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IStartupTaskActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStartupTaskActivatedEventArgs>::into(self),
                    )
                }
            }
            impl<'a> ::windows::IntoParam<'a, IStartupTaskActivatedEventArgs>
                for &'a StartupTaskActivatedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, IStartupTaskActivatedEventArgs> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IStartupTaskActivatedEventArgs>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            unsafe impl ::std::marker::Send for StartupTaskActivatedEventArgs {}
            unsafe impl ::std::marker::Sync for StartupTaskActivatedEventArgs {}
        }
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod Core {
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFrameworkView(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkView {
                type Vtable = IFrameworkView_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4205534416,
                    35108,
                    17836,
                    [173, 15, 160, 143, 174, 93, 3, 36],
                );
            }
            impl IFrameworkView {
                pub fn Load<'a>(
                    &self,
                    entrypoint: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            entrypoint.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Run(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Uninitialize(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFrameworkView {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{faab5cd0-8924-45ac-ad0f-a08fae5d0324}");
            }
            impl ::std::convert::From<IFrameworkView> for ::windows::IInspectable {
                fn from(value: IFrameworkView) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFrameworkView> for ::windows::IInspectable {
                fn from(value: &IFrameworkView) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFrameworkView {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IFrameworkView {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkView_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    entrypoint: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IFrameworkViewSource(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkViewSource {
                type Vtable = IFrameworkViewSource_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3447129620,
                    26052,
                    17004,
                    [148, 148, 52, 252, 67, 85, 72, 98],
                );
            }
            impl IFrameworkViewSource {
                pub fn CreateView(&self) -> ::windows::Result<IFrameworkView> {
                    let this = self;
                    unsafe {
                        let mut result__: <IFrameworkView as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IFrameworkView>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IFrameworkViewSource {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{cd770614-65c4-426c-9494-34fc43554862}");
            }
            impl ::std::convert::From<IFrameworkViewSource> for ::windows::IInspectable {
                fn from(value: IFrameworkViewSource) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IFrameworkViewSource> for ::windows::IInspectable {
                fn from(value: &IFrameworkViewSource) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IFrameworkViewSource {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IFrameworkViewSource {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkViewSource_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
        }
    }
    #[allow(
        unused_variables,
        non_upper_case_globals,
        non_snake_case,
        unused_unsafe,
        non_camel_case_types,
        dead_code,
        clippy::all
    )]
    pub mod Foundation {
        #[repr(C)]
        #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
        pub struct EventRegistrationToken {
            pub Value: i64,
        }
        impl EventRegistrationToken {}
        impl ::std::default::Default for EventRegistrationToken {
            fn default() -> Self {
                Self { Value: 0 }
            }
        }
        impl ::std::fmt::Debug for EventRegistrationToken {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("EventRegistrationToken")
                    .field("Value", &format_args!("{:?}", self.Value))
                    .finish()
            }
        }
        impl ::std::cmp::PartialEq for EventRegistrationToken {
            fn eq(&self, other: &Self) -> bool {
                self.Value == other.Value
            }
        }
        impl ::std::cmp::Eq for EventRegistrationToken {}
        unsafe impl ::windows::Abi for EventRegistrationToken {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for EventRegistrationToken {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                b"struct(Windows.Foundation.EventRegistrationToken;i8)",
            );
        }
        #[repr(C)]
        #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
        pub struct TimeSpan {
            pub Duration: i64,
        }
        impl TimeSpan {}
        impl ::std::default::Default for TimeSpan {
            fn default() -> Self {
                Self { Duration: 0 }
            }
        }
        impl ::std::fmt::Debug for TimeSpan {
            fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                fmt.debug_struct("TimeSpan")
                    .field("Duration", &format_args!("{:?}", self.Duration))
                    .finish()
            }
        }
        impl ::std::cmp::PartialEq for TimeSpan {
            fn eq(&self, other: &Self) -> bool {
                self.Duration == other.Duration
            }
        }
        impl ::std::cmp::Eq for TimeSpan {}
        unsafe impl ::windows::Abi for TimeSpan {
            type Abi = Self;
        }
        unsafe impl ::windows::RuntimeType for TimeSpan {
            type DefaultType = Self;
            const SIGNATURE: ::windows::ConstBuffer =
                ::windows::ConstBuffer::from_slice(b"struct(Windows.Foundation.TimeSpan;i8)");
        }
        impl ::std::convert::From<::std::time::Duration> for TimeSpan {
            fn from(value: ::std::time::Duration) -> Self {
                Self {
                    Duration: (value.as_nanos() / 100) as i64,
                }
            }
        }
        impl ::std::convert::From<TimeSpan> for ::std::time::Duration {
            fn from(value: TimeSpan) -> Self {
                ::std::time::Duration::from_nanos((value.Duration * 100) as u64)
            }
        }
        impl<'a> ::windows::IntoParam<'a, TimeSpan> for ::std::time::Duration {
            fn into_param(self) -> ::windows::Param<'a, TimeSpan> {
                ::windows::Param::Owned(self.into())
            }
        }
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod Collections {
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IIterator<T>(::windows::IInspectable, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IIterator<T> {
                type Vtable = IIterator_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IIterator<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: ::windows::RuntimeType + 'static> IIterator<T> {
                pub fn Current(&self) -> ::windows::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn HasCurrent(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn MoveNext(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn GetMany(
                    &self,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IIterator<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{6a79e863-4300-459a-9966-cbb660963ee1}")
                        .push_slice(b";")
                        .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IIterator<T>>
                for ::windows::IInspectable
            {
                fn from(value: IIterator<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IIterator<T>>
                for ::windows::IInspectable
            {
                fn from(value: &IIterator<T>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IIterator<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IIterator<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::Iterator for IIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    let result = self.Current().ok();
                    if result.is_some() {
                        self.MoveNext().ok()?;
                    }
                    result
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IIterator_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    items_array_size: u32,
                    items: *mut <T as ::windows::Abi>::Abi,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IIterable<T>(::windows::IInspectable, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IIterable<T> {
                type Vtable = IIterable_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IIterable<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: ::windows::RuntimeType + 'static> IIterable<T> {
                pub fn First(&self) -> ::windows::Result<IIterator<T>> {
                    let this = self;
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IIterable<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{faa585ea-6214-4217-afda-7f46de5869b3}")
                        .push_slice(b";")
                        .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IIterable<T>>
                for ::windows::IInspectable
            {
                fn from(value: IIterable<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IIterable<T>>
                for ::windows::IInspectable
            {
                fn from(value: &IIterable<T>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IIterable<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IIterable<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::IntoIterator for IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType> ::std::iter::IntoIterator for &'a IIterable<T> {
                type Item = T;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IIterable_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IVectorView<T>(::windows::IInspectable, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IVectorView<T> {
                type Vtable = IVectorView_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IVectorView<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: ::windows::RuntimeType + 'static> IVectorView<T> {
                pub fn GetAt(&self, index: u32) -> ::windows::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, T>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn First(&self) -> ::windows::Result<IIterator<T>> {
                    let this = &::windows::Interface::cast::<IIterable<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IVectorView<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{bbe1fa4c-b0e3-4583-baef-1f1b2e483e56}")
                        .push_slice(b";")
                        .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVectorView<T>>
                for ::windows::IInspectable
            {
                fn from(value: IVectorView<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVectorView<T>>
                for ::windows::IInspectable
            {
                fn from(value: &IVectorView<T>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IVectorView<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IVectorView<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVectorView<T>> for IIterable<T> {
                fn from(value: IVectorView<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVectorView<T>> for IIterable<T> {
                fn from(value: &IVectorView<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IIterable<T>>
                for IVectorView<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IIterable<T>>
                for &'a IVectorView<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            pub struct VectorViewIterator<T: ::windows::RuntimeType + 'static> {
                vector: IVectorView<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::windows::RuntimeType> VectorViewIterator<T> {
                pub fn new(vector: IVectorView<T>) -> Self {
                    let size = vector.Size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::Iterator for VectorViewIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.GetAt(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::IntoIterator for IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(self)
                }
            }
            impl<'a, T: ::windows::RuntimeType> ::std::iter::IntoIterator for &'a IVectorView<T> {
                type Item = T;
                type IntoIter = VectorViewIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorViewIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVectorView_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    result__: *mut <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: <T as ::windows::Abi>::Abi,
                    index: *mut u32,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    startindex: u32,
                    items_array_size: u32,
                    items: *mut <T as ::windows::Abi>::Abi,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IVector<T>(::windows::IInspectable, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IVector<T> {
                type Vtable = IVector_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IVector<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: ::windows::RuntimeType + 'static> IVector<T> {
                pub fn GetAt(&self, index: u32) -> ::windows::Result<T> {
                    let this = self;
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(&self) -> ::windows::Result<IVectorView<T>> {
                    let this = self;
                    unsafe {
                        let mut result__: <IVectorView<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IVectorView<T>>(result__)
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, T>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, T>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, T>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, T>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> ::windows::Result<IIterator<T>> {
                    let this = &::windows::Interface::cast::<IIterable<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IVector<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{913337e9-11a1-4345-a3a2-4e7f956e222d}")
                        .push_slice(b";")
                        .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVector<T>>
                for ::windows::IInspectable
            {
                fn from(value: IVector<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVector<T>>
                for ::windows::IInspectable
            {
                fn from(value: &IVector<T>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IVector<T>> for IIterable<T> {
                fn from(value: IVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IVector<T>> for IIterable<T> {
                fn from(value: &IVector<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IIterable<T>>
                for IVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IIterable<T>>
                for &'a IVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            pub struct VectorIterator<T: ::windows::RuntimeType + 'static> {
                vector: IVector<T>,
                current: u32,
                size: u32,
            }
            impl<T: ::windows::RuntimeType> VectorIterator<T> {
                pub fn new(vector: IVector<T>) -> Self {
                    let size = vector.Size().unwrap();
                    Self {
                        vector,
                        current: 0,
                        size,
                    }
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::Iterator for VectorIterator<T> {
                type Item = T;
                fn next(&mut self) -> ::std::option::Option<Self::Item> {
                    if self.current >= self.size {
                        return None;
                    }
                    let result = self.vector.GetAt(self.current);
                    self.current += 1;
                    result.ok()
                }
            }
            impl<T: ::windows::RuntimeType> ::std::iter::IntoIterator for IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(self)
                }
            }
            impl<'a, T: ::windows::RuntimeType> ::std::iter::IntoIterator for &'a IVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(::std::clone::Clone::clone(self))
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVector_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    result__: *mut <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: <T as ::windows::Abi>::Abi,
                    index: *mut u32,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    value: <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                    value: <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    index: u32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    startindex: u32,
                    items_array_size: u32,
                    items: *mut <T as ::windows::Abi>::Abi,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    items_array_size: u32,
                    items: *const <T as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IVectorChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVectorChangedEventArgs {
                type Vtable = IVectorChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1465463775,
                    13566,
                    17536,
                    [175, 21, 7, 105, 31, 61, 93, 155],
                );
            }
            impl IVectorChangedEventArgs {
                pub fn Index(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IVectorChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{575933df-34fe-4480-af15-07691f3d5d9b}");
            }
            impl ::std::convert::From<IVectorChangedEventArgs> for ::windows::IInspectable {
                fn from(value: IVectorChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IVectorChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &IVectorChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IVectorChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IVectorChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVectorChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VectorChangedEventHandler<T>(
                ::windows::IUnknown,
                ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            impl<T: ::windows::RuntimeType + 'static> VectorChangedEventHandler<T> {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<IObservableVector<T>>,
                            &::std::option::Option<IVectorChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = VectorChangedEventHandler_box::<T, F> {
                        vtable: &VectorChangedEventHandler_box::<T, F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, IObservableVector<T>>,
                    event: impl ::windows::IntoParam<'a, IVectorChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            event.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType
                for VectorChangedEventHandler<T>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{0c051752-9fbf-4c70-aa0c-0e4c82d9a761}")
                        .push_slice(b";")
                        .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface
                for VectorChangedEventHandler<T>
            {
                type Vtable = VectorChangedEventHandler_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <VectorChangedEventHandler<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct VectorChangedEventHandler_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    event: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            #[repr(C)]
            struct VectorChangedEventHandler_box<
                T,
                F: FnMut(
                        &::std::option::Option<IObservableVector<T>>,
                        &::std::option::Option<IVectorChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            >
            where
                T: ::windows::RuntimeType + 'static,
            {
                vtable: *const VectorChangedEventHandler_abi<T>,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    T: ::windows::RuntimeType + 'static,
                    F: FnMut(
                            &::std::option::Option<IObservableVector<T>>,
                            &::std::option::Option<IVectorChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > VectorChangedEventHandler_box<T, F>
            {
                const VTABLE: VectorChangedEventHandler_abi<T> = VectorChangedEventHandler_abi::<T>(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                    ::std::marker::PhantomData::<T>,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<VectorChangedEventHandler<T> as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    event: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < IObservableVector < T > as :: windows :: Abi > :: Abi as * const < IObservableVector < T > as :: windows :: RuntimeType > :: DefaultType ) , & * ( & event as * const < IVectorChangedEventArgs as :: windows :: Abi > :: Abi as * const < IVectorChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IObservableVector<T>(::windows::IInspectable, ::std::marker::PhantomData<T>)
            where
                T: ::windows::RuntimeType + 'static;
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::Interface for IObservableVector<T> {
                type Vtable = IObservableVector_abi<T>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IObservableVector<T> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<T: ::windows::RuntimeType + 'static> IObservableVector<T> {
                pub fn VectorChanged<'a>(
                    &self,
                    vhnd: impl ::windows::IntoParam<'a, VectorChangedEventHandler<T>>,
                ) -> ::windows::Result<super::EventRegistrationToken> {
                    let this = self;
                    unsafe {
                        let mut result__: <super::EventRegistrationToken as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveVectorChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<'a, super::EventRegistrationToken>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> ::windows::Result<IIterator<T>> {
                    let this = &::windows::Interface::cast::<IIterable<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IIterator<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<T>>(result__)
                    }
                }
                pub fn GetAt(&self, index: u32) -> ::windows::Result<T> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <T as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<T>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(&self) -> ::windows::Result<IVectorView<T>> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <IVectorView<T> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IVectorView<T>>(result__)
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, T>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, T>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, T>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, T>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<T as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IVector<T>>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl<T: ::windows::RuntimeType + 'static> ::windows::RuntimeType for IObservableVector<T> {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{5917eb53-50b4-4a0d-b309-65862b3f1dbc}")
                        .push_slice(b";")
                        .push_other(<T as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IObservableVector<T>>
                for ::windows::IInspectable
            {
                fn from(value: IObservableVector<T>) -> Self {
                    value.0
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IObservableVector<T>>
                for ::windows::IInspectable
            {
                fn from(value: &IObservableVector<T>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IObservableVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IObservableVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IObservableVector<T>>
                for IIterable<T>
            {
                fn from(value: IObservableVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IObservableVector<T>>
                for IIterable<T>
            {
                fn from(value: &IObservableVector<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IIterable<T>>
                for IObservableVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IIterable<T>>
                for &'a IObservableVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IIterable<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<IObservableVector<T>>
                for IVector<T>
            {
                fn from(value: IObservableVector<T>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::convert::From<&IObservableVector<T>>
                for IVector<T>
            {
                fn from(value: &IObservableVector<T>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IVector<T>>
                for IObservableVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IVector<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IVector<T>>::into(self))
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::windows::IntoParam<'a, IVector<T>>
                for &'a IObservableVector<T>
            {
                fn into_param(self) -> ::windows::Param<'a, IVector<T>> {
                    ::windows::Param::Owned(::std::convert::Into::<IVector<T>>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl<T: ::windows::RuntimeType + 'static> ::std::iter::IntoIterator for IObservableVector<T> {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(self.into())
                }
            }
            impl<'a, T: ::windows::RuntimeType + 'static> ::std::iter::IntoIterator
                for &'a IObservableVector<T>
            {
                type Item = T;
                type IntoIter = VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    VectorIterator::new(self.into())
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IObservableVector_abi<T>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    vhnd: ::windows::RawPtr,
                    result__: *mut super::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<T>,
            )
            where
                T: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IMapView<K, V>(
                ::windows::IInspectable,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IMapView<K, V>
            {
                type Vtable = IMapView_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IMapView<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static> IMapView<K, V> {
                pub fn Lookup<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, K>,
                ) -> ::windows::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn HasKey<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, K>,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Split(
                    &self,
                    first: &mut ::std::option::Option<IMapView<K, V>>,
                    second: &mut ::std::option::Option<IMapView<K, V>>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            ::windows::Abi::set_abi(first),
                            ::windows::Abi::set_abi(second),
                        )
                        .ok()
                    }
                }
                pub fn First(&self) -> ::windows::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this = &::windows::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)
                        .unwrap();
                    unsafe {
                        let mut result__: <IIterator<IKeyValuePair<K, V>> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<IKeyValuePair<K, V>>>(result__)
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IMapView<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{e480ce40-a338-4ada-adcf-272272e48cb9}")
                        .push_slice(b";")
                        .push_other(<K as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b";")
                        .push_other(<V as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMapView<K, V>> for ::windows::IInspectable
            {
                fn from(value: IMapView<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMapView<K, V>> for ::windows::IInspectable
            {
                fn from(value: &IMapView<K, V>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IMapView<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IMapView<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMapView<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IMapView<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMapView<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IMapView<K, V>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, IIterable<IKeyValuePair<K, V>>> for IMapView<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, IIterable<IKeyValuePair<K, V>>> for &'a IMapView<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IMapView<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMapView_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut <V as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    first: *mut ::windows::RawPtr,
                    second: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<K>,
                pub ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IMap<K, V>(
                ::windows::IInspectable,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IMap<K, V>
            {
                type Vtable = IMap_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IMap<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static> IMap<K, V> {
                pub fn Lookup<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, K>,
                ) -> ::windows::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn HasKey<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, K>,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn GetView(&self) -> ::windows::Result<IMapView<K, V>> {
                    let this = self;
                    unsafe {
                        let mut result__: <IMapView<K, V> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IMapView<K, V>>(result__)
                    }
                }
                pub fn Insert<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, K>,
                    value: impl ::windows::IntoParam<'a, V>,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            value.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Remove<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, K>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn First(&self) -> ::windows::Result<IIterator<IKeyValuePair<K, V>>> {
                    let this = &::windows::Interface::cast::<IIterable<IKeyValuePair<K, V>>>(self)
                        .unwrap();
                    unsafe {
                        let mut result__: <IIterator<IKeyValuePair<K, V>> as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<IIterator<IKeyValuePair<K, V>>>(result__)
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IMap<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{3c2925fe-8519-45c1-aa79-197b6718c1c1}")
                        .push_slice(b";")
                        .push_other(<K as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b";")
                        .push_other(<V as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMap<K, V>> for ::windows::IInspectable
            {
                fn from(value: IMap<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMap<K, V>> for ::windows::IInspectable
            {
                fn from(value: &IMap<K, V>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IMap<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IMap<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: IMap<K, V>) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IMap<K, V>> for IIterable<IKeyValuePair<K, V>>
            {
                fn from(value: &IMap<K, V>) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, IIterable<IKeyValuePair<K, V>>> for IMap<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(self),
                    )
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, IIterable<IKeyValuePair<K, V>>> for &'a IMap<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, IIterable<IKeyValuePair<K, V>>> {
                    ::windows::Param::Owned(
                        ::std::convert::Into::<IIterable<IKeyValuePair<K, V>>>::into(
                            ::std::clone::Clone::clone(self),
                        ),
                    )
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::iter::IntoIterator for &'a IMap<K, V>
            {
                type Item = IKeyValuePair<K, V>;
                type IntoIter = IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMap_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut <V as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut u32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                    value: <V as ::windows::Abi>::Abi,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    key: <K as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<K>,
                pub ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IKeyValuePair<K, V>(
                ::windows::IInspectable,
                ::std::marker::PhantomData<K>,
                ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::Interface for IKeyValuePair<K, V>
            {
                type Vtable = IKeyValuePair_abi<K, V>;
                const IID: ::windows::Guid = ::windows::Guid::from_signature(
                    <IKeyValuePair<K, V> as ::windows::RuntimeType>::SIGNATURE,
                );
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static> IKeyValuePair<K, V> {
                pub fn Key(&self) -> ::windows::Result<K> {
                    let this = self;
                    unsafe {
                        let mut result__: <K as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<K>(result__)
                    }
                }
                pub fn Value(&self) -> ::windows::Result<V> {
                    let this = self;
                    unsafe {
                        let mut result__: <V as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<V>(result__)
                    }
                }
            }
            unsafe impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::RuntimeType for IKeyValuePair<K, V>
            {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = {
                    ::windows::ConstBuffer::new()
                        .push_slice(b"pinterface(")
                        .push_slice(b"{02b51929-c1c4-4a7e-8940-0312b5c18500}")
                        .push_slice(b";")
                        .push_other(<K as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b";")
                        .push_other(<V as ::windows::RuntimeType>::SIGNATURE)
                        .push_slice(b")")
                };
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<IKeyValuePair<K, V>> for ::windows::IInspectable
            {
                fn from(value: IKeyValuePair<K, V>) -> Self {
                    value.0
                }
            }
            impl<K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::std::convert::From<&IKeyValuePair<K, V>> for ::windows::IInspectable
            {
                fn from(value: &IKeyValuePair<K, V>) -> Self {
                    value.0.clone()
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for IKeyValuePair<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a, K: ::windows::RuntimeType + 'static, V: ::windows::RuntimeType + 'static>
                ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IKeyValuePair<K, V>
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IKeyValuePair_abi<K, V>(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <K as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut <V as ::windows::Abi>::Abi,
                ) -> ::windows::HRESULT,
                pub ::std::marker::PhantomData<K>,
                pub ::std::marker::PhantomData<V>,
            )
            where
                K: ::windows::RuntimeType + 'static,
                V: ::windows::RuntimeType + 'static;
        }
    }
    #[allow(
        unused_variables,
        non_upper_case_globals,
        non_snake_case,
        unused_unsafe,
        non_camel_case_types,
        dead_code,
        clippy::all
    )]
    pub mod UI {
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod Composition {
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IAnimationObject(::windows::IInspectable);
            unsafe impl ::windows::Interface for IAnimationObject {
                type Vtable = IAnimationObject_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3876855306,
                    1208,
                    20421,
                    [164, 220, 25, 83, 146, 229, 120, 7],
                );
            }
            impl IAnimationObject {}
            unsafe impl ::windows::RuntimeType for IAnimationObject {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{e7141e0a-04b8-4fc5-a4dc-195392e57807}");
            }
            impl ::std::convert::From<IAnimationObject> for ::windows::IInspectable {
                fn from(value: IAnimationObject) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IAnimationObject> for ::windows::IInspectable {
                fn from(value: &IAnimationObject) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IAnimationObject {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IAnimationObject {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAnimationObject_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IVisualElement(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualElement {
                type Vtable = IVisualElement_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    31868434,
                    7554,
                    17140,
                    [142, 63, 167, 34, 222, 211, 63, 199],
                );
            }
            impl IVisualElement {}
            unsafe impl ::windows::RuntimeType for IVisualElement {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{01e64612-1d82-42f4-8e3f-a722ded33fc7}");
            }
            impl ::std::convert::From<IVisualElement> for ::windows::IInspectable {
                fn from(value: IVisualElement) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IVisualElement> for ::windows::IInspectable {
                fn from(value: &IVisualElement) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IVisualElement {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IVisualElement {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualElement_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
        }
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod Core {
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ICoreWindowEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICoreWindowEventArgs {
                type Vtable = ICoreWindowEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    657137395,
                    50739,
                    19877,
                    [162, 108, 198, 208, 245, 107, 41, 218],
                );
            }
            impl ICoreWindowEventArgs {
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ICoreWindowEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{272b1ef3-c633-4da5-a26c-c6d0f56b29da}");
            }
            impl ::std::convert::From<ICoreWindowEventArgs> for ::windows::IInspectable {
                fn from(value: ICoreWindowEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ICoreWindowEventArgs> for ::windows::IInspectable {
                fn from(value: &ICoreWindowEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ICoreWindowEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ICoreWindowEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICoreWindowEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindowActivatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindowActivatedEventArgs {
                type Vtable = IWindowActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    396191207,
                    18008,
                    19638,
                    [170, 19, 65, 208, 148, 234, 37, 94],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindowActivatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowActivatedEventArgs(::windows::IInspectable);
            impl WindowActivatedEventArgs {
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ICoreWindowEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ICoreWindowEventArgs>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowActivatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Core.WindowActivatedEventArgs;{179d65e7-4658-4cb6-aa13-41d094ea255e})" ) ;
            }
            unsafe impl ::windows::Interface for WindowActivatedEventArgs {
                type Vtable = IWindowActivatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    396191207,
                    18008,
                    19638,
                    [170, 19, 65, 208, 148, 234, 37, 94],
                );
            }
            impl ::windows::RuntimeName for WindowActivatedEventArgs {
                const NAME: &'static str = "Windows.UI.Core.WindowActivatedEventArgs";
            }
            impl ::std::convert::From<WindowActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: WindowActivatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&WindowActivatedEventArgs> for ::windows::IInspectable {
                fn from(value: &WindowActivatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for WindowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a WindowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<WindowActivatedEventArgs> for ICoreWindowEventArgs {
                fn from(value: WindowActivatedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WindowActivatedEventArgs> for ICoreWindowEventArgs {
                fn from(value: &WindowActivatedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for WindowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for &'a WindowActivatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisibilityChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisibilityChangedEventArgs {
                type Vtable = IVisibilityChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3214481642,
                    55297,
                    17764,
                    [164, 149, 177, 232, 79, 138, 208, 133],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisibilityChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisibilityChangedEventArgs(::windows::IInspectable);
            impl VisibilityChangedEventArgs {
                pub fn Visible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ICoreWindowEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ICoreWindowEventArgs>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for VisibilityChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Core.VisibilityChangedEventArgs;{bf9918ea-d801-4564-a495-b1e84f8ad085})" ) ;
            }
            unsafe impl ::windows::Interface for VisibilityChangedEventArgs {
                type Vtable = IVisibilityChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3214481642,
                    55297,
                    17764,
                    [164, 149, 177, 232, 79, 138, 208, 133],
                );
            }
            impl ::windows::RuntimeName for VisibilityChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Core.VisibilityChangedEventArgs";
            }
            impl ::std::convert::From<VisibilityChangedEventArgs> for ::windows::IInspectable {
                fn from(value: VisibilityChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VisibilityChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &VisibilityChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VisibilityChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VisibilityChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<VisibilityChangedEventArgs> for ICoreWindowEventArgs {
                fn from(value: VisibilityChangedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&VisibilityChangedEventArgs> for ICoreWindowEventArgs {
                fn from(value: &VisibilityChangedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for VisibilityChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for &'a VisibilityChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CoreWindowEventArgs(::windows::IInspectable);
            impl CoreWindowEventArgs {
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for CoreWindowEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Core.CoreWindowEventArgs;{272b1ef3-c633-4da5-a26c-c6d0f56b29da})" ) ;
            }
            unsafe impl ::windows::Interface for CoreWindowEventArgs {
                type Vtable = ICoreWindowEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    657137395,
                    50739,
                    19877,
                    [162, 108, 198, 208, 245, 107, 41, 218],
                );
            }
            impl ::windows::RuntimeName for CoreWindowEventArgs {
                const NAME: &'static str = "Windows.UI.Core.CoreWindowEventArgs";
            }
            impl ::std::convert::From<CoreWindowEventArgs> for ::windows::IInspectable {
                fn from(value: CoreWindowEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&CoreWindowEventArgs> for ::windows::IInspectable {
                fn from(value: &CoreWindowEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for CoreWindowEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a CoreWindowEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<CoreWindowEventArgs> for ICoreWindowEventArgs {
                fn from(value: CoreWindowEventArgs) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&CoreWindowEventArgs> for ICoreWindowEventArgs {
                fn from(value: &CoreWindowEventArgs) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for CoreWindowEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for &'a CoreWindowEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindowSizeChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindowSizeChangedEventArgs {
                type Vtable = IWindowSizeChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1512050375,
                    1062,
                    18396,
                    [184, 108, 111, 71, 89, 21, 228, 81],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindowSizeChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowSizeChangedEventArgs(::windows::IInspectable);
            impl WindowSizeChangedEventArgs {
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ICoreWindowEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ICoreWindowEventArgs>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowSizeChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Core.WindowSizeChangedEventArgs;{5a200ec7-0426-47dc-b86c-6f475915e451})" ) ;
            }
            unsafe impl ::windows::Interface for WindowSizeChangedEventArgs {
                type Vtable = IWindowSizeChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1512050375,
                    1062,
                    18396,
                    [184, 108, 111, 71, 89, 21, 228, 81],
                );
            }
            impl ::windows::RuntimeName for WindowSizeChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Core.WindowSizeChangedEventArgs";
            }
            impl ::std::convert::From<WindowSizeChangedEventArgs> for ::windows::IInspectable {
                fn from(value: WindowSizeChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&WindowSizeChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &WindowSizeChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for WindowSizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a WindowSizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<WindowSizeChangedEventArgs> for ICoreWindowEventArgs {
                fn from(value: WindowSizeChangedEventArgs) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&WindowSizeChangedEventArgs> for ICoreWindowEventArgs {
                fn from(value: &WindowSizeChangedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for WindowSizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ICoreWindowEventArgs> for &'a WindowSizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ICoreWindowEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ICoreWindowEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
        }
        #[allow(
            unused_variables,
            non_upper_case_globals,
            non_snake_case,
            unused_unsafe,
            non_camel_case_types,
            dead_code,
            clippy::all
        )]
        pub mod Xaml {
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDataContextChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataContextChangedEventArgs {
                type Vtable = IDataContextChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2108067361,
                    2959,
                    20383,
                    [161, 67, 248, 231, 120, 1, 54, 162],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataContextChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDebugSettings3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDebugSettings3 {
                type Vtable = IDebugSettings3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3871035426,
                    1573,
                    18335,
                    [142, 50, 75, 88, 61, 115, 183, 172],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDebugSettings3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyPropertyStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyPropertyStatics {
                type Vtable = IDependencyPropertyStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1239806607,
                    33369,
                    19804,
                    [170, 224, 131, 213, 109, 187, 104, 217],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyPropertyStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateManagerFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateManagerFactory {
                type Vtable = IVisualStateManagerFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2246416637,
                    42357,
                    18358,
                    [158, 48, 56, 60, 208, 133, 133, 242],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateManagerFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStateTrigger(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStateTrigger {
                type Vtable = IStateTrigger_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1739452206,
                    55513,
                    18935,
                    [161, 253, 46, 53, 238, 221, 35, 205],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStateTrigger_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualState(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualState {
                type Vtable = IVisualState_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1663086588,
                    49946,
                    17488,
                    [175, 222, 246, 234, 123, 209, 245, 134],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualState_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualState2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualState2 {
                type Vtable = IVisualState2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    262207638,
                    25792,
                    17915,
                    [141, 36, 251, 131, 41, 140, 13, 147],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualState2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyObject(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyObject {
                type Vtable = IDependencyObject_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1548904037,
                    62990,
                    18706,
                    [175, 89, 95, 224, 104, 15, 8, 157],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyObject_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyObject2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyObject2 {
                type Vtable = IDependencyObject2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    704567389,
                    15650,
                    17313,
                    [173, 208, 23, 2, 124, 8, 178, 18],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyObject2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                    callback: ::windows::RawPtr,
                    result__: *mut i64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                    token: i64,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyObjectFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyObjectFactory {
                type Vtable = IDependencyObjectFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2583932818,
                    32138,
                    18743,
                    [136, 79, 236, 243, 79, 224, 42, 203],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyObjectFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DependencyObject(::windows::IInspectable);
            impl DependencyObject {
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DependencyObject {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DependencyObject;{5c526665-f60e-4912-af59-5fe0680f089d})",
                );
            }
            unsafe impl ::windows::Interface for DependencyObject {
                type Vtable = IDependencyObject_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1548904037,
                    62990,
                    18706,
                    [175, 89, 95, 224, 104, 15, 8, 157],
                );
            }
            impl ::windows::RuntimeName for DependencyObject {
                const NAME: &'static str = "Windows.UI.Xaml.DependencyObject";
            }
            impl ::std::convert::From<DependencyObject> for ::windows::IInspectable {
                fn from(value: DependencyObject) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DependencyObject> for ::windows::IInspectable {
                fn from(value: &DependencyObject) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DependencyObject {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DependencyObject {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DependencyObject {}
            unsafe impl ::std::marker::Sync for DependencyObject {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisualState(::windows::IInspectable);
            impl VisualState {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        VisualState,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn Name(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Setters(&self) -> ::windows::Result<SetterBaseCollection> {
                    let this = &::windows::Interface::cast::<IVisualState2>(self).unwrap();
                    unsafe {
                        let mut result__: <SetterBaseCollection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SetterBaseCollection>(result__)
                    }
                }
                pub fn StateTriggers(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVector<StateTriggerBase>,
                > {
                    let this = &::windows::Interface::cast::<IVisualState2>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVector<
                            StateTriggerBase,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .7 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVector :: < StateTriggerBase > > ( result__ )
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for VisualState {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.VisualState;{6320affc-c31a-4450-afde-f6ea7bd1f586})",
                );
            }
            unsafe impl ::windows::Interface for VisualState {
                type Vtable = IVisualState_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1663086588,
                    49946,
                    17488,
                    [175, 222, 246, 234, 123, 209, 245, 134],
                );
            }
            impl ::windows::RuntimeName for VisualState {
                const NAME: &'static str = "Windows.UI.Xaml.VisualState";
            }
            impl ::std::convert::From<VisualState> for ::windows::IInspectable {
                fn from(value: VisualState) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VisualState> for ::windows::IInspectable {
                fn from(value: &VisualState) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VisualState {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VisualState {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<VisualState> for DependencyObject {
                fn from(value: VisualState) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&VisualState> for DependencyObject {
                fn from(value: &VisualState) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for VisualState {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a VisualState {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for VisualState {}
            unsafe impl ::std::marker::Sync for VisualState {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISizeHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISizeHelper {
                type Vtable = ISizeHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3877788308,
                    23811,
                    18947,
                    [186, 148, 150, 127, 198, 143, 206, 254],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISizeHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPointHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPointHelper {
                type Vtable = IPointHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1920720274,
                    25776,
                    18895,
                    [163, 33, 169, 121, 62, 115, 226, 231],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPointHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPointHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPointHelperStatics {
                type Vtable = IPointHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    22727285,
                    30424,
                    19326,
                    [138, 51, 125, 121, 32, 70, 145, 238],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPointHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct PointHelper(::windows::IInspectable);
            impl PointHelper {
                pub fn IPointHelperStatics<
                    R,
                    F: FnOnce(&IPointHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<PointHelper, IPointHelperStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for PointHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.PointHelper;{727bdd92-64b0-49cf-a321-a9793e73e2e7})",
                );
            }
            unsafe impl ::windows::Interface for PointHelper {
                type Vtable = IPointHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1920720274,
                    25776,
                    18895,
                    [163, 33, 169, 121, 62, 115, 226, 231],
                );
            }
            impl ::windows::RuntimeName for PointHelper {
                const NAME: &'static str = "Windows.UI.Xaml.PointHelper";
            }
            impl ::std::convert::From<PointHelper> for ::windows::IInspectable {
                fn from(value: PointHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&PointHelper> for ::windows::IInspectable {
                fn from(value: &PointHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for PointHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a PointHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for PointHelper {}
            unsafe impl ::std::marker::Sync for PointHelper {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplicationOverrides2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplicationOverrides2 {
                type Vtable = IApplicationOverrides2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3680293561,
                    54196,
                    21900,
                    [198, 78, 4, 52, 253, 27, 216, 137],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplicationOverrides2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateChangedEventArgs {
                type Vtable = IVisualStateChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4263602865,
                    62239,
                    18321,
                    [137, 137, 199, 14, 29, 155, 89, 255],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisualStateChangedEventArgs(::windows::IInspectable);
            impl VisualStateChangedEventArgs {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        VisualStateChangedEventArgs,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn OldState(&self) -> ::windows::Result<VisualState> {
                    let this = self;
                    unsafe {
                        let mut result__: <VisualState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<VisualState>(result__)
                    }
                }
                pub fn SetOldState<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, VisualState>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn NewState(&self) -> ::windows::Result<VisualState> {
                    let this = self;
                    unsafe {
                        let mut result__: <VisualState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<VisualState>(result__)
                    }
                }
                pub fn SetNewState<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, VisualState>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for VisualStateChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.VisualStateChangedEventArgs;{fe216ab1-f31f-4791-8989-c70e1d9b59ff})" ) ;
            }
            unsafe impl ::windows::Interface for VisualStateChangedEventArgs {
                type Vtable = IVisualStateChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4263602865,
                    62239,
                    18321,
                    [137, 137, 199, 14, 29, 155, 89, 255],
                );
            }
            impl ::windows::RuntimeName for VisualStateChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.VisualStateChangedEventArgs";
            }
            impl ::std::convert::From<VisualStateChangedEventArgs> for ::windows::IInspectable {
                fn from(value: VisualStateChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VisualStateChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &VisualStateChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VisualStateChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VisualStateChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for VisualStateChangedEventArgs {}
            unsafe impl ::std::marker::Sync for VisualStateChangedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElement2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElement2 {
                type Vtable = IFrameworkElement2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4052812990,
                    16938,
                    18692,
                    [165, 47, 238, 114, 1, 4, 41, 229],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElement2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ElementTheme,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ElementTheme,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyProperty(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyProperty {
                type Vtable = IDependencyProperty_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2242984304,
                    39876,
                    20118,
                    [172, 241, 48, 200, 253, 61, 85, 200],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyProperty_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IExceptionRoutedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IExceptionRoutedEventArgs {
                type Vtable = IExceptionRoutedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3718246762,
                    19298,
                    19052,
                    [164, 157, 6, 113, 239, 97, 54, 190],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IExceptionRoutedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IRoutedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IRoutedEventArgs {
                type Vtable = IRoutedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1553488582,
                    55298,
                    19256,
                    [162, 35, 191, 7, 12, 67, 254, 223],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRoutedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IRoutedEventArgsFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IRoutedEventArgsFactory {
                type Vtable = IRoutedEventArgsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3055308167,
                    28901,
                    16686,
                    [181, 32, 26, 65, 238, 118, 187, 244],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRoutedEventArgsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct RoutedEventArgs(::windows::IInspectable);
            impl RoutedEventArgs {
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn new() -> ::windows::Result<RoutedEventArgs> {
                    Self::IRoutedEventArgsFactory(|this| unsafe {
                        let mut result__: <RoutedEventArgs as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<RoutedEventArgs>(result__)
                    })
                }
                pub fn IRoutedEventArgsFactory<
                    R,
                    F: FnOnce(&IRoutedEventArgsFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        RoutedEventArgs,
                        IRoutedEventArgsFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for RoutedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.RoutedEventArgs;{5c985ac6-d802-4b38-a223-bf070c43fedf})",
                );
            }
            unsafe impl ::windows::Interface for RoutedEventArgs {
                type Vtable = IRoutedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1553488582,
                    55298,
                    19256,
                    [162, 35, 191, 7, 12, 67, 254, 223],
                );
            }
            impl ::windows::RuntimeName for RoutedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.RoutedEventArgs";
            }
            impl ::std::convert::From<RoutedEventArgs> for ::windows::IInspectable {
                fn from(value: RoutedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&RoutedEventArgs> for ::windows::IInspectable {
                fn from(value: &RoutedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for RoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a RoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for RoutedEventArgs {}
            unsafe impl ::std::marker::Sync for RoutedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IExceptionRoutedEventArgsFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IExceptionRoutedEventArgsFactory {
                type Vtable = IExceptionRoutedEventArgsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3148448365,
                    23930,
                    17639,
                    [184, 147, 178, 174, 13, 210, 66, 115],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IExceptionRoutedEventArgsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ExceptionRoutedEventArgs(::windows::IInspectable);
            impl ExceptionRoutedEventArgs {
                pub fn ErrorMessage(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ExceptionRoutedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ExceptionRoutedEventArgs;{dd9ff16a-4b62-4a6c-a49d-0671ef6136be})" ) ;
            }
            unsafe impl ::windows::Interface for ExceptionRoutedEventArgs {
                type Vtable = IExceptionRoutedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3718246762,
                    19298,
                    19052,
                    [164, 157, 6, 113, 239, 97, 54, 190],
                );
            }
            impl ::windows::RuntimeName for ExceptionRoutedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.ExceptionRoutedEventArgs";
            }
            impl ::std::convert::From<ExceptionRoutedEventArgs> for ::windows::IInspectable {
                fn from(value: ExceptionRoutedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ExceptionRoutedEventArgs> for ::windows::IInspectable {
                fn from(value: &ExceptionRoutedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ExceptionRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ExceptionRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ExceptionRoutedEventArgs> for RoutedEventArgs {
                fn from(value: ExceptionRoutedEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&ExceptionRoutedEventArgs> for RoutedEventArgs {
                fn from(value: &ExceptionRoutedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for ExceptionRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a ExceptionRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for ExceptionRoutedEventArgs {}
            unsafe impl ::std::marker::Sync for ExceptionRoutedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPropertyMetadata(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPropertyMetadata {
                type Vtable = IPropertyMetadata_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2169434893,
                    36120,
                    17546,
                    [134, 68, 242, 203, 81, 231, 3, 128],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPropertyMetadata_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPropertyMetadataStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPropertyMetadataStatics {
                type Vtable = IPropertyMetadataStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    989923194,
                    28166,
                    17897,
                    [139, 92, 175, 36, 52, 88, 192, 98],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPropertyMetadataStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    defaultvalue: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    defaultvalue: ::windows::RawPtr,
                    propertychangedcallback: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    createdefaultvaluecallback: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    createdefaultvaluecallback: ::windows::RawPtr,
                    propertychangedcallback: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPropertyMetadataFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPropertyMetadataFactory {
                type Vtable = IPropertyMetadataFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3250068672,
                    22477,
                    20271,
                    [176, 169, 225, 128, 27, 40, 247, 107],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPropertyMetadataFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    defaultvalue: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    defaultvalue: ::windows::RawPtr,
                    propertychangedcallback: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct PropertyMetadata(::windows::IInspectable);
            impl PropertyMetadata {
                pub fn DefaultValue(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn CreateDefaultValueCallback(
                    &self,
                ) -> ::windows::Result<CreateDefaultValueCallback> {
                    let this = self;
                    unsafe {
                        let mut result__: <CreateDefaultValueCallback as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<CreateDefaultValueCallback>(result__)
                    }
                }
                pub fn CreateWithDefaultValue<'a>(
                    defaultvalue: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<PropertyMetadata> {
                    Self::IPropertyMetadataStatics(|this| unsafe {
                        let mut result__: <PropertyMetadata as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            defaultvalue.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<PropertyMetadata>(result__)
                    })
                }
                pub fn CreateWithDefaultValueAndCallback<'a>(
                    defaultvalue: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    propertychangedcallback: impl ::windows::IntoParam<'a, PropertyChangedCallback>,
                ) -> ::windows::Result<PropertyMetadata> {
                    Self::IPropertyMetadataStatics(|this| unsafe {
                        let mut result__: <PropertyMetadata as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            defaultvalue.into_param().abi(),
                            propertychangedcallback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<PropertyMetadata>(result__)
                    })
                }
                pub fn CreateWithFactory<'a>(
                    createdefaultvaluecallback: impl ::windows::IntoParam<
                        'a,
                        CreateDefaultValueCallback,
                    >,
                ) -> ::windows::Result<PropertyMetadata> {
                    Self::IPropertyMetadataStatics(|this| unsafe {
                        let mut result__: <PropertyMetadata as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            createdefaultvaluecallback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<PropertyMetadata>(result__)
                    })
                }
                pub fn CreateWithFactoryAndCallback<'a>(
                    createdefaultvaluecallback: impl ::windows::IntoParam<
                        'a,
                        CreateDefaultValueCallback,
                    >,
                    propertychangedcallback: impl ::windows::IntoParam<'a, PropertyChangedCallback>,
                ) -> ::windows::Result<PropertyMetadata> {
                    Self::IPropertyMetadataStatics(|this| unsafe {
                        let mut result__: <PropertyMetadata as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            createdefaultvaluecallback.into_param().abi(),
                            propertychangedcallback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<PropertyMetadata>(result__)
                    })
                }
                pub fn CreateInstanceWithDefaultValue<'a>(
                    defaultvalue: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<PropertyMetadata> {
                    Self::IPropertyMetadataFactory(|this| unsafe {
                        let mut result__: <PropertyMetadata as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            defaultvalue.into_param().abi(),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<PropertyMetadata>(result__)
                    })
                }
                pub fn CreateInstanceWithDefaultValueAndCallback<'a>(
                    defaultvalue: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    propertychangedcallback: impl ::windows::IntoParam<'a, PropertyChangedCallback>,
                ) -> ::windows::Result<PropertyMetadata> {
                    Self::IPropertyMetadataFactory(|this| unsafe {
                        let mut result__: <PropertyMetadata as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            defaultvalue.into_param().abi(),
                            propertychangedcallback.into_param().abi(),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<PropertyMetadata>(result__)
                    })
                }
                pub fn IPropertyMetadataStatics<
                    R,
                    F: FnOnce(&IPropertyMetadataStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        PropertyMetadata,
                        IPropertyMetadataStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IPropertyMetadataFactory<
                    R,
                    F: FnOnce(&IPropertyMetadataFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        PropertyMetadata,
                        IPropertyMetadataFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for PropertyMetadata {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.PropertyMetadata;{814ef30d-8d18-448a-8644-f2cb51e70380})",
                );
            }
            unsafe impl ::windows::Interface for PropertyMetadata {
                type Vtable = IPropertyMetadata_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2169434893,
                    36120,
                    17546,
                    [134, 68, 242, 203, 81, 231, 3, 128],
                );
            }
            impl ::windows::RuntimeName for PropertyMetadata {
                const NAME: &'static str = "Windows.UI.Xaml.PropertyMetadata";
            }
            impl ::std::convert::From<PropertyMetadata> for ::windows::IInspectable {
                fn from(value: PropertyMetadata) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&PropertyMetadata> for ::windows::IInspectable {
                fn from(value: &PropertyMetadata) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for PropertyMetadata {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a PropertyMetadata {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for PropertyMetadata {}
            unsafe impl ::std::marker::Sync for PropertyMetadata {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IBringIntoViewRequestedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBringIntoViewRequestedEventArgs {
                type Vtable = IBringIntoViewRequestedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    241344196,
                    8710,
                    19595,
                    [148, 174, 189, 182, 106, 78, 191, 209],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBringIntoViewRequestedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BringIntoViewRequestedEventArgs(::windows::IInspectable);
            impl BringIntoViewRequestedEventArgs {
                pub fn TargetElement(&self) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn SetTargetElement<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AnimationDesired(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAnimationDesired(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn HorizontalAlignmentRatio(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn VerticalAlignmentRatio(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn HorizontalOffset(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetHorizontalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn VerticalOffset(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetVerticalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).19)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for BringIntoViewRequestedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.BringIntoViewRequestedEventArgs;{0e629ec4-2206-4c8b-94ae-bdb66a4ebfd1})" ) ;
            }
            unsafe impl ::windows::Interface for BringIntoViewRequestedEventArgs {
                type Vtable = IBringIntoViewRequestedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    241344196,
                    8710,
                    19595,
                    [148, 174, 189, 182, 106, 78, 191, 209],
                );
            }
            impl ::windows::RuntimeName for BringIntoViewRequestedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.BringIntoViewRequestedEventArgs";
            }
            impl ::std::convert::From<BringIntoViewRequestedEventArgs> for ::windows::IInspectable {
                fn from(value: BringIntoViewRequestedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BringIntoViewRequestedEventArgs> for ::windows::IInspectable {
                fn from(value: &BringIntoViewRequestedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for BringIntoViewRequestedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a BringIntoViewRequestedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<BringIntoViewRequestedEventArgs> for RoutedEventArgs {
                fn from(value: BringIntoViewRequestedEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&BringIntoViewRequestedEventArgs> for RoutedEventArgs {
                fn from(value: &BringIntoViewRequestedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for BringIntoViewRequestedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a BringIntoViewRequestedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for BringIntoViewRequestedEventArgs {}
            unsafe impl ::std::marker::Sync for BringIntoViewRequestedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontEastAsianLanguage(pub i32);
            impl FontEastAsianLanguage {
                pub const Normal: FontEastAsianLanguage = FontEastAsianLanguage(0i32);
                pub const HojoKanji: FontEastAsianLanguage = FontEastAsianLanguage(1i32);
                pub const Jis04: FontEastAsianLanguage = FontEastAsianLanguage(2i32);
                pub const Jis78: FontEastAsianLanguage = FontEastAsianLanguage(3i32);
                pub const Jis83: FontEastAsianLanguage = FontEastAsianLanguage(4i32);
                pub const Jis90: FontEastAsianLanguage = FontEastAsianLanguage(5i32);
                pub const NlcKanji: FontEastAsianLanguage = FontEastAsianLanguage(6i32);
                pub const Simplified: FontEastAsianLanguage = FontEastAsianLanguage(7i32);
                pub const Traditional: FontEastAsianLanguage = FontEastAsianLanguage(8i32);
                pub const TraditionalNames: FontEastAsianLanguage = FontEastAsianLanguage(9i32);
            }
            impl ::std::convert::From<i32> for FontEastAsianLanguage {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontEastAsianLanguage {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontEastAsianLanguage {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.FontEastAsianLanguage;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITriggerBase(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITriggerBase {
                type Vtable = ITriggerBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3890881071,
                    57062,
                    17299,
                    [168, 178, 137, 35, 214, 65, 243, 149],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITriggerBase_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDurationHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDurationHelperStatics {
                type Vtable = IDurationHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3163031870,
                    13639,
                    20160,
                    [181, 25, 255, 168, 249, 196, 131, 140],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDurationHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Duration,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Duration,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    duration1: Duration,
                    duration2: Duration,
                    result__: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    timespan: super::super::Foundation::TimeSpan,
                    result__: *mut Duration,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: Duration,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: Duration,
                    duration: Duration,
                    result__: *mut Duration,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: Duration,
                    value: Duration,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: Duration,
                    duration: Duration,
                    result__: *mut Duration,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementWeakCollection(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementWeakCollection {
                type Vtable = IUIElementWeakCollection_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    271847971,
                    58989,
                    20894,
                    [172, 248, 85, 107, 210, 68, 234, 195],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementWeakCollection_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVector3Transition(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVector3Transition {
                type Vtable = IVector3Transition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3538029020,
                    50338,
                    20737,
                    [154, 104, 250, 1, 80, 80, 85, 137],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVector3Transition_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Vector3TransitionComponents,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Vector3TransitionComponents,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IScalarTransitionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IScalarTransitionFactory {
                type Vtable = IScalarTransitionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3383880174,
                    37082,
                    24029,
                    [190, 100, 62, 71, 151, 126, 162, 128],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IScalarTransitionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITargetPropertyPath(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITargetPropertyPath {
                type Vtable = ITargetPropertyPath_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1081347982,
                    2143,
                    19693,
                    [190, 112, 111, 71, 172, 241, 90, 208],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITargetPropertyPath_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITargetPropertyPathFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITargetPropertyPathFactory {
                type Vtable = ITargetPropertyPathFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2297351368,
                    39394,
                    19012,
                    [153, 7, 180, 75, 200, 110, 43, 190],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITargetPropertyPathFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    targetproperty: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct TargetPropertyPath(::windows::IInspectable);
            impl TargetPropertyPath {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        TargetPropertyPath,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn Path(&self) -> ::windows::Result<PropertyPath> {
                    let this = self;
                    unsafe {
                        let mut result__: <PropertyPath as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<PropertyPath>(result__)
                    }
                }
                pub fn SetPath<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, PropertyPath>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Target(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetTarget<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn CreateInstance<'a>(
                    targetproperty: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<TargetPropertyPath> {
                    Self::ITargetPropertyPathFactory(|this| unsafe {
                        let mut result__: <TargetPropertyPath as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            targetproperty.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<TargetPropertyPath>(result__)
                    })
                }
                pub fn ITargetPropertyPathFactory<
                    R,
                    F: FnOnce(&ITargetPropertyPathFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        TargetPropertyPath,
                        ITargetPropertyPathFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for TargetPropertyPath {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.TargetPropertyPath;{40740f8e-085f-4ced-be70-6f47acf15ad0})" ) ;
            }
            unsafe impl ::windows::Interface for TargetPropertyPath {
                type Vtable = ITargetPropertyPath_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1081347982,
                    2143,
                    19693,
                    [190, 112, 111, 71, 172, 241, 90, 208],
                );
            }
            impl ::windows::RuntimeName for TargetPropertyPath {
                const NAME: &'static str = "Windows.UI.Xaml.TargetPropertyPath";
            }
            impl ::std::convert::From<TargetPropertyPath> for ::windows::IInspectable {
                fn from(value: TargetPropertyPath) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TargetPropertyPath> for ::windows::IInspectable {
                fn from(value: &TargetPropertyPath) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TargetPropertyPath {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TargetPropertyPath {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for TargetPropertyPath {}
            unsafe impl ::std::marker::Sync for TargetPropertyPath {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement {
                type Vtable = IUIElement_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1735199721,
                    46684,
                    16838,
                    [186, 64, 88, 207, 135, 242, 1, 193],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Visibility,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Visibility,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    routedevent: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    handledeventstoo: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    routedevent: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement2 {
                type Vtable = IUIElement2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1735199737,
                    46700,
                    16854,
                    [186, 80, 88, 207, 135, 242, 1, 209],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement3 {
                type Vtable = IUIElement3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3156945137,
                    9970,
                    19115,
                    [178, 86, 59, 83, 80, 136, 30, 55],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement4(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement4 {
                type Vtable = IUIElement4_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1762942164,
                    6554,
                    18007,
                    [158, 87, 233, 158, 143, 19, 103, 18],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement4_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement5(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement5 {
                type Vtable = IUIElement5_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2397936578,
                    42380,
                    17491,
                    [175, 15, 169, 46, 224, 109, 3, 23],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement5_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ElementHighContrastAdjustment,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ElementHighContrastAdjustment,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    options: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement7(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement7 {
                type Vtable = IUIElement7_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3405531496,
                    25449,
                    16969,
                    [128, 249, 61, 101, 99, 25, 232, 17],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement7_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement8(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement8 {
                type Vtable = IUIElement8_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    985075333,
                    54536,
                    17527,
                    [182, 248, 14, 67, 87, 1, 200, 54],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement8_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement9(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement9 {
                type Vtable = IUIElement9_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3030402934,
                    20104,
                    20682,
                    [143, 43, 8, 148, 13, 108, 95, 148],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement9_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElement10(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElement10 {
                type Vtable = IUIElement10_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3576809001,
                    44332,
                    24427,
                    [173, 207, 251, 135, 40, 125, 24, 215],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElement10_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementOverrides(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementOverrides {
                type Vtable = IUIElementOverrides_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1619865373,
                    30808,
                    19179,
                    [137, 228, 181, 78, 44, 126, 211, 211],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementOverrides_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementOverrides7(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementOverrides7 {
                type Vtable = IUIElementOverrides7_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3112140648,
                    49819,
                    19609,
                    [161, 195, 149, 38, 25, 214, 231, 32],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementOverrides7_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementOverrides8(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementOverrides8 {
                type Vtable = IUIElementOverrides8_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1247437916,
                    21645,
                    18639,
                    [185, 152, 120, 68, 214, 226, 53, 161],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementOverrides8_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementOverrides9(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementOverrides9 {
                type Vtable = IUIElementOverrides9_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2590923123,
                    28003,
                    21746,
                    [144, 250, 98, 129, 59, 32, 183, 185],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementOverrides9_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics3 {
                type Vtable = IUIElementStatics3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3522722526,
                    60577,
                    17761,
                    [163, 43, 100, 96, 27, 78, 5, 151],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics4(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics4 {
                type Vtable = IUIElementStatics4_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    487947617,
                    5807,
                    16671,
                    [183, 116, 39, 35, 117, 164, 172, 44],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics4_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics2 {
                type Vtable = IUIElementStatics2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1490245451,
                    62780,
                    17854,
                    [152, 155, 165, 134, 149, 100, 135, 76],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics5(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics5 {
                type Vtable = IUIElementStatics5_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1505590673,
                    36771,
                    19557,
                    [186, 27, 64, 223, 56, 85, 108, 187],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics5_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics9(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics9 {
                type Vtable = IUIElementStatics9_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1900445303,
                    36003,
                    24279,
                    [149, 219, 213, 28, 218, 215, 127, 129],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics9_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementFactory {
                type Vtable = IUIElementFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3119420414,
                    41784,
                    16799,
                    [172, 50, 145, 220, 170, 223, 93, 8],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics6(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics6 {
                type Vtable = IUIElementStatics6_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1685980087,
                    874,
                    19946,
                    [149, 64, 29, 215, 253, 18, 102, 241],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics6_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics8(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics8 {
                type Vtable = IUIElementStatics8_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    398341255,
                    18549,
                    18709,
                    [176, 177, 164, 192, 248, 81, 223, 63],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics8_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    element: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics {
                type Vtable = IUIElementStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1490245435,
                    62764,
                    17854,
                    [152, 139, 165, 134, 149, 100, 135, 60],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics10(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics10 {
                type Vtable = IUIElementStatics10_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1624396642,
                    19262,
                    21466,
                    [139, 120, 56, 219, 148, 174, 143, 38],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics10_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementStatics7(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementStatics7 {
                type Vtable = IUIElementStatics7_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3667608723,
                    42645,
                    16709,
                    [174, 147, 136, 128, 36, 57, 106, 15],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementStatics7_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct UIElement(::windows::IInspectable);
            impl UIElement {
                pub fn AllowDrop(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAllowDrop(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Opacity(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetOpacity(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsHitTestVisible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Visibility(&self) -> ::windows::Result<Visibility> {
                    let this = self;
                    unsafe {
                        let mut result__: <Visibility as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Visibility>(result__)
                    }
                }
                pub fn SetVisibility(&self, value: Visibility) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).22)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn UseLayoutRounding(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).25)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsTapEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).31)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsDoubleTapEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).33)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsRightTapEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).35)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsHoldingEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).36)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).37)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveKeyUp<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).42)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveKeyDown<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).44)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn GotFocus<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, RoutedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).45)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveGotFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).46)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LostFocus<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, RoutedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).47)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveLostFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).48)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DragEnter<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).49)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDragEnter<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).50)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DragLeave<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).51)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDragLeave<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).52)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DragOver<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).53)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDragOver<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).54)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Drop<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).55)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDrop<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).56)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerPressed<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).58)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerMoved<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).60)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerReleased<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).62)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerEntered<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).64)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerExited<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).66)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerCaptureLost<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).68)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerCanceled<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).70)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerWheelChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).72)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveTapped<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).74)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveDoubleTapped<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).76)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveHolding<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).78)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveRightTapped<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).80)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationStarting<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).82)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationInertiaStarting<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).84)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationStarted<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).86)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationDelta<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).88)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationCompleted<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).90)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReleasePointerCaptures(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).95)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn AddHandler<'a>(
                    &self,
                    routedevent: impl ::windows::IntoParam<'a, RoutedEvent>,
                    handler: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    handledeventstoo: bool,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).96)(
                            ::windows::Abi::abi(this),
                            routedevent.into_param().abi(),
                            handler.into_param().abi(),
                            handledeventstoo,
                        )
                        .ok()
                    }
                }
                pub fn RemoveHandler<'a>(
                    &self,
                    routedevent: impl ::windows::IntoParam<'a, RoutedEvent>,
                    handler: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).97)(
                            ::windows::Abi::abi(this),
                            routedevent.into_param().abi(),
                            handler.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InvalidateMeasure(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).99)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn InvalidateArrange(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).100)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn UpdateLayout(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).101)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn CancelDirectManipulations(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement2>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn CanDrag(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetCanDrag(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveDragStarting<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveDropCompleted<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnDisconnectVisualChildren(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElementOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn KeyDownEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn KeyUpEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerEnteredEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerPressedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerMovedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerReleasedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerExitedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerCaptureLostEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerCanceledEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PointerWheelChangedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn TappedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn DoubleTappedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn HoldingEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn RightTappedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn ManipulationStartingEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn ManipulationInertiaStartingEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn ManipulationStartedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn ManipulationDeltaEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn ManipulationCompletedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn DragEnterEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).25)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn DragLeaveEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).26)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn DragOverEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).27)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn DropEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).28)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn AllowDropProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).29)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn OpacityProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ClipProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).31)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn RenderTransformProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ProjectionProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).33)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn RenderTransformOriginProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsHitTestVisibleProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).35)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn VisibilityProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).36)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn UseLayoutRoundingProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).37)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn TransitionsProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).38)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn CacheModeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).39)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsTapEnabledProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).40)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsDoubleTapEnabledProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).41)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsRightTapEnabledProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).42)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsHoldingEnabledProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).43)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ManipulationModeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).44)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn PointerCapturesProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).45)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn CompositeModeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics2(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn Transform3DProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics3(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn CanDragProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics3(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetExitDisplayModeOnAccessKeyInvoked(
                    &self,
                    value: bool,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsAccessKeyScope(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn AccessKeyScopeOwner(&self) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn SetAccessKeyScopeOwner<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AccessKey(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetAccessKey<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveContextRequested<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveContextCanceled<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAccessKeyDisplayRequested<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAccessKeyDisplayDismissed<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAccessKeyInvoked<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).25)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ContextFlyoutProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ExitDisplayModeOnAccessKeyInvokedProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsAccessKeyScopeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn AccessKeyScopeOwnerProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn AccessKeyProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn KeyTipHorizontalOffset(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn KeyTipVerticalOffset(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn HighContrastAdjustment(
                    &self,
                ) -> ::windows::Result<ElementHighContrastAdjustment> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        let mut result__: <ElementHighContrastAdjustment as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ElementHighContrastAdjustment>(result__)
                    }
                }
                pub fn SetHighContrastAdjustment(
                    &self,
                    value: ElementHighContrastAdjustment,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).24)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveGettingFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).28)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveLosingFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveNoFocusCandidateFound<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn StartBringIntoView(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).33)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn StartBringIntoViewWithOptions<'a>(
                    &self,
                    options: impl ::windows::IntoParam<'a, BringIntoViewOptions>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            options.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LightsProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn KeyTipPlacementModeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn KeyTipHorizontalOffsetProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn KeyTipVerticalOffsetProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn XYFocusKeyboardNavigationProperty() -> ::windows::Result<DependencyProperty>
                {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn XYFocusUpNavigationStrategyProperty() -> ::windows::Result<DependencyProperty>
                {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn XYFocusDownNavigationStrategyProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn XYFocusLeftNavigationStrategyProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn XYFocusRightNavigationStrategyProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn HighContrastAdjustmentProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn TabFocusNavigationProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics5(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn GettingFocusEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics6(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn LosingFocusEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics6(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn NoFocusCandidateFoundEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics6(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn RemoveCharacterReceived<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveProcessKeyboardAccelerators<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePreviewKeyDown<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePreviewKeyUp<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn GetChildrenInTabFocusOrder(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IIterable<DependencyObject>,
                > {
                    let this = &::windows::Interface::cast::<IUIElementOverrides7>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterable<
                            DependencyObject,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IIterable :: < DependencyObject > > ( result__ )
                    }
                }
                pub fn PreviewKeyDownEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics7(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn CharacterReceivedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics7(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn PreviewKeyUpEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics7(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn KeyTipTarget(&self) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn SetKeyTipTarget<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn KeyboardAcceleratorPlacementTarget(
                    &self,
                ) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn SetKeyboardAcceleratorPlacementTarget<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveBringIntoViewRequested<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnBringIntoViewRequested<'a>(
                    &self,
                    e: impl ::windows::IntoParam<'a, BringIntoViewRequestedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElementOverrides8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn BringIntoViewRequestedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics8(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn ContextRequestedEvent() -> ::windows::Result<RoutedEvent> {
                    Self::IUIElementStatics8(|this| unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    })
                }
                pub fn KeyTipTargetProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics8(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn KeyboardAcceleratorPlacementTargetProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics8(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn KeyboardAcceleratorPlacementModeProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics8(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn RegisterAsScrollPort<'a>(
                    element: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    Self::IUIElementStatics8(|this| unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            element.into_param().abi(),
                        )
                        .ok()
                    })
                }
                pub fn CanBeScrollAnchor(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn OpacityTransition(&self) -> ::windows::Result<ScalarTransition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <ScalarTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ScalarTransition>(result__)
                    }
                }
                pub fn SetOpacityTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ScalarTransition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn TranslationTransition(&self) -> ::windows::Result<Vector3Transition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <Vector3Transition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Vector3Transition>(result__)
                    }
                }
                pub fn SetTranslationTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Vector3Transition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Rotation(&self) -> ::windows::Result<f32> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f32>(result__)
                    }
                }
                pub fn SetRotation(&self, value: f32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RotationTransition(&self) -> ::windows::Result<ScalarTransition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <ScalarTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ScalarTransition>(result__)
                    }
                }
                pub fn SetRotationTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ScalarTransition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ScaleTransition(&self) -> ::windows::Result<Vector3Transition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <Vector3Transition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Vector3Transition>(result__)
                    }
                }
                pub fn SetScaleTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Vector3Transition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn CanBeScrollAnchorProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics9(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn XamlRoot(&self) -> ::windows::Result<XamlRoot> {
                    let this = &::windows::Interface::cast::<IUIElement10>(self).unwrap();
                    unsafe {
                        let mut result__: <XamlRoot as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<XamlRoot>(result__)
                    }
                }
                pub fn SetXamlRoot<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, XamlRoot>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement10>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ShadowProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IUIElementStatics10(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IUIElementStatics<
                    R,
                    F: FnOnce(&IUIElementStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics2<
                    R,
                    F: FnOnce(&IUIElementStatics2) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics2> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics3<
                    R,
                    F: FnOnce(&IUIElementStatics3) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics3> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics4<
                    R,
                    F: FnOnce(&IUIElementStatics4) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics4> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics5<
                    R,
                    F: FnOnce(&IUIElementStatics5) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics5> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics6<
                    R,
                    F: FnOnce(&IUIElementStatics6) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics6> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics7<
                    R,
                    F: FnOnce(&IUIElementStatics7) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics7> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics8<
                    R,
                    F: FnOnce(&IUIElementStatics8) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics8> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics9<
                    R,
                    F: FnOnce(&IUIElementStatics9) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics9> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IUIElementStatics10<
                    R,
                    F: FnOnce(&IUIElementStatics10) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<UIElement, IUIElementStatics10> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for UIElement {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.UIElement;{676d0be9-b65c-41c6-ba40-58cf87f201c1})",
                );
            }
            unsafe impl ::windows::Interface for UIElement {
                type Vtable = IUIElement_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1735199721,
                    46684,
                    16838,
                    [186, 64, 88, 207, 135, 242, 1, 193],
                );
            }
            impl ::windows::RuntimeName for UIElement {
                const NAME: &'static str = "Windows.UI.Xaml.UIElement";
            }
            impl ::std::convert::From<UIElement> for ::windows::IInspectable {
                fn from(value: UIElement) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&UIElement> for ::windows::IInspectable {
                fn from(value: &UIElement) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for UIElement {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a UIElement {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<UIElement> for super::Composition::IAnimationObject {
                fn from(value: UIElement) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&UIElement> for super::Composition::IAnimationObject {
                fn from(value: &UIElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IAnimationObject> for UIElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IAnimationObject> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IAnimationObject,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IAnimationObject> for &'a UIElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IAnimationObject> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IAnimationObject,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<UIElement> for super::Composition::IVisualElement {
                fn from(value: UIElement) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&UIElement> for super::Composition::IVisualElement {
                fn from(value: &UIElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IVisualElement> for UIElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IVisualElement> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IVisualElement,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IVisualElement> for &'a UIElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IVisualElement> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IVisualElement,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<UIElement> for DependencyObject {
                fn from(value: UIElement) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&UIElement> for DependencyObject {
                fn from(value: &UIElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for UIElement {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a UIElement {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for UIElement {}
            unsafe impl ::std::marker::Sync for UIElement {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUIElementWeakCollectionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUIElementWeakCollectionFactory {
                type Vtable = IUIElementWeakCollectionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1461986657,
                    6282,
                    21252,
                    [135, 146, 164, 63, 53, 217, 15, 153],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUIElementWeakCollectionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct UIElementWeakCollection(::windows::IInspectable);
            impl UIElementWeakCollection {
                pub fn First(
                    &self,
                ) -> ::windows::Result<super::super::Foundation::Collections::IIterator<UIElement>>
                {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            UIElement,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IIterator<UIElement>>(
                            result__,
                        )
                    }
                }
                pub fn GetAt(&self, index: u32) -> ::windows::Result<UIElement> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<super::super::Foundation::Collections::IVectorView<UIElement>>
                {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVectorView<
                            UIElement,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IVectorView<UIElement>>(
                            result__,
                        )
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<UIElement as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<UIElement as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<UIElementWeakCollection> {
                    Self::IUIElementWeakCollectionFactory(|this| unsafe {
                        let mut result__: <UIElementWeakCollection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<UIElementWeakCollection>(result__)
                    })
                }
                pub fn IUIElementWeakCollectionFactory<
                    R,
                    F: FnOnce(&IUIElementWeakCollectionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        UIElementWeakCollection,
                        IUIElementWeakCollectionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for UIElementWeakCollection {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.UIElementWeakCollection;{10341223-e66d-519e-acf8-556bd244eac3})" ) ;
            }
            unsafe impl ::windows::Interface for UIElementWeakCollection {
                type Vtable = IUIElementWeakCollection_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    271847971,
                    58989,
                    20894,
                    [172, 248, 85, 107, 210, 68, 234, 195],
                );
            }
            impl ::windows::RuntimeName for UIElementWeakCollection {
                const NAME: &'static str = "Windows.UI.Xaml.UIElementWeakCollection";
            }
            impl ::std::convert::From<UIElementWeakCollection> for ::windows::IInspectable {
                fn from(value: UIElementWeakCollection) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&UIElementWeakCollection> for ::windows::IInspectable {
                fn from(value: &UIElementWeakCollection) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for UIElementWeakCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a UIElementWeakCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<UIElementWeakCollection>
                for super::super::Foundation::Collections::IIterable<UIElement>
            {
                fn from(value: UIElementWeakCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&UIElementWeakCollection>
                for super::super::Foundation::Collections::IIterable<UIElement>
            {
                fn from(value: &UIElementWeakCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<UIElement>,
                > for UIElementWeakCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IIterable<UIElement>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<UIElement>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<UIElement>,
                > for &'a UIElementWeakCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IIterable<UIElement>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<UIElement>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<UIElementWeakCollection>
                for super::super::Foundation::Collections::IVector<UIElement>
            {
                fn from(value: UIElementWeakCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&UIElementWeakCollection>
                for super::super::Foundation::Collections::IVector<UIElement>
            {
                fn from(value: &UIElementWeakCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, super::super::Foundation::Collections::IVector<UIElement>>
                for UIElementWeakCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IVector<UIElement>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, super::super::Foundation::Collections::IVector<UIElement>>
                for &'a UIElementWeakCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IVector<UIElement>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<UIElement>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for UIElementWeakCollection {}
            unsafe impl ::std::marker::Sync for UIElementWeakCollection {}
            impl ::std::iter::IntoIterator for UIElementWeakCollection {
                type Item = UIElement;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a UIElementWeakCollection {
                type Item = UIElement;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragOperationDeferral(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragOperationDeferral {
                type Vtable = IDragOperationDeferral_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3128159418,
                    7027,
                    16518,
                    [179, 211, 194, 35, 190, 234, 22, 51],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragOperationDeferral_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DragOperationDeferral(::windows::IInspectable);
            impl DragOperationDeferral {
                pub fn Complete(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DragOperationDeferral {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DragOperationDeferral;{ba73ecba-1b73-4086-b3d3-c223beea1633})" ) ;
            }
            unsafe impl ::windows::Interface for DragOperationDeferral {
                type Vtable = IDragOperationDeferral_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3128159418,
                    7027,
                    16518,
                    [179, 211, 194, 35, 190, 234, 22, 51],
                );
            }
            impl ::windows::RuntimeName for DragOperationDeferral {
                const NAME: &'static str = "Windows.UI.Xaml.DragOperationDeferral";
            }
            impl ::std::convert::From<DragOperationDeferral> for ::windows::IInspectable {
                fn from(value: DragOperationDeferral) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DragOperationDeferral> for ::windows::IInspectable {
                fn from(value: &DragOperationDeferral) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DragOperationDeferral {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DragOperationDeferral {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DragOperationDeferral {}
            unsafe impl ::std::marker::Sync for DragOperationDeferral {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyObjectCollectionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyObjectCollectionFactory {
                type Vtable = IDependencyObjectCollectionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    85883391,
                    45992,
                    18926,
                    [181, 175, 172, 143, 104, 182, 73, 228],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyObjectCollectionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStateTriggerBase(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStateTriggerBase {
                type Vtable = IStateTriggerBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1219626648,
                    44806,
                    18028,
                    [128, 82, 147, 102, 109, 222, 14, 73],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStateTriggerBase_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStateTriggerBaseProtected(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStateTriggerBaseProtected {
                type Vtable = IStateTriggerBaseProtected_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1010950739,
                    36116,
                    16918,
                    [153, 76, 249, 147, 4, 41, 246, 229],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStateTriggerBaseProtected_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    isactive: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStateTriggerBaseFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStateTriggerBaseFactory {
                type Vtable = IStateTriggerBaseFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2534288459,
                    49071,
                    18352,
                    [190, 66, 193, 215, 17, 187, 46, 159],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStateTriggerBaseFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct StateTriggerBase(::windows::IInspectable);
            impl StateTriggerBase {
                pub fn SetActive(&self, isactive: bool) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStateTriggerBaseProtected>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), isactive)
                            .ok()
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for StateTriggerBase {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.StateTriggerBase;{48b20698-af06-466c-8052-93666dde0e49})",
                );
            }
            unsafe impl ::windows::Interface for StateTriggerBase {
                type Vtable = IStateTriggerBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1219626648,
                    44806,
                    18028,
                    [128, 82, 147, 102, 109, 222, 14, 73],
                );
            }
            impl ::windows::RuntimeName for StateTriggerBase {
                const NAME: &'static str = "Windows.UI.Xaml.StateTriggerBase";
            }
            impl ::std::convert::From<StateTriggerBase> for ::windows::IInspectable {
                fn from(value: StateTriggerBase) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StateTriggerBase> for ::windows::IInspectable {
                fn from(value: &StateTriggerBase) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for StateTriggerBase {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a StateTriggerBase {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<StateTriggerBase> for DependencyObject {
                fn from(value: StateTriggerBase) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&StateTriggerBase> for DependencyObject {
                fn from(value: &StateTriggerBase) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for StateTriggerBase {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a StateTriggerBase {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for StateTriggerBase {}
            unsafe impl ::std::marker::Sync for StateTriggerBase {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStateTriggerStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStateTriggerStatics {
                type Vtable = IStateTriggerStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1911118992,
                    46078,
                    19923,
                    [168, 168, 68, 162, 206, 37, 224, 184],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStateTriggerStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct StateTrigger(::windows::IInspectable);
            impl StateTrigger {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        StateTrigger,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IsActive(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsActive(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsActiveProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IStateTriggerStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn SetActive(&self, isactive: bool) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStateTriggerBaseProtected>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), isactive)
                            .ok()
                    }
                }
                pub fn IStateTriggerStatics<
                    R,
                    F: FnOnce(&IStateTriggerStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<StateTrigger, IStateTriggerStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for StateTrigger {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.StateTrigger;{67adef2e-d8d9-49f7-a1fd-2e35eedd23cd})",
                );
            }
            unsafe impl ::windows::Interface for StateTrigger {
                type Vtable = IStateTrigger_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1739452206,
                    55513,
                    18935,
                    [161, 253, 46, 53, 238, 221, 35, 205],
                );
            }
            impl ::windows::RuntimeName for StateTrigger {
                const NAME: &'static str = "Windows.UI.Xaml.StateTrigger";
            }
            impl ::std::convert::From<StateTrigger> for ::windows::IInspectable {
                fn from(value: StateTrigger) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&StateTrigger> for ::windows::IInspectable {
                fn from(value: &StateTrigger) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for StateTrigger {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a StateTrigger {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<StateTrigger> for StateTriggerBase {
                fn from(value: StateTrigger) -> Self {
                    ::std::convert::Into::<StateTriggerBase>::into(&value)
                }
            }
            impl ::std::convert::From<&StateTrigger> for StateTriggerBase {
                fn from(value: &StateTrigger) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, StateTriggerBase> for StateTrigger {
                fn into_param(self) -> ::windows::Param<'a, StateTriggerBase> {
                    ::windows::Param::Owned(::std::convert::Into::<StateTriggerBase>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, StateTriggerBase> for &'a StateTrigger {
                fn into_param(self) -> ::windows::Param<'a, StateTriggerBase> {
                    ::windows::Param::Owned(::std::convert::Into::<StateTriggerBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<StateTrigger> for DependencyObject {
                fn from(value: StateTrigger) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&StateTrigger> for DependencyObject {
                fn from(value: &StateTrigger) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for StateTrigger {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a StateTrigger {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for StateTrigger {}
            unsafe impl ::std::marker::Sync for StateTrigger {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct VerticalAlignment(pub i32);
            impl VerticalAlignment {
                pub const Top: VerticalAlignment = VerticalAlignment(0i32);
                pub const Center: VerticalAlignment = VerticalAlignment(1i32);
                pub const Bottom: VerticalAlignment = VerticalAlignment(2i32);
                pub const Stretch: VerticalAlignment = VerticalAlignment(3i32);
            }
            impl ::std::convert::From<i32> for VerticalAlignment {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for VerticalAlignment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for VerticalAlignment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.VerticalAlignment;i4)",
                );
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct LineStackingStrategy(pub i32);
            impl LineStackingStrategy {
                pub const MaxHeight: LineStackingStrategy = LineStackingStrategy(0i32);
                pub const BlockLineHeight: LineStackingStrategy = LineStackingStrategy(1i32);
                pub const BaselineToBaseline: LineStackingStrategy = LineStackingStrategy(2i32);
            }
            impl ::std::convert::From<i32> for LineStackingStrategy {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for LineStackingStrategy {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for LineStackingStrategy {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.LineStackingStrategy;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragStartingEventArgs2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragStartingEventArgs2 {
                type Vtable = IDragStartingEventArgs2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3629506702,
                    17590,
                    16913,
                    [189, 11, 127, 221, 187, 110, 130, 49],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragStartingEventArgs2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISetter(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISetter {
                type Vtable = ISetter_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2805853481,
                    46254,
                    19073,
                    [190, 133, 230, 144, 186, 13, 59, 110],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISetter_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragUIOverride(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragUIOverride {
                type Vtable = IDragUIOverride_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3178012154,
                    51553,
                    18529,
                    [183, 165, 191, 79, 228, 168, 166, 239],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragUIOverride_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DragUIOverride(::windows::IInspectable);
            impl DragUIOverride {
                pub fn Caption(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetCaption<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn IsContentVisible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsContentVisible(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsCaptionVisible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsCaptionVisible(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsGlyphVisible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsGlyphVisible(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DragUIOverride {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DragUIOverride;{bd6c9dfa-c961-4861-b7a5-bf4fe4a8a6ef})",
                );
            }
            unsafe impl ::windows::Interface for DragUIOverride {
                type Vtable = IDragUIOverride_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3178012154,
                    51553,
                    18529,
                    [183, 165, 191, 79, 228, 168, 166, 239],
                );
            }
            impl ::windows::RuntimeName for DragUIOverride {
                const NAME: &'static str = "Windows.UI.Xaml.DragUIOverride";
            }
            impl ::std::convert::From<DragUIOverride> for ::windows::IInspectable {
                fn from(value: DragUIOverride) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DragUIOverride> for ::windows::IInspectable {
                fn from(value: &DragUIOverride) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DragUIOverride {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DragUIOverride {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DragUIOverride {}
            unsafe impl ::std::marker::Sync for DragUIOverride {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDataTemplateFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataTemplateFactory {
                type Vtable = IDataTemplateFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1374526846,
                    11091,
                    18267,
                    [156, 136, 12, 24, 50, 200, 53, 26],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataTemplateFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IBrushTransition(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBrushTransition {
                type Vtable = IBrushTransition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    286693164,
                    40365,
                    21545,
                    [167, 221, 178, 183, 208, 97, 171, 142],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBrushTransition_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDebugSettings(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDebugSettings {
                type Vtable = IDebugSettings_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1027940248,
                    50855,
                    19735,
                    [131, 152, 216, 58, 6, 113, 131, 216],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDebugSettings_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IColorPaletteResources(::windows::IInspectable);
            unsafe impl ::windows::Interface for IColorPaletteResources {
                type Vtable = IColorPaletteResources_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    629180612,
                    44786,
                    23871,
                    [131, 59, 195, 109, 182, 39, 142, 217],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IColorPaletteResources_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ExceptionRoutedEventHandler(::windows::IUnknown);
            impl ExceptionRoutedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<ExceptionRoutedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = ExceptionRoutedEventHandler_box::<F> {
                        vtable: &ExceptionRoutedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, ExceptionRoutedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ExceptionRoutedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({68e0e810-f6ea-42bc-855b-5d9b67e6a262})",
                );
            }
            unsafe impl ::windows::Interface for ExceptionRoutedEventHandler {
                type Vtable = ExceptionRoutedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1759569936,
                    63210,
                    17084,
                    [133, 91, 93, 155, 103, 230, 162, 98],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ExceptionRoutedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct ExceptionRoutedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<ExceptionRoutedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const ExceptionRoutedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<ExceptionRoutedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > ExceptionRoutedEventHandler_box<F>
            {
                const VTABLE: ExceptionRoutedEventHandler_abi = ExceptionRoutedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<ExceptionRoutedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < ExceptionRoutedEventArgs as :: windows :: Abi > :: Abi as * const < ExceptionRoutedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct GridUnitType(pub i32);
            impl GridUnitType {
                pub const Auto: GridUnitType = GridUnitType(0i32);
                pub const Pixel: GridUnitType = GridUnitType(1i32);
                pub const Star: GridUnitType = GridUnitType(2i32);
            }
            impl ::std::convert::From<i32> for GridUnitType {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for GridUnitType {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for GridUnitType {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.GridUnitType;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IEffectiveViewportChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IEffectiveViewportChangedEventArgs {
                type Vtable = IEffectiveViewportChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1441672833,
                    7192,
                    23021,
                    [189, 61, 196, 202, 143, 167, 209, 144],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IEffectiveViewportChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct TextTrimming(pub i32);
            impl TextTrimming {
                pub const None: TextTrimming = TextTrimming(0i32);
                pub const CharacterEllipsis: TextTrimming = TextTrimming(1i32);
                pub const WordEllipsis: TextTrimming = TextTrimming(2i32);
                pub const Clip: TextTrimming = TextTrimming(3i32);
            }
            impl ::std::convert::From<i32> for TextTrimming {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for TextTrimming {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for TextTrimming {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.TextTrimming;i4)");
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ElementSpatialAudioMode(pub i32);
            impl ElementSpatialAudioMode {
                pub const Auto: ElementSpatialAudioMode = ElementSpatialAudioMode(0i32);
                pub const Off: ElementSpatialAudioMode = ElementSpatialAudioMode(1i32);
                pub const On: ElementSpatialAudioMode = ElementSpatialAudioMode(2i32);
            }
            impl ::std::convert::From<i32> for ElementSpatialAudioMode {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ElementSpatialAudioMode {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ElementSpatialAudioMode {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ElementSpatialAudioMode;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IScalarTransition(::windows::IInspectable);
            unsafe impl ::windows::Interface for IScalarTransition {
                type Vtable = IScalarTransition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1287029304,
                    57693,
                    21070,
                    [167, 60, 157, 77, 207, 190, 162, 38],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IScalarTransition_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateManagerOverrides(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateManagerOverrides {
                type Vtable = IVisualStateManagerOverrides_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1248235790,
                    31097,
                    17352,
                    [143, 244, 236, 97, 34, 117, 0, 6],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateManagerOverrides_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct OpticalMarginAlignment(pub i32);
            impl OpticalMarginAlignment {
                pub const None: OpticalMarginAlignment = OpticalMarginAlignment(0i32);
                pub const TrimSideBearings: OpticalMarginAlignment = OpticalMarginAlignment(1i32);
            }
            impl ::std::convert::From<i32> for OpticalMarginAlignment {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for OpticalMarginAlignment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for OpticalMarginAlignment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.OpticalMarginAlignment;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDispatcherTimer(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDispatcherTimer {
                type Vtable = IDispatcherTimer_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3512782406,
                    52514,
                    20319,
                    [140, 151, 64, 230, 29, 163, 226, 220],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDispatcherTimer_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: super::super::Foundation::TimeSpan,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITriggerBaseFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITriggerBaseFactory {
                type Vtable = ITriggerBaseFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1782292055,
                    64605,
                    17104,
                    [140, 185, 202, 80, 102, 122, 247, 70],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITriggerBaseFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct TriggerBase(::windows::IInspectable);
            impl TriggerBase {
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for TriggerBase {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.TriggerBase;{e7ea222f-dee6-4393-a8b2-8923d641f395})",
                );
            }
            unsafe impl ::windows::Interface for TriggerBase {
                type Vtable = ITriggerBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3890881071,
                    57062,
                    17299,
                    [168, 178, 137, 35, 214, 65, 243, 149],
                );
            }
            impl ::windows::RuntimeName for TriggerBase {
                const NAME: &'static str = "Windows.UI.Xaml.TriggerBase";
            }
            impl ::std::convert::From<TriggerBase> for ::windows::IInspectable {
                fn from(value: TriggerBase) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TriggerBase> for ::windows::IInspectable {
                fn from(value: &TriggerBase) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TriggerBase {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TriggerBase {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<TriggerBase> for DependencyObject {
                fn from(value: TriggerBase) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&TriggerBase> for DependencyObject {
                fn from(value: &TriggerBase) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for TriggerBase {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a TriggerBase {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for TriggerBase {}
            unsafe impl ::std::marker::Sync for TriggerBase {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITriggerAction(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITriggerAction {
                type Vtable = ITriggerAction_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2730548994,
                    25557,
                    19270,
                    [155, 131, 8, 104, 211, 7, 150, 33],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITriggerAction_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ITriggerActionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for ITriggerActionFactory {
                type Vtable = ITriggerActionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1758642361,
                    12937,
                    16719,
                    [143, 110, 198, 185, 122, 237, 218, 3],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ITriggerActionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct TriggerAction(::windows::IInspectable);
            impl TriggerAction {
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for TriggerAction {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.TriggerAction;{a2c0df02-63d5-4b46-9b83-0868d3079621})",
                );
            }
            unsafe impl ::windows::Interface for TriggerAction {
                type Vtable = ITriggerAction_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2730548994,
                    25557,
                    19270,
                    [155, 131, 8, 104, 211, 7, 150, 33],
                );
            }
            impl ::windows::RuntimeName for TriggerAction {
                const NAME: &'static str = "Windows.UI.Xaml.TriggerAction";
            }
            impl ::std::convert::From<TriggerAction> for ::windows::IInspectable {
                fn from(value: TriggerAction) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TriggerAction> for ::windows::IInspectable {
                fn from(value: &TriggerAction) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TriggerAction {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TriggerAction {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<TriggerAction> for DependencyObject {
                fn from(value: TriggerAction) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&TriggerAction> for DependencyObject {
                fn from(value: &TriggerAction) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for TriggerAction {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a TriggerAction {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for TriggerAction {}
            unsafe impl ::std::marker::Sync for TriggerAction {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IUnhandledExceptionEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IUnhandledExceptionEventArgs {
                type Vtable = IUnhandledExceptionEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1915758236,
                    1358,
                    19699,
                    [134, 197, 190, 144, 235, 104, 99, 213],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IUnhandledExceptionEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::HRESULT,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct UnhandledExceptionEventArgs(::windows::IInspectable);
            impl UnhandledExceptionEventArgs {
                pub fn Exception(&self) -> ::windows::Result<::windows::HRESULT> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HRESULT as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HRESULT>(result__)
                    }
                }
                pub fn Message(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for UnhandledExceptionEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.UnhandledExceptionEventArgs;{7230269c-054e-4cf3-86c5-be90eb6863d5})" ) ;
            }
            unsafe impl ::windows::Interface for UnhandledExceptionEventArgs {
                type Vtable = IUnhandledExceptionEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1915758236,
                    1358,
                    19699,
                    [134, 197, 190, 144, 235, 104, 99, 213],
                );
            }
            impl ::windows::RuntimeName for UnhandledExceptionEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.UnhandledExceptionEventArgs";
            }
            impl ::std::convert::From<UnhandledExceptionEventArgs> for ::windows::IInspectable {
                fn from(value: UnhandledExceptionEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&UnhandledExceptionEventArgs> for ::windows::IInspectable {
                fn from(value: &UnhandledExceptionEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for UnhandledExceptionEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a UnhandledExceptionEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for UnhandledExceptionEventArgs {}
            unsafe impl ::std::marker::Sync for UnhandledExceptionEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct UnhandledExceptionEventHandler(::windows::IUnknown);
            impl UnhandledExceptionEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<UnhandledExceptionEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = UnhandledExceptionEventHandler_box::<F> {
                        vtable: &UnhandledExceptionEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, UnhandledExceptionEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for UnhandledExceptionEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({9274e6bd-49a1-4958-beee-d0e19587b6e3})",
                );
            }
            unsafe impl ::windows::Interface for UnhandledExceptionEventHandler {
                type Vtable = UnhandledExceptionEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2457134781,
                    18849,
                    18776,
                    [190, 238, 208, 225, 149, 135, 182, 227],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct UnhandledExceptionEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct UnhandledExceptionEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<UnhandledExceptionEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const UnhandledExceptionEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<UnhandledExceptionEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > UnhandledExceptionEventHandler_box<F>
            {
                const VTABLE: UnhandledExceptionEventHandler_abi =
                    UnhandledExceptionEventHandler_abi(
                        Self::QueryInterface,
                        Self::AddRef,
                        Self::Release,
                        Self::Invoke,
                    );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<UnhandledExceptionEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < UnhandledExceptionEventArgs as :: windows :: Abi > :: Abi as * const < UnhandledExceptionEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IBindingFailedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBindingFailedEventArgs {
                type Vtable = IBindingFailedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    851562515,
                    19901,
                    17517,
                    [187, 184, 13, 227, 80, 72, 164, 73],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBindingFailedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementSoundPlayerStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementSoundPlayerStatics {
                type Vtable = IElementSoundPlayerStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    561680388,
                    38941,
                    16841,
                    [177, 82, 173, 169, 17, 164, 177, 58],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementSoundPlayerStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ElementSoundPlayerState,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ElementSoundPlayerState,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sound: ElementSoundKind,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDebugSettings2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDebugSettings2 {
                type Vtable = IDebugSettings2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1221817733,
                    57766,
                    18075,
                    [131, 200, 48, 130, 80, 55, 17, 158],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDebugSettings2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDebugSettings4(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDebugSettings4 {
                type Vtable = IDebugSettings4_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3372228165,
                    59428,
                    23135,
                    [134, 108, 226, 12, 236, 136, 168, 252],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDebugSettings4_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DebugSettings(::windows::IInspectable);
            impl DebugSettings {
                pub fn EnableFrameRateCounter(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetEnableFrameRateCounter(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsBindingTracingEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsBindingTracingEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsOverdrawHeatMapEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsOverdrawHeatMapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn BindingFailed<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, BindingFailedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveBindingFailed<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn EnableRedrawRegions(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IDebugSettings2>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetEnableRedrawRegions(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDebugSettings2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsTextPerformanceVisualizationEnabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IDebugSettings3>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsTextPerformanceVisualizationEnabled(
                    &self,
                    value: bool,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDebugSettings3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn FailFastOnErrors(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IDebugSettings4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetFailFastOnErrors(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDebugSettings4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DebugSettings {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DebugSettings;{3d451f98-c6a7-4d17-8398-d83a067183d8})",
                );
            }
            unsafe impl ::windows::Interface for DebugSettings {
                type Vtable = IDebugSettings_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1027940248,
                    50855,
                    19735,
                    [131, 152, 216, 58, 6, 113, 131, 216],
                );
            }
            impl ::windows::RuntimeName for DebugSettings {
                const NAME: &'static str = "Windows.UI.Xaml.DebugSettings";
            }
            impl ::std::convert::From<DebugSettings> for ::windows::IInspectable {
                fn from(value: DebugSettings) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DebugSettings> for ::windows::IInspectable {
                fn from(value: &DebugSettings) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DebugSettings {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DebugSettings {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DebugSettings {}
            unsafe impl ::std::marker::Sync for DebugSettings {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IRoutedEvent(::windows::IInspectable);
            unsafe impl ::windows::Interface for IRoutedEvent {
                type Vtable = IRoutedEvent_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2796705816,
                    17345,
                    19568,
                    [134, 92, 123, 221, 90, 50, 227, 39],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRoutedEvent_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISetterBaseFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISetterBaseFactory {
                type Vtable = ISetterBaseFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2180558176,
                    7400,
                    18077,
                    [166, 103, 22, 227, 124, 239, 139, 169],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISetterBaseFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDurationHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDurationHelper {
                type Vtable = IDurationHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    633431455,
                    17559,
                    16693,
                    [148, 15, 238, 150, 244, 214, 233, 52],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDurationHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DurationHelper(::windows::IInspectable);
            impl DurationHelper {
                pub fn Automatic() -> ::windows::Result<Duration> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <Duration as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Duration>(result__)
                    })
                }
                pub fn Forever() -> ::windows::Result<Duration> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <Duration as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Duration>(result__)
                    })
                }
                pub fn Compare<'a>(
                    duration1: impl ::windows::IntoParam<'a, Duration>,
                    duration2: impl ::windows::IntoParam<'a, Duration>,
                ) -> ::windows::Result<i32> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            duration1.into_param().abi(),
                            duration2.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i32>(result__)
                    })
                }
                pub fn FromTimeSpan<'a>(
                    timespan: impl ::windows::IntoParam<'a, super::super::Foundation::TimeSpan>,
                ) -> ::windows::Result<Duration> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <Duration as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            timespan.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<Duration>(result__)
                    })
                }
                pub fn GetHasTimeSpan<'a>(
                    target: impl ::windows::IntoParam<'a, Duration>,
                ) -> ::windows::Result<bool> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    })
                }
                pub fn Add<'a>(
                    target: impl ::windows::IntoParam<'a, Duration>,
                    duration: impl ::windows::IntoParam<'a, Duration>,
                ) -> ::windows::Result<Duration> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <Duration as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            duration.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<Duration>(result__)
                    })
                }
                pub fn Equals<'a>(
                    target: impl ::windows::IntoParam<'a, Duration>,
                    value: impl ::windows::IntoParam<'a, Duration>,
                ) -> ::windows::Result<bool> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            value.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    })
                }
                pub fn Subtract<'a>(
                    target: impl ::windows::IntoParam<'a, Duration>,
                    duration: impl ::windows::IntoParam<'a, Duration>,
                ) -> ::windows::Result<Duration> {
                    Self::IDurationHelperStatics(|this| unsafe {
                        let mut result__: <Duration as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            duration.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<Duration>(result__)
                    })
                }
                pub fn IDurationHelperStatics<
                    R,
                    F: FnOnce(&IDurationHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        DurationHelper,
                        IDurationHelperStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for DurationHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DurationHelper;{25c1659f-4497-4135-940f-ee96f4d6e934})",
                );
            }
            unsafe impl ::windows::Interface for DurationHelper {
                type Vtable = IDurationHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    633431455,
                    17559,
                    16693,
                    [148, 15, 238, 150, 244, 214, 233, 52],
                );
            }
            impl ::windows::RuntimeName for DurationHelper {
                const NAME: &'static str = "Windows.UI.Xaml.DurationHelper";
            }
            impl ::std::convert::From<DurationHelper> for ::windows::IInspectable {
                fn from(value: DurationHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DurationHelper> for ::windows::IInspectable {
                fn from(value: &DurationHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DurationHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DurationHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DurationHelper {}
            unsafe impl ::std::marker::Sync for DurationHelper {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct AutomationTextAttributesEnum(pub i32);
            impl AutomationTextAttributesEnum {
                pub const AnimationStyleAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40000i32);
                pub const BackgroundColorAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40001i32);
                pub const BulletStyleAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40002i32);
                pub const CapStyleAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40003i32);
                pub const CultureAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40004i32);
                pub const FontNameAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40005i32);
                pub const FontSizeAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40006i32);
                pub const FontWeightAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40007i32);
                pub const ForegroundColorAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40008i32);
                pub const HorizontalTextAlignmentAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40009i32);
                pub const IndentationFirstLineAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40010i32);
                pub const IndentationLeadingAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40011i32);
                pub const IndentationTrailingAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40012i32);
                pub const IsHiddenAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40013i32);
                pub const IsItalicAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40014i32);
                pub const IsReadOnlyAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40015i32);
                pub const IsSubscriptAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40016i32);
                pub const IsSuperscriptAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40017i32);
                pub const MarginBottomAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40018i32);
                pub const MarginLeadingAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40019i32);
                pub const MarginTopAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40020i32);
                pub const MarginTrailingAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40021i32);
                pub const OutlineStylesAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40022i32);
                pub const OverlineColorAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40023i32);
                pub const OverlineStyleAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40024i32);
                pub const StrikethroughColorAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40025i32);
                pub const StrikethroughStyleAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40026i32);
                pub const TabsAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40027i32);
                pub const TextFlowDirectionsAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40028i32);
                pub const UnderlineColorAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40029i32);
                pub const UnderlineStyleAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40030i32);
                pub const AnnotationTypesAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40031i32);
                pub const AnnotationObjectsAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40032i32);
                pub const StyleNameAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40033i32);
                pub const StyleIdAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40034i32);
                pub const LinkAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40035i32);
                pub const IsActiveAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40036i32);
                pub const SelectionActiveEndAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40037i32);
                pub const CaretPositionAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40038i32);
                pub const CaretBidiModeAttribute: AutomationTextAttributesEnum =
                    AutomationTextAttributesEnum(40039i32);
            }
            impl ::std::convert::From<i32> for AutomationTextAttributesEnum {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for AutomationTextAttributesEnum {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for AutomationTextAttributesEnum {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.AutomationTextAttributesEnum;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragUI(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragUI {
                type Vtable = IDragUI_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    765188152,
                    31840,
                    18498,
                    [145, 112, 52, 111, 225, 10, 34, 106],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragUI_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkView(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkView {
                type Vtable = IFrameworkView_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3719980619,
                    46595,
                    18346,
                    [148, 45, 56, 51, 23, 79, 13, 128],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkView_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISetterBase(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISetterBase {
                type Vtable = ISetterBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1099686524,
                    10948,
                    20258,
                    [128, 151, 222, 163, 174, 235, 47, 179],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISetterBase_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SetterBase(::windows::IInspectable);
            impl SetterBase {
                pub fn IsSealed(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SetterBase {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.SetterBase;{418be27c-2ac4-4f22-8097-dea3aeeb2fb3})",
                );
            }
            unsafe impl ::windows::Interface for SetterBase {
                type Vtable = ISetterBase_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1099686524,
                    10948,
                    20258,
                    [128, 151, 222, 163, 174, 235, 47, 179],
                );
            }
            impl ::windows::RuntimeName for SetterBase {
                const NAME: &'static str = "Windows.UI.Xaml.SetterBase";
            }
            impl ::std::convert::From<SetterBase> for ::windows::IInspectable {
                fn from(value: SetterBase) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&SetterBase> for ::windows::IInspectable {
                fn from(value: &SetterBase) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SetterBase {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SetterBase {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<SetterBase> for DependencyObject {
                fn from(value: SetterBase) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&SetterBase> for DependencyObject {
                fn from(value: &SetterBase) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for SetterBase {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a SetterBase {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for SetterBase {}
            unsafe impl ::std::marker::Sync for SetterBase {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateManager(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateManager {
                type Vtable = IVisualStateManager_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1876598682,
                    28587,
                    16658,
                    [146, 88, 16, 6, 163, 195, 71, 110],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateManager_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateManagerProtected(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateManagerProtected {
                type Vtable = IVisualStateManagerProtected_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1262192192,
                    45239,
                    16460,
                    [158, 244, 217, 73, 100, 14, 36, 93],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateManagerProtected_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateManagerStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateManagerStatics {
                type Vtable = IVisualStateManagerStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    30468576,
                    55059,
                    16718,
                    [167, 78, 230, 62, 199, 172, 140, 61],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateManagerStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    obj: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    obj: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    obj: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisualStateManager(::windows::IInspectable);
            impl VisualStateManager {
                pub fn GetVisualStateGroups<'a>(
                    obj: impl ::windows::IntoParam<'a, FrameworkElement>,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVector<VisualStateGroup>,
                > {
                    Self::IVisualStateManagerStatics(|this| unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVector<
                            VisualStateGroup,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , obj . into_param ( ) . abi ( ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVector :: < VisualStateGroup > > ( result__ )
                    })
                }
                pub fn CustomVisualStateManagerProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IVisualStateManagerStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn GetCustomVisualStateManager<'a>(
                    obj: impl ::windows::IntoParam<'a, FrameworkElement>,
                ) -> ::windows::Result<VisualStateManager> {
                    Self::IVisualStateManagerStatics(|this| unsafe {
                        let mut result__: <VisualStateManager as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            obj.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<VisualStateManager>(result__)
                    })
                }
                pub fn SetCustomVisualStateManager<'a>(
                    obj: impl ::windows::IntoParam<'a, FrameworkElement>,
                    value: impl ::windows::IntoParam<'a, VisualStateManager>,
                ) -> ::windows::Result<()> {
                    Self::IVisualStateManagerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            obj.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    })
                }
                pub fn new() -> ::windows::Result<VisualStateManager> {
                    Self::IVisualStateManagerFactory(|this| unsafe {
                        let mut result__: <VisualStateManager as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<VisualStateManager>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IVisualStateManagerStatics<
                    R,
                    F: FnOnce(&IVisualStateManagerStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        VisualStateManager,
                        IVisualStateManagerStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IVisualStateManagerFactory<
                    R,
                    F: FnOnce(&IVisualStateManagerFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        VisualStateManager,
                        IVisualStateManagerFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for VisualStateManager {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.VisualStateManager;{6fda9f9a-6fab-4112-9258-1006a3c3476e})" ) ;
            }
            unsafe impl ::windows::Interface for VisualStateManager {
                type Vtable = IVisualStateManager_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1876598682,
                    28587,
                    16658,
                    [146, 88, 16, 6, 163, 195, 71, 110],
                );
            }
            impl ::windows::RuntimeName for VisualStateManager {
                const NAME: &'static str = "Windows.UI.Xaml.VisualStateManager";
            }
            impl ::std::convert::From<VisualStateManager> for ::windows::IInspectable {
                fn from(value: VisualStateManager) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VisualStateManager> for ::windows::IInspectable {
                fn from(value: &VisualStateManager) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VisualStateManager {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VisualStateManager {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<VisualStateManager> for DependencyObject {
                fn from(value: VisualStateManager) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&VisualStateManager> for DependencyObject {
                fn from(value: &VisualStateManager) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for VisualStateManager {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a VisualStateManager {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for VisualStateManager {}
            unsafe impl ::std::marker::Sync for VisualStateManager {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BindingFailedEventArgs(::windows::IInspectable);
            impl BindingFailedEventArgs {
                pub fn Message(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for BindingFailedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.BindingFailedEventArgs;{32c1d013-4dbd-446d-bbb8-0de35048a449})" ) ;
            }
            unsafe impl ::windows::Interface for BindingFailedEventArgs {
                type Vtable = IBindingFailedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    851562515,
                    19901,
                    17517,
                    [187, 184, 13, 227, 80, 72, 164, 73],
                );
            }
            impl ::windows::RuntimeName for BindingFailedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.BindingFailedEventArgs";
            }
            impl ::std::convert::From<BindingFailedEventArgs> for ::windows::IInspectable {
                fn from(value: BindingFailedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BindingFailedEventArgs> for ::windows::IInspectable {
                fn from(value: &BindingFailedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for BindingFailedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a BindingFailedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for BindingFailedEventArgs {}
            unsafe impl ::std::marker::Sync for BindingFailedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BindingFailedEventHandler(::windows::IUnknown);
            impl BindingFailedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<BindingFailedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = BindingFailedEventHandler_box::<F> {
                        vtable: &BindingFailedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, BindingFailedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for BindingFailedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({136b1782-54ba-420d-a1aa-82828721cde6})",
                );
            }
            unsafe impl ::windows::Interface for BindingFailedEventHandler {
                type Vtable = BindingFailedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    325785474,
                    21690,
                    16909,
                    [161, 170, 130, 130, 135, 33, 205, 230],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct BindingFailedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct BindingFailedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<BindingFailedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const BindingFailedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<BindingFailedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > BindingFailedEventHandler_box<F>
            {
                const VTABLE: BindingFailedEventHandler_abi = BindingFailedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<BindingFailedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < BindingFailedEventArgs as :: windows :: Abi > :: Abi as * const < BindingFailedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplication(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplication {
                type Vtable = IApplication_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1958240673,
                    29831,
                    18089,
                    [154, 110, 199, 139, 81, 39, 38, 197],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplication_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ApplicationTheme,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ApplicationTheme,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplication2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplication2 {
                type Vtable = IApplication2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    26281150,
                    21034,
                    22788,
                    [245, 47, 222, 114, 1, 4, 41, 224],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplication2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut FocusVisualKind,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: FocusVisualKind,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ApplicationRequiresPointerMode,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ApplicationRequiresPointerMode,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplication3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplication3 {
                type Vtable = IApplication3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3077942652,
                    6328,
                    17866,
                    [161, 176, 220, 72, 62, 75, 16, 40],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplication3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ApplicationHighContrastAdjustment,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ApplicationHighContrastAdjustment,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplicationOverrides(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplicationOverrides {
                type Vtable = IApplicationOverrides_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    637116407,
                    37703,
                    17818,
                    [159, 172, 178, 208, 225, 28, 26, 15],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplicationOverrides_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplicationFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplicationFactory {
                type Vtable = IApplicationFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2478564193,
                    48730,
                    20195,
                    [180, 163, 149, 17, 141, 201, 122, 137],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplicationFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplicationStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplicationStatics {
                type Vtable = IApplicationStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    105486743,
                    63412,
                    17918,
                    [183, 99, 117, 119, 209, 211, 203, 74],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplicationStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    callback: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct Application(::windows::IInspectable);
            impl Application {
                pub fn Resources(&self) -> ::windows::Result<ResourceDictionary> {
                    let this = self;
                    unsafe {
                        let mut result__: <ResourceDictionary as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ResourceDictionary>(result__)
                    }
                }
                pub fn SetResources<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ResourceDictionary>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DebugSettings(&self) -> ::windows::Result<DebugSettings> {
                    let this = self;
                    unsafe {
                        let mut result__: <DebugSettings as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DebugSettings>(result__)
                    }
                }
                pub fn RequestedTheme(&self) -> ::windows::Result<ApplicationTheme> {
                    let this = self;
                    unsafe {
                        let mut result__: <ApplicationTheme as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationTheme>(result__)
                    }
                }
                pub fn SetRequestedTheme(&self, value: ApplicationTheme) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn UnhandledException<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, UnhandledExceptionEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveUnhandledException<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Suspending<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, SuspendingEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveSuspending<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveResuming<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Exit(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn OnActivated<'a>(
                    &self,
                    args: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::Activation::IActivatedEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnLaunched<'a>(
                    &self,
                    args: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::Activation::LaunchActivatedEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnFileActivated<'a>(
                    &self,
                    args: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::Activation::FileActivatedEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnSearchActivated<'a>(
                    &self,
                    args: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::Activation::SearchActivatedEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnShareTargetActivated<'a>(
                    &self,
                    args: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::Activation::ShareTargetActivatedEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnFileOpenPickerActivated<'a>(
                    &self,
                    args : impl :: windows :: IntoParam < 'a , super :: super :: ApplicationModel :: Activation :: FileOpenPickerActivatedEventArgs >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnFileSavePickerActivated<'a>(
                    &self,
                    args : impl :: windows :: IntoParam < 'a , super :: super :: ApplicationModel :: Activation :: FileSavePickerActivatedEventArgs >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnCachedFileUpdaterActivated<'a>(
                    &self,
                    args : impl :: windows :: IntoParam < 'a , super :: super :: ApplicationModel :: Activation :: CachedFileUpdaterActivatedEventArgs >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnWindowCreated<'a>(
                    &self,
                    args: impl ::windows::IntoParam<'a, WindowCreatedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Current() -> ::windows::Result<Application> {
                    Self::IApplicationStatics(|this| unsafe {
                        let mut result__: <Application as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Application>(result__)
                    })
                }
                pub fn Start<'a>(
                    callback: impl ::windows::IntoParam<'a, ApplicationInitializationCallback>,
                ) -> ::windows::Result<()> {
                    Self::IApplicationStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            callback.into_param().abi(),
                        )
                        .ok()
                    })
                }
                pub fn new() -> ::windows::Result<Application> {
                    Self::IApplicationFactory(|this| unsafe {
                        let mut result__: <Application as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<Application>(result__)
                    })
                }
                pub fn FocusVisualKind(&self) -> ::windows::Result<FocusVisualKind> {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        let mut result__: <FocusVisualKind as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<FocusVisualKind>(result__)
                    }
                }
                pub fn SetFocusVisualKind(&self, value: FocusVisualKind) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RequiresPointerMode(
                    &self,
                ) -> ::windows::Result<ApplicationRequiresPointerMode> {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        let mut result__: <ApplicationRequiresPointerMode as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationRequiresPointerMode>(result__)
                    }
                }
                pub fn SetRequiresPointerMode(
                    &self,
                    value: ApplicationRequiresPointerMode,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn LeavingBackground<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, LeavingBackgroundEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveLeavingBackground<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn EnteredBackground<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, EnteredBackgroundEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveEnteredBackground<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplication2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnBackgroundActivated<'a>(
                    &self,
                    args: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::Activation::BackgroundActivatedEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplicationOverrides2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn HighContrastAdjustment(
                    &self,
                ) -> ::windows::Result<ApplicationHighContrastAdjustment> {
                    let this = &::windows::Interface::cast::<IApplication3>(self).unwrap();
                    unsafe {
                        let mut result__ : < ApplicationHighContrastAdjustment as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ApplicationHighContrastAdjustment>(result__)
                    }
                }
                pub fn SetHighContrastAdjustment(
                    &self,
                    value: ApplicationHighContrastAdjustment,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IApplication3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IApplicationStatics<
                    R,
                    F: FnOnce(&IApplicationStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<Application, IApplicationStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IApplicationFactory<
                    R,
                    F: FnOnce(&IApplicationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<Application, IApplicationFactory> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for Application {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.Application;{74b861a1-7487-46a9-9a6e-c78b512726c5})",
                );
            }
            unsafe impl ::windows::Interface for Application {
                type Vtable = IApplication_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1958240673,
                    29831,
                    18089,
                    [154, 110, 199, 139, 81, 39, 38, 197],
                );
            }
            impl ::windows::RuntimeName for Application {
                const NAME: &'static str = "Windows.UI.Xaml.Application";
            }
            impl ::std::convert::From<Application> for ::windows::IInspectable {
                fn from(value: Application) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&Application> for ::windows::IInspectable {
                fn from(value: &Application) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for Application {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a Application {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for Application {}
            unsafe impl ::std::marker::Sync for Application {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IGridLengthHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for IGridLengthHelper {
                type Vtable = IGridLengthHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2055367905,
                    1952,
                    16515,
                    [182, 209, 177, 217, 23, 185, 118, 172],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IGridLengthHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IGridLengthHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IGridLengthHelperStatics {
                type Vtable = IGridLengthHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2638576539,
                    415,
                    16998,
                    [136, 114, 33, 95, 25, 143, 106, 157],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IGridLengthHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut GridLength,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    pixels: f64,
                    result__: *mut GridLength,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                    r#type: GridUnitType,
                    result__: *mut GridLength,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: GridLength,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: GridLength,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: GridLength,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    target: GridLength,
                    value: GridLength,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct GridLengthHelper(::windows::IInspectable);
            impl GridLengthHelper {
                pub fn Auto() -> ::windows::Result<GridLength> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <GridLength as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<GridLength>(result__)
                    })
                }
                pub fn FromPixels(pixels: f64) -> ::windows::Result<GridLength> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <GridLength as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            pixels,
                            &mut result__,
                        )
                        .from_abi::<GridLength>(result__)
                    })
                }
                pub fn FromValueAndType(
                    value: f64,
                    r#type: GridUnitType,
                ) -> ::windows::Result<GridLength> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <GridLength as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            value,
                            r#type,
                            &mut result__,
                        )
                        .from_abi::<GridLength>(result__)
                    })
                }
                pub fn GetIsAbsolute<'a>(
                    target: impl ::windows::IntoParam<'a, GridLength>,
                ) -> ::windows::Result<bool> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    })
                }
                pub fn GetIsAuto<'a>(
                    target: impl ::windows::IntoParam<'a, GridLength>,
                ) -> ::windows::Result<bool> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    })
                }
                pub fn GetIsStar<'a>(
                    target: impl ::windows::IntoParam<'a, GridLength>,
                ) -> ::windows::Result<bool> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    })
                }
                pub fn Equals<'a>(
                    target: impl ::windows::IntoParam<'a, GridLength>,
                    value: impl ::windows::IntoParam<'a, GridLength>,
                ) -> ::windows::Result<bool> {
                    Self::IGridLengthHelperStatics(|this| unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            target.into_param().abi(),
                            value.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    })
                }
                pub fn IGridLengthHelperStatics<
                    R,
                    F: FnOnce(&IGridLengthHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        GridLengthHelper,
                        IGridLengthHelperStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for GridLengthHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.GridLengthHelper;{7a826ce1-07a0-4083-b6d1-b1d917b976ac})",
                );
            }
            unsafe impl ::windows::Interface for GridLengthHelper {
                type Vtable = IGridLengthHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2055367905,
                    1952,
                    16515,
                    [182, 209, 177, 217, 23, 185, 118, 172],
                );
            }
            impl ::windows::RuntimeName for GridLengthHelper {
                const NAME: &'static str = "Windows.UI.Xaml.GridLengthHelper";
            }
            impl ::std::convert::From<GridLengthHelper> for ::windows::IInspectable {
                fn from(value: GridLengthHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&GridLengthHelper> for ::windows::IInspectable {
                fn from(value: &GridLengthHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for GridLengthHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a GridLengthHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for GridLengthHelper {}
            unsafe impl ::std::marker::Sync for GridLengthHelper {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISizeChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISizeChangedEventArgs {
                type Vtable = ISizeChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3576770144,
                    23745,
                    17057,
                    [146, 12, 26, 244, 107, 226, 249, 134],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISizeChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SizeChangedEventArgs(::windows::IInspectable);
            impl SizeChangedEventArgs {
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SizeChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.SizeChangedEventArgs;{d5312e60-5cc1-42a1-920c-1af46be2f986})" ) ;
            }
            unsafe impl ::windows::Interface for SizeChangedEventArgs {
                type Vtable = ISizeChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3576770144,
                    23745,
                    17057,
                    [146, 12, 26, 244, 107, 226, 249, 134],
                );
            }
            impl ::windows::RuntimeName for SizeChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.SizeChangedEventArgs";
            }
            impl ::std::convert::From<SizeChangedEventArgs> for ::windows::IInspectable {
                fn from(value: SizeChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&SizeChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &SizeChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<SizeChangedEventArgs> for RoutedEventArgs {
                fn from(value: SizeChangedEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&SizeChangedEventArgs> for RoutedEventArgs {
                fn from(value: &SizeChangedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for SizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a SizeChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for SizeChangedEventArgs {}
            unsafe impl ::std::marker::Sync for SizeChangedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct TextLineBounds(pub i32);
            impl TextLineBounds {
                pub const Full: TextLineBounds = TextLineBounds(0i32);
                pub const TrimToCapHeight: TextLineBounds = TextLineBounds(1i32);
                pub const TrimToBaseline: TextLineBounds = TextLineBounds(2i32);
                pub const Tight: TextLineBounds = TextLineBounds(3i32);
            }
            impl ::std::convert::From<i32> for TextLineBounds {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for TextLineBounds {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for TextLineBounds {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.TextLineBounds;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragEventArgs {
                type Vtable = IDragEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3024144323,
                    692,
                    18816,
                    [147, 66, 37, 218, 225, 192, 241, 136],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragEventArgs2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragEventArgs2 {
                type Vtable = IDragEventArgs2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    640902744,
                    10519,
                    16669,
                    [191, 195, 47, 34, 71, 28, 187, 231],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragEventArgs2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragEventArgs3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragEventArgs3 {
                type Vtable = IDragEventArgs3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3494888390,
                    33049,
                    17018,
                    [129, 82, 95, 149, 80, 204, 4, 22],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragEventArgs3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DragEventArgs(::windows::IInspectable);
            impl DragEventArgs {
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn DragUIOverride(&self) -> ::windows::Result<DragUIOverride> {
                    let this = &::windows::Interface::cast::<IDragEventArgs2>(self).unwrap();
                    unsafe {
                        let mut result__: <DragUIOverride as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DragUIOverride>(result__)
                    }
                }
                pub fn GetDeferral(&self) -> ::windows::Result<DragOperationDeferral> {
                    let this = &::windows::Interface::cast::<IDragEventArgs2>(self).unwrap();
                    unsafe {
                        let mut result__: <DragOperationDeferral as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DragOperationDeferral>(result__)
                    }
                }
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DragEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DragEventArgs;{b440c7c3-02b4-4980-9342-25dae1c0f188})",
                );
            }
            unsafe impl ::windows::Interface for DragEventArgs {
                type Vtable = IDragEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3024144323,
                    692,
                    18816,
                    [147, 66, 37, 218, 225, 192, 241, 136],
                );
            }
            impl ::windows::RuntimeName for DragEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.DragEventArgs";
            }
            impl ::std::convert::From<DragEventArgs> for ::windows::IInspectable {
                fn from(value: DragEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DragEventArgs> for ::windows::IInspectable {
                fn from(value: &DragEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DragEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DragEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DragEventArgs> for RoutedEventArgs {
                fn from(value: DragEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&DragEventArgs> for RoutedEventArgs {
                fn from(value: &DragEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for DragEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a DragEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for DragEventArgs {}
            unsafe impl ::std::marker::Sync for DragEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ElementSoundKind(pub i32);
            impl ElementSoundKind {
                pub const Focus: ElementSoundKind = ElementSoundKind(0i32);
                pub const Invoke: ElementSoundKind = ElementSoundKind(1i32);
                pub const Show: ElementSoundKind = ElementSoundKind(2i32);
                pub const Hide: ElementSoundKind = ElementSoundKind(3i32);
                pub const MovePrevious: ElementSoundKind = ElementSoundKind(4i32);
                pub const MoveNext: ElementSoundKind = ElementSoundKind(5i32);
                pub const GoBack: ElementSoundKind = ElementSoundKind(6i32);
            }
            impl ::std::convert::From<i32> for ElementSoundKind {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ElementSoundKind {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ElementSoundKind {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ElementSoundKind;i4)",
                );
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FlowDirection(pub i32);
            impl FlowDirection {
                pub const LeftToRight: FlowDirection = FlowDirection(0i32);
                pub const RightToLeft: FlowDirection = FlowDirection(1i32);
            }
            impl ::std::convert::From<i32> for FlowDirection {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FlowDirection {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FlowDirection {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.FlowDirection;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementFactoryGetArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementFactoryGetArgs {
                type Vtable = IElementFactoryGetArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4216358772,
                    16803,
                    22569,
                    [146, 85, 207, 69, 45, 4, 29, 244],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementFactoryGetArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementFactoryGetArgsFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementFactoryGetArgsFactory {
                type Vtable = IElementFactoryGetArgsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3283540711,
                    34875,
                    24535,
                    [190, 128, 32, 89, 216, 119, 231, 131],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementFactoryGetArgsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ElementFactoryGetArgs(::windows::IInspectable);
            impl ElementFactoryGetArgs {
                pub fn Data(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetData<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Parent(&self) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn SetParent<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<ElementFactoryGetArgs> {
                    Self::IElementFactoryGetArgsFactory(|this| unsafe {
                        let mut result__: <ElementFactoryGetArgs as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<ElementFactoryGetArgs>(result__)
                    })
                }
                pub fn IElementFactoryGetArgsFactory<
                    R,
                    F: FnOnce(&IElementFactoryGetArgsFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ElementFactoryGetArgs,
                        IElementFactoryGetArgsFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ElementFactoryGetArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ElementFactoryGetArgs;{fb508774-41a3-5829-9255-cf452d041df4})" ) ;
            }
            unsafe impl ::windows::Interface for ElementFactoryGetArgs {
                type Vtable = IElementFactoryGetArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4216358772,
                    16803,
                    22569,
                    [146, 85, 207, 69, 45, 4, 29, 244],
                );
            }
            impl ::windows::RuntimeName for ElementFactoryGetArgs {
                const NAME: &'static str = "Windows.UI.Xaml.ElementFactoryGetArgs";
            }
            impl ::std::convert::From<ElementFactoryGetArgs> for ::windows::IInspectable {
                fn from(value: ElementFactoryGetArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ElementFactoryGetArgs> for ::windows::IInspectable {
                fn from(value: &ElementFactoryGetArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ElementFactoryGetArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ElementFactoryGetArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for ElementFactoryGetArgs {}
            unsafe impl ::std::marker::Sync for ElementFactoryGetArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVector3TransitionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVector3TransitionFactory {
                type Vtable = IVector3TransitionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3278923417,
                    61083,
                    20700,
                    [136, 7, 245, 29, 90, 117, 148, 149],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVector3TransitionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ElementHighContrastAdjustment(pub u32);
            impl ElementHighContrastAdjustment {
                pub const None: ElementHighContrastAdjustment = ElementHighContrastAdjustment(0u32);
                pub const Application: ElementHighContrastAdjustment =
                    ElementHighContrastAdjustment(2147483648u32);
                pub const Auto: ElementHighContrastAdjustment =
                    ElementHighContrastAdjustment(4294967295u32);
            }
            impl ::std::convert::From<u32> for ElementHighContrastAdjustment {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ElementHighContrastAdjustment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ElementHighContrastAdjustment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ElementHighContrastAdjustment;u4)",
                );
            }
            impl ::std::ops::BitOr for ElementHighContrastAdjustment {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for ElementHighContrastAdjustment {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
            impl ::std::ops::BitOrAssign for ElementHighContrastAdjustment {
                fn bitor_assign(&mut self, rhs: Self) {
                    self.0.bitor_assign(rhs.0)
                }
            }
            impl ::std::ops::BitAndAssign for ElementHighContrastAdjustment {
                fn bitand_assign(&mut self, rhs: Self) {
                    self.0.bitand_assign(rhs.0)
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDependencyPropertyChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDependencyPropertyChangedEventArgs {
                type Vtable = IDependencyPropertyChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2166434859,
                    9424,
                    18775,
                    [171, 195, 34, 68, 112, 169, 58, 78],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDependencyPropertyChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DependencyPropertyChangedEventArgs(::windows::IInspectable);
            impl DependencyPropertyChangedEventArgs {
                pub fn Property(&self) -> ::windows::Result<DependencyProperty> {
                    let this = self;
                    unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    }
                }
                pub fn OldValue(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn NewValue(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DependencyPropertyChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DependencyPropertyChangedEventArgs;{81212c2b-24d0-4957-abc3-224470a93a4e})" ) ;
            }
            unsafe impl ::windows::Interface for DependencyPropertyChangedEventArgs {
                type Vtable = IDependencyPropertyChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2166434859,
                    9424,
                    18775,
                    [171, 195, 34, 68, 112, 169, 58, 78],
                );
            }
            impl ::windows::RuntimeName for DependencyPropertyChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.DependencyPropertyChangedEventArgs";
            }
            impl ::std::convert::From<DependencyPropertyChangedEventArgs> for ::windows::IInspectable {
                fn from(value: DependencyPropertyChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DependencyPropertyChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &DependencyPropertyChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DependencyPropertyChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a DependencyPropertyChangedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DependencyPropertyChangedEventArgs {}
            unsafe impl ::std::marker::Sync for DependencyPropertyChangedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct PropertyChangedCallback(::windows::IUnknown);
            impl PropertyChangedCallback {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<DependencyObject>,
                            &::std::option::Option<DependencyPropertyChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = PropertyChangedCallback_box::<F> {
                        vtable: &PropertyChangedCallback_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    d: impl ::windows::IntoParam<'a, DependencyObject>,
                    e: impl ::windows::IntoParam<'a, DependencyPropertyChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            d.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for PropertyChangedCallback {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({5a9f8a25-d142-44a4-8231-fd676724f29b})",
                );
            }
            unsafe impl ::windows::Interface for PropertyChangedCallback {
                type Vtable = PropertyChangedCallback_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1520405029,
                    53570,
                    17572,
                    [130, 49, 253, 103, 103, 36, 242, 155],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct PropertyChangedCallback_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    d: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct PropertyChangedCallback_box<
                F: FnMut(
                        &::std::option::Option<DependencyObject>,
                        &::std::option::Option<DependencyPropertyChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const PropertyChangedCallback_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<DependencyObject>,
                            &::std::option::Option<DependencyPropertyChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > PropertyChangedCallback_box<F>
            {
                const VTABLE: PropertyChangedCallback_abi = PropertyChangedCallback_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<PropertyChangedCallback as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    d: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & d as * const < DependencyObject as :: windows :: Abi > :: Abi as * const < DependencyObject as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < DependencyPropertyChangedEventArgs as :: windows :: Abi > :: Abi as * const < DependencyPropertyChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ElementSoundMode(pub i32);
            impl ElementSoundMode {
                pub const Default: ElementSoundMode = ElementSoundMode(0i32);
                pub const FocusOnly: ElementSoundMode = ElementSoundMode(1i32);
                pub const Off: ElementSoundMode = ElementSoundMode(2i32);
            }
            impl ::std::convert::From<i32> for ElementSoundMode {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ElementSoundMode {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ElementSoundMode {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ElementSoundMode;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementSoundPlayer(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementSoundPlayer {
                type Vtable = IElementSoundPlayer_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    947352485,
                    61494,
                    17932,
                    [155, 129, 243, 214, 234, 67, 246, 242],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementSoundPlayer_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementSoundPlayerStatics2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementSoundPlayerStatics2 {
                type Vtable = IElementSoundPlayerStatics2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4065352022,
                    60737,
                    18647,
                    [170, 232, 242, 171, 203, 68, 73, 41],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementSoundPlayerStatics2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ElementSpatialAudioMode,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ElementSpatialAudioMode,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ElementSoundPlayer(::windows::IInspectable);
            impl ElementSoundPlayer {
                pub fn Volume() -> ::windows::Result<f64> {
                    Self::IElementSoundPlayerStatics(|this| unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    })
                }
                pub fn SetVolume(value: f64) -> ::windows::Result<()> {
                    Self::IElementSoundPlayerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    })
                }
                pub fn State() -> ::windows::Result<ElementSoundPlayerState> {
                    Self::IElementSoundPlayerStatics(|this| unsafe {
                        let mut result__: <ElementSoundPlayerState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ElementSoundPlayerState>(result__)
                    })
                }
                pub fn SetState(value: ElementSoundPlayerState) -> ::windows::Result<()> {
                    Self::IElementSoundPlayerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    })
                }
                pub fn Play(sound: ElementSoundKind) -> ::windows::Result<()> {
                    Self::IElementSoundPlayerStatics(|this| unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this), sound)
                            .ok()
                    })
                }
                pub fn SpatialAudioMode() -> ::windows::Result<ElementSpatialAudioMode> {
                    Self::IElementSoundPlayerStatics2(|this| unsafe {
                        let mut result__: <ElementSpatialAudioMode as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ElementSpatialAudioMode>(result__)
                    })
                }
                pub fn SetSpatialAudioMode(
                    value: ElementSpatialAudioMode,
                ) -> ::windows::Result<()> {
                    Self::IElementSoundPlayerStatics2(|this| unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    })
                }
                pub fn IElementSoundPlayerStatics<
                    R,
                    F: FnOnce(&IElementSoundPlayerStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ElementSoundPlayer,
                        IElementSoundPlayerStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IElementSoundPlayerStatics2<
                    R,
                    F: FnOnce(&IElementSoundPlayerStatics2) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ElementSoundPlayer,
                        IElementSoundPlayerStatics2,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ElementSoundPlayer {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ElementSoundPlayer;{387773a5-f036-460c-9b81-f3d6ea43f6f2})" ) ;
            }
            unsafe impl ::windows::Interface for ElementSoundPlayer {
                type Vtable = IElementSoundPlayer_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    947352485,
                    61494,
                    17932,
                    [155, 129, 243, 214, 234, 67, 246, 242],
                );
            }
            impl ::windows::RuntimeName for ElementSoundPlayer {
                const NAME: &'static str = "Windows.UI.Xaml.ElementSoundPlayer";
            }
            impl ::std::convert::From<ElementSoundPlayer> for ::windows::IInspectable {
                fn from(value: ElementSoundPlayer) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ElementSoundPlayer> for ::windows::IInspectable {
                fn from(value: &ElementSoundPlayer) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ElementSoundPlayer {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ElementSoundPlayer {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for ElementSoundPlayer {}
            unsafe impl ::std::marker::Sync for ElementSoundPlayer {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IResourceDictionary(::windows::IInspectable);
            unsafe impl ::windows::Interface for IResourceDictionary {
                type Vtable = IResourceDictionary_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3253358372,
                    55006,
                    16785,
                    [142, 58, 244, 134, 1, 247, 72, 156],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IResourceDictionary_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindow4(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindow4 {
                type Vtable = IWindow4_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3219241166,
                    27712,
                    20729,
                    [133, 76, 112, 33, 210, 188, 157, 230],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindow4_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ICornerRadiusHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICornerRadiusHelperStatics {
                type Vtable = ICornerRadiusHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4104255065,
                    54484,
                    17695,
                    [163, 135, 214, 191, 75, 36, 81, 212],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICornerRadiusHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    topleft: f64,
                    topright: f64,
                    bottomright: f64,
                    bottomleft: f64,
                    result__: *mut CornerRadius,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    uniformradius: f64,
                    result__: *mut CornerRadius,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkTemplate(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkTemplate {
                type Vtable = IFrameworkTemplate_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2715964632,
                    42054,
                    18983,
                    [154, 157, 160, 245, 158, 18, 88, 165],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkTemplate_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElement3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElement3 {
                type Vtable = IFrameworkElement3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3357288224,
                    23634,
                    19390,
                    [161, 153, 43, 30, 52, 240, 15, 112],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElement3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindowStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindowStatics {
                type Vtable = IWindowStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2469561353,
                    20129,
                    19194,
                    [131, 220, 12, 78, 115, 232, 139, 177],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindowStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics6(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementStatics6 {
                type Vtable = IFrameworkElementStatics6_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4240528026,
                    27099,
                    17794,
                    [167, 190, 207, 106, 28, 253, 172, 208],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics6_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualStateGroup(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualStateGroup {
                type Vtable = IVisualStateGroup_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3841579428,
                    57384,
                    17630,
                    [155, 21, 73, 41, 174, 10, 38, 194],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualStateGroup_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisualStateGroup(::windows::IInspectable);
            impl VisualStateGroup {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        VisualStateGroup,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn Name(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn Transitions(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVector<VisualTransition>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVector<
                            VisualTransition,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .7 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVector :: < VisualTransition > > ( result__ )
                    }
                }
                pub fn States(
                    &self,
                ) -> ::windows::Result<super::super::Foundation::Collections::IVector<VisualState>>
                {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVector<
                            VisualState,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IVector<VisualState>>(
                            result__,
                        )
                    }
                }
                pub fn CurrentState(&self) -> ::windows::Result<VisualState> {
                    let this = self;
                    unsafe {
                        let mut result__: <VisualState as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<VisualState>(result__)
                    }
                }
                pub fn CurrentStateChanged<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, VisualStateChangedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveCurrentStateChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn CurrentStateChanging<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, VisualStateChangedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveCurrentStateChanging<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for VisualStateGroup {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.VisualStateGroup;{e4f9d9a4-e028-44de-9b15-4929ae0a26c2})",
                );
            }
            unsafe impl ::windows::Interface for VisualStateGroup {
                type Vtable = IVisualStateGroup_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3841579428,
                    57384,
                    17630,
                    [155, 21, 73, 41, 174, 10, 38, 194],
                );
            }
            impl ::windows::RuntimeName for VisualStateGroup {
                const NAME: &'static str = "Windows.UI.Xaml.VisualStateGroup";
            }
            impl ::std::convert::From<VisualStateGroup> for ::windows::IInspectable {
                fn from(value: VisualStateGroup) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VisualStateGroup> for ::windows::IInspectable {
                fn from(value: &VisualStateGroup) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VisualStateGroup {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VisualStateGroup {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<VisualStateGroup> for DependencyObject {
                fn from(value: VisualStateGroup) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&VisualStateGroup> for DependencyObject {
                fn from(value: &VisualStateGroup) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for VisualStateGroup {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a VisualStateGroup {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for VisualStateGroup {}
            unsafe impl ::std::marker::Sync for VisualStateGroup {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualTransition(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualTransition {
                type Vtable = IVisualTransition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1439010910,
                    11207,
                    16397,
                    [170, 164, 26, 41, 129, 73, 30, 224],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualTransition_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Duration,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Duration,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IVisualTransitionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IVisualTransitionFactory {
                type Vtable = IVisualTransitionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3933570639,
                    53728,
                    19886,
                    [180, 41, 137, 252, 50, 39, 36, 244],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IVisualTransitionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisualTransition(::windows::IInspectable);
            impl VisualTransition {
                pub fn GeneratedDuration(&self) -> ::windows::Result<Duration> {
                    let this = self;
                    unsafe {
                        let mut result__: <Duration as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Duration>(result__)
                    }
                }
                pub fn SetGeneratedDuration<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Duration>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn To(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetTo<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn From(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetFrom<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<VisualTransition> {
                    Self::IVisualTransitionFactory(|this| unsafe {
                        let mut result__: <VisualTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<VisualTransition>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IVisualTransitionFactory<
                    R,
                    F: FnOnce(&IVisualTransitionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        VisualTransition,
                        IVisualTransitionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for VisualTransition {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.VisualTransition;{55c5905e-2bc7-400d-aaa4-1a2981491ee0})",
                );
            }
            unsafe impl ::windows::Interface for VisualTransition {
                type Vtable = IVisualTransition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1439010910,
                    11207,
                    16397,
                    [170, 164, 26, 41, 129, 73, 30, 224],
                );
            }
            impl ::windows::RuntimeName for VisualTransition {
                const NAME: &'static str = "Windows.UI.Xaml.VisualTransition";
            }
            impl ::std::convert::From<VisualTransition> for ::windows::IInspectable {
                fn from(value: VisualTransition) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&VisualTransition> for ::windows::IInspectable {
                fn from(value: &VisualTransition) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for VisualTransition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a VisualTransition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<VisualTransition> for DependencyObject {
                fn from(value: VisualTransition) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&VisualTransition> for DependencyObject {
                fn from(value: &VisualTransition) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for VisualTransition {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a VisualTransition {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for VisualTransition {}
            unsafe impl ::std::marker::Sync for VisualTransition {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IApplicationInitializationCallbackParams(::windows::IInspectable);
            unsafe impl ::windows::Interface for IApplicationInitializationCallbackParams {
                type Vtable = IApplicationInitializationCallbackParams_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1964734766,
                    22386,
                    17544,
                    [139, 135, 245, 71, 250, 166, 68, 116],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IApplicationInitializationCallbackParams_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ApplicationInitializationCallbackParams(::windows::IInspectable);
            impl ApplicationInitializationCallbackParams {}
            unsafe impl ::windows::RuntimeType for ApplicationInitializationCallbackParams {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ApplicationInitializationCallbackParams;{751b792e-5772-4488-8b87-f547faa64474})" ) ;
            }
            unsafe impl ::windows::Interface for ApplicationInitializationCallbackParams {
                type Vtable = IApplicationInitializationCallbackParams_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1964734766,
                    22386,
                    17544,
                    [139, 135, 245, 71, 250, 166, 68, 116],
                );
            }
            impl ::windows::RuntimeName for ApplicationInitializationCallbackParams {
                const NAME: &'static str =
                    "Windows.UI.Xaml.ApplicationInitializationCallbackParams";
            }
            impl ::std::convert::From<ApplicationInitializationCallbackParams> for ::windows::IInspectable {
                fn from(value: ApplicationInitializationCallbackParams) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ApplicationInitializationCallbackParams> for ::windows::IInspectable {
                fn from(value: &ApplicationInitializationCallbackParams) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for ApplicationInitializationCallbackParams
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a ApplicationInitializationCallbackParams
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for ApplicationInitializationCallbackParams {}
            unsafe impl ::std::marker::Sync for ApplicationInitializationCallbackParams {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FocusVisualKind(pub i32);
            impl FocusVisualKind {
                pub const DottedLine: FocusVisualKind = FocusVisualKind(0i32);
                pub const HighVisibility: FocusVisualKind = FocusVisualKind(1i32);
                pub const Reveal: FocusVisualKind = FocusVisualKind(2i32);
            }
            impl ::std::convert::From<i32> for FocusVisualKind {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FocusVisualKind {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FocusVisualKind {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.FocusVisualKind;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElement(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElement {
                type Vtable = IFrameworkElement_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2744242331,
                    19097,
                    19324,
                    [157, 141, 111, 165, 208, 31, 111, 191],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElement_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut HorizontalAlignment,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: HorizontalAlignment,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut VerticalAlignment,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: VerticalAlignment,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut FlowDirection,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: FlowDirection,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    name: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElement4(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElement4 {
                type Vtable = IFrameworkElement4_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1802918835,
                    64419,
                    17412,
                    [189, 238, 26, 69, 209, 202, 95, 33],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElement4_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: Thickness,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElement6(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElement6 {
                type Vtable = IFrameworkElement6_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2032819601,
                    25249,
                    16575,
                    [160, 206, 249, 193, 49, 252, 183, 167],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElement6_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ElementTheme,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElement7(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElement7 {
                type Vtable = IFrameworkElement7_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    576948332,
                    49257,
                    22287,
                    [185, 204, 158, 33, 221, 2, 141, 142],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElement7_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementProtected7(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementProtected7 {
                type Vtable = IFrameworkElementProtected7_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1705641088,
                    8931,
                    20739,
                    [173, 42, 182, 38, 248, 140, 165, 174],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementProtected7_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementOverrides(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementOverrides {
                type Vtable = IFrameworkElementOverrides_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3657465428,
                    46018,
                    19354,
                    [170, 142, 211, 240, 113, 38, 43, 151],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementOverrides_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementOverrides2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementOverrides2 {
                type Vtable = IFrameworkElementOverrides2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3411858105,
                    58292,
                    17804,
                    [182, 78, 20, 52, 253, 27, 216, 138],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementOverrides2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    statename: ::windows::RawPtr,
                    usetransitions: bool,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementStatics {
                type Vtable = IFrameworkElementStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1211641906,
                    64491,
                    20362,
                    [174, 210, 238, 33, 251, 39, 165, 123],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementFactory {
                type Vtable = IFrameworkElementFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3736002854,
                    970,
                    18790,
                    [181, 118, 96, 76, 206, 147, 181, 232],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementStatics2 {
                type Vtable = IFrameworkElementStatics2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2526403330,
                    49368,
                    20386,
                    [177, 0, 63, 162, 223, 139, 149, 56],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics5(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementStatics5 {
                type Vtable = IFrameworkElementStatics5_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1381841217,
                    2876,
                    19430,
                    [153, 120, 25, 168, 2, 92, 9, 216],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics5_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    element: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics4(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkElementStatics4 {
                type Vtable = IFrameworkElementStatics4_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2621550933,
                    50648,
                    18019,
                    [191, 242, 216, 213, 79, 181, 219, 179],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkElementStatics4_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FrameworkElement(::windows::IInspectable);
            impl FrameworkElement {
                pub fn Triggers(&self) -> ::windows::Result<TriggerCollection> {
                    let this = self;
                    unsafe {
                        let mut result__: <TriggerCollection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<TriggerCollection>(result__)
                    }
                }
                pub fn Resources(&self) -> ::windows::Result<ResourceDictionary> {
                    let this = self;
                    unsafe {
                        let mut result__: <ResourceDictionary as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ResourceDictionary>(result__)
                    }
                }
                pub fn SetResources<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ResourceDictionary>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Tag(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetTag<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Language(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetLanguage<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ActualWidth(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn ActualHeight(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn Width(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetWidth(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).16)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Height(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetHeight(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).18)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn MinWidth(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetMinWidth(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn MaxWidth(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetMaxWidth(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).22)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn MinHeight(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetMinHeight(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).24)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn MaxHeight(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).25)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetMaxHeight(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).26)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn HorizontalAlignment(&self) -> ::windows::Result<HorizontalAlignment> {
                    let this = self;
                    unsafe {
                        let mut result__: <HorizontalAlignment as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).27)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<HorizontalAlignment>(result__)
                    }
                }
                pub fn SetHorizontalAlignment(
                    &self,
                    value: HorizontalAlignment,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).28)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn VerticalAlignment(&self) -> ::windows::Result<VerticalAlignment> {
                    let this = self;
                    unsafe {
                        let mut result__: <VerticalAlignment as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).29)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<VerticalAlignment>(result__)
                    }
                }
                pub fn SetVerticalAlignment(
                    &self,
                    value: VerticalAlignment,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).30)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Margin(&self) -> ::windows::Result<Thickness> {
                    let this = self;
                    unsafe {
                        let mut result__: <Thickness as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).31)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Thickness>(result__)
                    }
                }
                pub fn SetMargin<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Thickness>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Name(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).33)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetName<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DataContext(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).36)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetDataContext<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).37)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Style(&self) -> ::windows::Result<Style> {
                    let this = self;
                    unsafe {
                        let mut result__: <Style as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).38)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Style>(result__)
                    }
                }
                pub fn SetStyle<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Style>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).39)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Parent(&self) -> ::windows::Result<DependencyObject> {
                    let this = self;
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).40)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn FlowDirection(&self) -> ::windows::Result<FlowDirection> {
                    let this = self;
                    unsafe {
                        let mut result__: <FlowDirection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).41)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<FlowDirection>(result__)
                    }
                }
                pub fn SetFlowDirection(&self, value: FlowDirection) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).42)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Loaded<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, RoutedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).43)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveLoaded<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).44)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Unloaded<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, RoutedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).45)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveUnloaded<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).46)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn SizeChanged<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, SizeChangedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).47)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveSizeChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).48)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveLayoutUpdated<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).50)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn FindName<'a>(
                    &self,
                    name: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).51)(
                            ::windows::Abi::abi(this),
                            name.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RequestedTheme(&self) -> ::windows::Result<ElementTheme> {
                    let this = &::windows::Interface::cast::<IFrameworkElement2>(self).unwrap();
                    unsafe {
                        let mut result__: <ElementTheme as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ElementTheme>(result__)
                    }
                }
                pub fn SetRequestedTheme(&self, value: ElementTheme) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveDataContextChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveLoading<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnApplyTemplate(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IFrameworkElementOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GoToElementStateCore<'a>(
                    &self,
                    statename: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                    usetransitions: bool,
                ) -> ::windows::Result<bool> {
                    let this =
                        &::windows::Interface::cast::<IFrameworkElementOverrides2>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            statename.into_param().abi(),
                            usetransitions,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn TagProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn LanguageProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ActualWidthProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn ActualHeightProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn WidthProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn HeightProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn MinWidthProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn MaxWidthProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn MinHeightProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn MaxHeightProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn HorizontalAlignmentProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn VerticalAlignmentProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn MarginProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn NameProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn DataContextProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn StyleProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn FlowDirectionProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).22)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn RequestedThemeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics2(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn AllowFocusOnInteraction(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn FocusVisualMargin(&self) -> ::windows::Result<Thickness> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <Thickness as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Thickness>(result__)
                    }
                }
                pub fn SetFocusVisualMargin<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Thickness>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn FocusVisualSecondaryThickness(&self) -> ::windows::Result<Thickness> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <Thickness as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Thickness>(result__)
                    }
                }
                pub fn SetFocusVisualSecondaryThickness<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Thickness>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn FocusVisualPrimaryThickness(&self) -> ::windows::Result<Thickness> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <Thickness as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Thickness>(result__)
                    }
                }
                pub fn SetFocusVisualPrimaryThickness<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Thickness>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AllowFocusWhenDisabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).19)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn AllowFocusOnInteractionProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn FocusVisualMarginProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn FocusVisualSecondaryThicknessProperty(
                ) -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn FocusVisualPrimaryThicknessProperty() -> ::windows::Result<DependencyProperty>
                {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn FocusVisualSecondaryBrushProperty() -> ::windows::Result<DependencyProperty>
                {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn FocusVisualPrimaryBrushProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn AllowFocusWhenDisabledProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics4(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn DeferTree<'a>(
                    element: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    Self::IFrameworkElementStatics5(|this| unsafe {
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            element.into_param().abi(),
                        )
                        .ok()
                    })
                }
                pub fn ActualTheme(&self) -> ::windows::Result<ElementTheme> {
                    let this = &::windows::Interface::cast::<IFrameworkElement6>(self).unwrap();
                    unsafe {
                        let mut result__: <ElementTheme as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ElementTheme>(result__)
                    }
                }
                pub fn RemoveActualThemeChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement6>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ActualThemeProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IFrameworkElementStatics6(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn IsLoaded(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IFrameworkElement7>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn RemoveEffectiveViewportChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IFrameworkElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InvalidateViewport(&self) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IFrameworkElementProtected7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn AllowDrop(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAllowDrop(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Opacity(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetOpacity(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsHitTestVisible(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).20)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn Visibility(&self) -> ::windows::Result<Visibility> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <Visibility as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Visibility>(result__)
                    }
                }
                pub fn SetVisibility(&self, value: Visibility) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).22)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn UseLayoutRounding(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).24)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).25)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsTapEnabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).31)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsDoubleTapEnabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).33)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsRightTapEnabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).35)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsHoldingEnabled(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).36)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).37)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveKeyUp<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).42)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveKeyDown<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).44)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn GotFocus<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, RoutedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).45)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveGotFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).46)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn LostFocus<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, RoutedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).47)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveLostFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).48)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DragEnter<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).49)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDragEnter<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).50)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DragLeave<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).51)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDragLeave<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).52)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn DragOver<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).53)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDragOver<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).54)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Drop<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, DragEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).55)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveDrop<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).56)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerPressed<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).58)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerMoved<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).60)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerReleased<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).62)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerEntered<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).64)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerExited<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).66)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerCaptureLost<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).68)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerCanceled<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).70)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePointerWheelChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).72)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveTapped<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).74)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveDoubleTapped<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).76)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveHolding<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).78)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveRightTapped<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).80)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationStarting<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).82)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationInertiaStarting<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).84)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationStarted<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).86)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationDelta<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).88)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveManipulationCompleted<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).90)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReleasePointerCaptures(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).95)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn AddHandler<'a>(
                    &self,
                    routedevent: impl ::windows::IntoParam<'a, RoutedEvent>,
                    handler: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    handledeventstoo: bool,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).96)(
                            ::windows::Abi::abi(this),
                            routedevent.into_param().abi(),
                            handler.into_param().abi(),
                            handledeventstoo,
                        )
                        .ok()
                    }
                }
                pub fn RemoveHandler<'a>(
                    &self,
                    routedevent: impl ::windows::IntoParam<'a, RoutedEvent>,
                    handler: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).97)(
                            ::windows::Abi::abi(this),
                            routedevent.into_param().abi(),
                            handler.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InvalidateMeasure(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).99)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn InvalidateArrange(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).100)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn UpdateLayout(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).101)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn CancelDirectManipulations(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement2>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn CanDrag(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetCanDrag(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveDragStarting<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveDropCompleted<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement3>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnDisconnectVisualChildren(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElementOverrides>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetExitDisplayModeOnAccessKeyInvoked(
                    &self,
                    value: bool,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn IsAccessKeyScope(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn AccessKeyScopeOwner(&self) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn SetAccessKeyScopeOwner<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn AccessKey(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn SetAccessKey<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveContextRequested<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveContextCanceled<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAccessKeyDisplayRequested<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAccessKeyDisplayDismissed<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAccessKeyInvoked<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement4>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).25)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn KeyTipHorizontalOffset(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn KeyTipVerticalOffset(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn HighContrastAdjustment(
                    &self,
                ) -> ::windows::Result<ElementHighContrastAdjustment> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        let mut result__: <ElementHighContrastAdjustment as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).23)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ElementHighContrastAdjustment>(result__)
                    }
                }
                pub fn SetHighContrastAdjustment(
                    &self,
                    value: ElementHighContrastAdjustment,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).24)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RemoveGettingFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).28)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveLosingFocus<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).30)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveNoFocusCandidateFound<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).32)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn StartBringIntoView(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).33)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn StartBringIntoViewWithOptions<'a>(
                    &self,
                    options: impl ::windows::IntoParam<'a, BringIntoViewOptions>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement5>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).34)(
                            ::windows::Abi::abi(this),
                            options.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveCharacterReceived<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveProcessKeyboardAccelerators<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePreviewKeyDown<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemovePreviewKeyUp<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement7>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn GetChildrenInTabFocusOrder(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IIterable<DependencyObject>,
                > {
                    let this = &::windows::Interface::cast::<IUIElementOverrides7>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterable<
                            DependencyObject,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IIterable :: < DependencyObject > > ( result__ )
                    }
                }
                pub fn KeyTipTarget(&self) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn SetKeyTipTarget<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn KeyboardAcceleratorPlacementTarget(
                    &self,
                ) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn SetKeyboardAcceleratorPlacementTarget<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveBringIntoViewRequested<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn OnBringIntoViewRequested<'a>(
                    &self,
                    e: impl ::windows::IntoParam<'a, BringIntoViewRequestedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElementOverrides8>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn CanBeScrollAnchor(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn OpacityTransition(&self) -> ::windows::Result<ScalarTransition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <ScalarTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ScalarTransition>(result__)
                    }
                }
                pub fn SetOpacityTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ScalarTransition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn TranslationTransition(&self) -> ::windows::Result<Vector3Transition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <Vector3Transition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Vector3Transition>(result__)
                    }
                }
                pub fn SetTranslationTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Vector3Transition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Rotation(&self) -> ::windows::Result<f32> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f32>(result__)
                    }
                }
                pub fn SetRotation(&self, value: f32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn RotationTransition(&self) -> ::windows::Result<ScalarTransition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <ScalarTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<ScalarTransition>(result__)
                    }
                }
                pub fn SetRotationTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ScalarTransition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ScaleTransition(&self) -> ::windows::Result<Vector3Transition> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        let mut result__: <Vector3Transition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).20)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Vector3Transition>(result__)
                    }
                }
                pub fn SetScaleTransition<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Vector3Transition>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement9>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).21)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn XamlRoot(&self) -> ::windows::Result<XamlRoot> {
                    let this = &::windows::Interface::cast::<IUIElement10>(self).unwrap();
                    unsafe {
                        let mut result__: <XamlRoot as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<XamlRoot>(result__)
                    }
                }
                pub fn SetXamlRoot<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, XamlRoot>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IUIElement10>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn IFrameworkElementStatics<
                    R,
                    F: FnOnce(&IFrameworkElementStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkElement,
                        IFrameworkElementStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IFrameworkElementStatics2<
                    R,
                    F: FnOnce(&IFrameworkElementStatics2) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkElement,
                        IFrameworkElementStatics2,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IFrameworkElementStatics4<
                    R,
                    F: FnOnce(&IFrameworkElementStatics4) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkElement,
                        IFrameworkElementStatics4,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IFrameworkElementStatics5<
                    R,
                    F: FnOnce(&IFrameworkElementStatics5) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkElement,
                        IFrameworkElementStatics5,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IFrameworkElementStatics6<
                    R,
                    F: FnOnce(&IFrameworkElementStatics6) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkElement,
                        IFrameworkElementStatics6,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for FrameworkElement {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.FrameworkElement;{a391d09b-4a99-4b7c-9d8d-6fa5d01f6fbf})",
                );
            }
            unsafe impl ::windows::Interface for FrameworkElement {
                type Vtable = IFrameworkElement_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2744242331,
                    19097,
                    19324,
                    [157, 141, 111, 165, 208, 31, 111, 191],
                );
            }
            impl ::windows::RuntimeName for FrameworkElement {
                const NAME: &'static str = "Windows.UI.Xaml.FrameworkElement";
            }
            impl ::std::convert::From<FrameworkElement> for ::windows::IInspectable {
                fn from(value: FrameworkElement) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FrameworkElement> for ::windows::IInspectable {
                fn from(value: &FrameworkElement) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FrameworkElement> for super::Composition::IAnimationObject {
                fn from(value: FrameworkElement) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FrameworkElement> for super::Composition::IAnimationObject {
                fn from(value: &FrameworkElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IAnimationObject> for FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IAnimationObject> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IAnimationObject,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IAnimationObject> for &'a FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IAnimationObject> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IAnimationObject,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FrameworkElement> for super::Composition::IVisualElement {
                fn from(value: FrameworkElement) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FrameworkElement> for super::Composition::IVisualElement {
                fn from(value: &FrameworkElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IVisualElement> for FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IVisualElement> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IVisualElement,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::Composition::IVisualElement> for &'a FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, super::Composition::IVisualElement> {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::Composition::IVisualElement,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<FrameworkElement> for UIElement {
                fn from(value: FrameworkElement) -> Self {
                    ::std::convert::Into::<UIElement>::into(&value)
                }
            }
            impl ::std::convert::From<&FrameworkElement> for UIElement {
                fn from(value: &FrameworkElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, UIElement> for FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, UIElement> {
                    ::windows::Param::Owned(::std::convert::Into::<UIElement>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, UIElement> for &'a FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, UIElement> {
                    ::windows::Param::Owned(::std::convert::Into::<UIElement>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<FrameworkElement> for DependencyObject {
                fn from(value: FrameworkElement) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&FrameworkElement> for DependencyObject {
                fn from(value: &FrameworkElement) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a FrameworkElement {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for FrameworkElement {}
            unsafe impl ::std::marker::Sync for FrameworkElement {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct DurationType(pub i32);
            impl DurationType {
                pub const Automatic: DurationType = DurationType(0i32);
                pub const TimeSpan: DurationType = DurationType(1i32);
                pub const Forever: DurationType = DurationType(2i32);
            }
            impl ::std::convert::From<i32> for DurationType {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for DurationType {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for DurationType {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.DurationType;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct RoutedEventHandler(::windows::IUnknown);
            impl RoutedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<RoutedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = RoutedEventHandler_box::<F> {
                        vtable: &RoutedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, RoutedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for RoutedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({a856e674-b0b6-4bc3-bba8-1ba06e40d4b5})",
                );
            }
            unsafe impl ::windows::Interface for RoutedEventHandler {
                type Vtable = RoutedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2824267380,
                    45238,
                    19395,
                    [187, 168, 27, 160, 110, 64, 212, 181],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct RoutedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct RoutedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<RoutedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const RoutedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<RoutedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > RoutedEventHandler_box<F>
            {
                const VTABLE: RoutedEventHandler_abi = RoutedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<RoutedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < RoutedEventArgs as :: windows :: Abi > :: Abi as * const < RoutedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IRectHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for IRectHelper {
                type Vtable = IRectHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2743566818,
                    19451,
                    20194,
                    [175, 229, 137, 243, 27, 55, 71, 141],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRectHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DependencyObjectCollection(::windows::IInspectable);
            impl DependencyObjectCollection {
                pub fn VectorChanged<'a>(
                    &self,
                    vhnd: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::Collections::VectorChangedEventHandler<
                            DependencyObject,
                        >,
                    >,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            vhnd.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveVectorChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn First(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IIterator<DependencyObject>,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            DependencyObject,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IIterator :: < DependencyObject > > ( result__ )
                    }
                }
                pub fn GetAt(&self, index: u32) -> ::windows::Result<DependencyObject> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVectorView<DependencyObject>,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVectorView<
                            DependencyObject,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVectorView :: < DependencyObject > > ( result__ )
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyObject>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<DependencyObject as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<DependencyObject as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<DependencyObjectCollection> {
                    Self::IDependencyObjectCollectionFactory(|this| unsafe {
                        let mut result__: <DependencyObjectCollection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<DependencyObjectCollection>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IDependencyObjectCollectionFactory<
                    R,
                    F: FnOnce(&IDependencyObjectCollectionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        DependencyObjectCollection,
                        IDependencyObjectCollectionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for DependencyObjectCollection {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DependencyObjectCollection;pinterface({5917eb53-50b4-4a0d-b309-65862b3f1dbc};rc(Windows.UI.Xaml.DependencyObject;{5c526665-f60e-4912-af59-5fe0680f089d})))" ) ;
            }
            unsafe impl ::windows::Interface for DependencyObjectCollection {
                type Vtable =
                    super::super::Foundation::Collections::IObservableVector_abi<DependencyObject>;
                const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < super :: super :: Foundation :: Collections :: IObservableVector :: < DependencyObject > as :: windows :: RuntimeType > :: SIGNATURE ) ;
            }
            impl ::windows::RuntimeName for DependencyObjectCollection {
                const NAME: &'static str = "Windows.UI.Xaml.DependencyObjectCollection";
            }
            impl ::std::convert::From<DependencyObjectCollection> for ::windows::IInspectable {
                fn from(value: DependencyObjectCollection) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DependencyObjectCollection> for ::windows::IInspectable {
                fn from(value: &DependencyObjectCollection) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DependencyObjectCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DependencyObjectCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DependencyObjectCollection>
                for super::super::Foundation::Collections::IObservableVector<DependencyObject>
            {
                fn from(value: DependencyObjectCollection) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&DependencyObjectCollection>
                for super::super::Foundation::Collections::IObservableVector<DependencyObject>
            {
                fn from(value: &DependencyObjectCollection) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IObservableVector<DependencyObject>,
                > for DependencyObjectCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IObservableVector<DependencyObject>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IObservableVector<DependencyObject>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IObservableVector<DependencyObject>,
                > for &'a DependencyObjectCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IObservableVector<DependencyObject>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IObservableVector<DependencyObject>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DependencyObjectCollection>
                for super::super::Foundation::Collections::IIterable<DependencyObject>
            {
                fn from(value: DependencyObjectCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DependencyObjectCollection>
                for super::super::Foundation::Collections::IIterable<DependencyObject>
            {
                fn from(value: &DependencyObjectCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<DependencyObject>,
                > for DependencyObjectCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<DependencyObject>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<DependencyObject>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<DependencyObject>,
                > for &'a DependencyObjectCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<DependencyObject>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<DependencyObject>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DependencyObjectCollection>
                for super::super::Foundation::Collections::IVector<DependencyObject>
            {
                fn from(value: DependencyObjectCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DependencyObjectCollection>
                for super::super::Foundation::Collections::IVector<DependencyObject>
            {
                fn from(value: &DependencyObjectCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IVector<DependencyObject>,
                > for DependencyObjectCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IVector<DependencyObject>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IVector<DependencyObject>,
                > for &'a DependencyObjectCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IVector<DependencyObject>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<DependencyObject>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<DependencyObjectCollection> for DependencyObject {
                fn from(value: DependencyObjectCollection) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&DependencyObjectCollection> for DependencyObject {
                fn from(value: &DependencyObjectCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for DependencyObjectCollection {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a DependencyObjectCollection {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for DependencyObjectCollection {}
            unsafe impl ::std::marker::Sync for DependencyObjectCollection {}
            impl ::std::iter::IntoIterator for DependencyObjectCollection {
                type Item = DependencyObject;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a DependencyObjectCollection {
                type Item = DependencyObject;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISetterBaseCollection(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISetterBaseCollection {
                type Vtable = ISetterBaseCollection_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    63179944,
                    37022,
                    16663,
                    [129, 28, 164, 82, 148, 150, 189, 241],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISetterBaseCollection_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IBringIntoViewOptions(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBringIntoViewOptions {
                type Vtable = IBringIntoViewOptions_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    431870389,
                    51147,
                    18137,
                    [164, 221, 161, 187, 232, 62, 242, 251],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBringIntoViewOptions_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IBringIntoViewOptions2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBringIntoViewOptions2 {
                type Vtable = IBringIntoViewOptions2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3897942158,
                    25782,
                    4625,
                    [189, 219, 31, 221, 187, 110, 130, 49],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBringIntoViewOptions2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BringIntoViewOptions(::windows::IInspectable);
            impl BringIntoViewOptions {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        BringIntoViewOptions,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn AnimationDesired(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAnimationDesired(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn HorizontalAlignmentRatio(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetHorizontalAlignmentRatio(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn VerticalAlignmentRatio(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetVerticalAlignmentRatio(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn HorizontalOffset(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetHorizontalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn VerticalOffset(&self) -> ::windows::Result<f64> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetVerticalOffset(&self, value: f64) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IBringIntoViewOptions2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for BringIntoViewOptions {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.BringIntoViewOptions;{19bdd1b5-c7cb-46d9-a4dd-a1bbe83ef2fb})" ) ;
            }
            unsafe impl ::windows::Interface for BringIntoViewOptions {
                type Vtable = IBringIntoViewOptions_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    431870389,
                    51147,
                    18137,
                    [164, 221, 161, 187, 232, 62, 242, 251],
                );
            }
            impl ::windows::RuntimeName for BringIntoViewOptions {
                const NAME: &'static str = "Windows.UI.Xaml.BringIntoViewOptions";
            }
            impl ::std::convert::From<BringIntoViewOptions> for ::windows::IInspectable {
                fn from(value: BringIntoViewOptions) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BringIntoViewOptions> for ::windows::IInspectable {
                fn from(value: &BringIntoViewOptions) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for BringIntoViewOptions {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a BringIntoViewOptions {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for BringIntoViewOptions {}
            unsafe impl ::std::marker::Sync for BringIntoViewOptions {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FocusState(pub i32);
            impl FocusState {
                pub const Unfocused: FocusState = FocusState(0i32);
                pub const Pointer: FocusState = FocusState(1i32);
                pub const Keyboard: FocusState = FocusState(2i32);
                pub const Programmatic: FocusState = FocusState(3i32);
            }
            impl ::std::convert::From<i32> for FocusState {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FocusState {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FocusState {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.FocusState;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkViewSource(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkViewSource {
                type Vtable = IFrameworkViewSource_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3819993050,
                    13741,
                    19209,
                    [181, 178, 39, 66, 0, 65, 186, 159],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkViewSource_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SetterBaseCollection(::windows::IInspectable);
            impl SetterBaseCollection {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        SetterBaseCollection,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IsSealed(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn First(
                    &self,
                ) -> ::windows::Result<super::super::Foundation::Collections::IIterator<SetterBase>>
                {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            SetterBase,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IIterator<SetterBase>>(
                            result__,
                        )
                    }
                }
                pub fn GetAt(&self, index: u32) -> ::windows::Result<SetterBase> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <SetterBase as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<SetterBase>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<super::super::Foundation::Collections::IVectorView<SetterBase>>
                {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVectorView<
                            SetterBase,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IVectorView<SetterBase>>(
                            result__,
                        )
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, SetterBase>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, SetterBase>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, SetterBase>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, SetterBase>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<SetterBase as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<SetterBase as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SetterBaseCollection {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.SetterBaseCollection;{03c40ca8-909e-4117-811c-a4529496bdf1})" ) ;
            }
            unsafe impl ::windows::Interface for SetterBaseCollection {
                type Vtable = ISetterBaseCollection_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    63179944,
                    37022,
                    16663,
                    [129, 28, 164, 82, 148, 150, 189, 241],
                );
            }
            impl ::windows::RuntimeName for SetterBaseCollection {
                const NAME: &'static str = "Windows.UI.Xaml.SetterBaseCollection";
            }
            impl ::std::convert::From<SetterBaseCollection> for ::windows::IInspectable {
                fn from(value: SetterBaseCollection) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&SetterBaseCollection> for ::windows::IInspectable {
                fn from(value: &SetterBaseCollection) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SetterBaseCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SetterBaseCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<SetterBaseCollection>
                for super::super::Foundation::Collections::IIterable<SetterBase>
            {
                fn from(value: SetterBaseCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SetterBaseCollection>
                for super::super::Foundation::Collections::IIterable<SetterBase>
            {
                fn from(value: &SetterBaseCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<SetterBase>,
                > for SetterBaseCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<SetterBase>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<SetterBase>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<SetterBase>,
                > for &'a SetterBaseCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<SetterBase>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<SetterBase>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<SetterBaseCollection>
                for super::super::Foundation::Collections::IVector<SetterBase>
            {
                fn from(value: SetterBaseCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&SetterBaseCollection>
                for super::super::Foundation::Collections::IVector<SetterBase>
            {
                fn from(value: &SetterBaseCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, super::super::Foundation::Collections::IVector<SetterBase>>
                for SetterBaseCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IVector<SetterBase>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, super::super::Foundation::Collections::IVector<SetterBase>>
                for &'a SetterBaseCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IVector<SetterBase>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<SetterBase>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for SetterBaseCollection {}
            unsafe impl ::std::marker::Sync for SetterBaseCollection {}
            impl ::std::iter::IntoIterator for SetterBaseCollection {
                type Item = SetterBase;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a SetterBaseCollection {
                type Item = SetterBase;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IXamlRoot(::windows::IInspectable);
            unsafe impl ::windows::Interface for IXamlRoot {
                type Vtable = IXamlRoot_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    884279126,
                    5782,
                    23405,
                    [142, 155, 199, 20, 100, 204, 173, 90],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IXamlRoot_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDataTemplateKey(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataTemplateKey {
                type Vtable = IDataTemplateKey_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2268818472,
                    52459,
                    19297,
                    [134, 250, 178, 206, 195, 156, 194, 250],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataTemplateKey_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IAdaptiveTrigger(::windows::IInspectable);
            unsafe impl ::windows::Interface for IAdaptiveTrigger {
                type Vtable = IAdaptiveTrigger_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2783985945,
                    3289,
                    18929,
                    [162, 63, 68, 229, 71, 171, 159, 26],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAdaptiveTrigger_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut f64,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: f64,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IAdaptiveTriggerStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IAdaptiveTriggerStatics {
                type Vtable = IAdaptiveTriggerStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3106810346,
                    5653,
                    17232,
                    [156, 59, 146, 178, 152, 107, 244, 68],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAdaptiveTriggerStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IAdaptiveTriggerFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IAdaptiveTriggerFactory {
                type Vtable = IAdaptiveTriggerFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3378959490,
                    23275,
                    18497,
                    [146, 71, 193, 160, 189, 214, 245, 159],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IAdaptiveTriggerFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct AdaptiveTrigger(::windows::IInspectable);
            impl AdaptiveTrigger {
                pub fn MinWindowWidth(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetMinWindowWidth(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn MinWindowHeight(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn SetMinWindowHeight(&self, value: f64) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn MinWindowWidthProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IAdaptiveTriggerStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn MinWindowHeightProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IAdaptiveTriggerStatics(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn new() -> ::windows::Result<AdaptiveTrigger> {
                    Self::IAdaptiveTriggerFactory(|this| unsafe {
                        let mut result__: <AdaptiveTrigger as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<AdaptiveTrigger>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn SetActive(&self, isactive: bool) -> ::windows::Result<()> {
                    let this =
                        &::windows::Interface::cast::<IStateTriggerBaseProtected>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this), isactive)
                            .ok()
                    }
                }
                pub fn IAdaptiveTriggerStatics<
                    R,
                    F: FnOnce(&IAdaptiveTriggerStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        AdaptiveTrigger,
                        IAdaptiveTriggerStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IAdaptiveTriggerFactory<
                    R,
                    F: FnOnce(&IAdaptiveTriggerFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        AdaptiveTrigger,
                        IAdaptiveTriggerFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for AdaptiveTrigger {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.AdaptiveTrigger;{a5f04119-0cd9-49f1-a23f-44e547ab9f1a})",
                );
            }
            unsafe impl ::windows::Interface for AdaptiveTrigger {
                type Vtable = IAdaptiveTrigger_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2783985945,
                    3289,
                    18929,
                    [162, 63, 68, 229, 71, 171, 159, 26],
                );
            }
            impl ::windows::RuntimeName for AdaptiveTrigger {
                const NAME: &'static str = "Windows.UI.Xaml.AdaptiveTrigger";
            }
            impl ::std::convert::From<AdaptiveTrigger> for ::windows::IInspectable {
                fn from(value: AdaptiveTrigger) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&AdaptiveTrigger> for ::windows::IInspectable {
                fn from(value: &AdaptiveTrigger) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for AdaptiveTrigger {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a AdaptiveTrigger {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<AdaptiveTrigger> for StateTriggerBase {
                fn from(value: AdaptiveTrigger) -> Self {
                    ::std::convert::Into::<StateTriggerBase>::into(&value)
                }
            }
            impl ::std::convert::From<&AdaptiveTrigger> for StateTriggerBase {
                fn from(value: &AdaptiveTrigger) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, StateTriggerBase> for AdaptiveTrigger {
                fn into_param(self) -> ::windows::Param<'a, StateTriggerBase> {
                    ::windows::Param::Owned(::std::convert::Into::<StateTriggerBase>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, StateTriggerBase> for &'a AdaptiveTrigger {
                fn into_param(self) -> ::windows::Param<'a, StateTriggerBase> {
                    ::windows::Param::Owned(::std::convert::Into::<StateTriggerBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<AdaptiveTrigger> for DependencyObject {
                fn from(value: AdaptiveTrigger) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&AdaptiveTrigger> for DependencyObject {
                fn from(value: &AdaptiveTrigger) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for AdaptiveTrigger {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a AdaptiveTrigger {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for AdaptiveTrigger {}
            unsafe impl ::std::marker::Sync for AdaptiveTrigger {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DataContextChangedEventArgs(::windows::IInspectable);
            impl DataContextChangedEventArgs {
                pub fn NewValue(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Handled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetHandled(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DataContextChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DataContextChangedEventArgs;{7da68e21-0b8f-4f9f-a143-f8e7780136a2})" ) ;
            }
            unsafe impl ::windows::Interface for DataContextChangedEventArgs {
                type Vtable = IDataContextChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2108067361,
                    2959,
                    20383,
                    [161, 67, 248, 231, 120, 1, 54, 162],
                );
            }
            impl ::windows::RuntimeName for DataContextChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.DataContextChangedEventArgs";
            }
            impl ::std::convert::From<DataContextChangedEventArgs> for ::windows::IInspectable {
                fn from(value: DataContextChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DataContextChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &DataContextChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DataContextChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DataContextChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DataContextChangedEventArgs {}
            unsafe impl ::std::marker::Sync for DataContextChangedEventArgs {}
            #[repr(C)]
            #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
            pub struct Duration {
                pub TimeSpan: super::super::Foundation::TimeSpan,
                pub Type: DurationType,
            }
            impl Duration {}
            impl ::std::default::Default for Duration {
                fn default() -> Self {
                    Self {
                        TimeSpan: ::std::default::Default::default(),
                        Type: ::std::default::Default::default(),
                    }
                }
            }
            impl ::std::fmt::Debug for Duration {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Duration")
                        .field("TimeSpan", &format_args!("{:?}", self.TimeSpan))
                        .field("Type", &format_args!("{:?}", self.Type))
                        .finish()
                }
            }
            impl ::std::cmp::PartialEq for Duration {
                fn eq(&self, other: &Self) -> bool {
                    self.TimeSpan == other.TimeSpan && self.Type == other.Type
                }
            }
            impl ::std::cmp::Eq for Duration {}
            unsafe impl ::windows::Abi for Duration {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for Duration {
                type DefaultType = Self;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"struct(Windows.UI.Xaml.Duration;struct(Windows.Foundation.TimeSpan;i8);enum(Windows.UI.Xaml.DurationType;i4))" ) ;
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISizeHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISizeHelperStatics {
                type Vtable = ISizeHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1652999602,
                    53112,
                    18709,
                    [170, 64, 118, 0, 74, 22, 95, 94],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISizeHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IResourceDictionaryFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IResourceDictionaryFactory {
                type Vtable = IResourceDictionaryFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3929422261,
                    12727,
                    17009,
                    [146, 201, 124, 149, 132, 169, 28, 34],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IResourceDictionaryFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IXamlRootChangedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IXamlRootChangedEventArgs {
                type Vtable = IXamlRootChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2463570977,
                    53820,
                    23063,
                    [188, 184, 0, 21, 4, 182, 187, 25],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IXamlRootChangedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowActivatedEventHandler(::windows::IUnknown);
            impl WindowActivatedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::WindowActivatedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = WindowActivatedEventHandler_box::<F> {
                        vtable: &WindowActivatedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, super::Core::WindowActivatedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowActivatedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({18026348-8619-4c7b-b534-ced45d9de219})",
                );
            }
            unsafe impl ::windows::Interface for WindowActivatedEventHandler {
                type Vtable = WindowActivatedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    402809672,
                    34329,
                    19579,
                    [181, 52, 206, 212, 93, 157, 226, 25],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct WindowActivatedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct WindowActivatedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<super::Core::WindowActivatedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const WindowActivatedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::WindowActivatedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > WindowActivatedEventHandler_box<F>
            {
                const VTABLE: WindowActivatedEventHandler_abi = WindowActivatedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<WindowActivatedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: Core :: WindowActivatedEventArgs as :: windows :: Abi > :: Abi as * const < super :: Core :: WindowActivatedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DragEventHandler(::windows::IUnknown);
            impl DragEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<DragEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = DragEventHandler_box::<F> {
                        vtable: &DragEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, DragEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DragEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({2ab1a205-1e73-4bcf-aabc-57b97e21961d})",
                );
            }
            unsafe impl ::windows::Interface for DragEventHandler {
                type Vtable = DragEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    716284421,
                    7795,
                    19407,
                    [170, 188, 87, 185, 126, 33, 150, 29],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct DragEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct DragEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<DragEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const DragEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<DragEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > DragEventHandler_box<F>
            {
                const VTABLE: DragEventHandler_abi = DragEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<DragEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < DragEventArgs as :: windows :: Abi > :: Abi as * const < DragEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindowCreatedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindowCreatedEventArgs {
                type Vtable = IWindowCreatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    834081904,
                    65279,
                    18004,
                    [175, 72, 155, 57, 138, 181, 119, 43],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindowCreatedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontNumeralStyle(pub i32);
            impl FontNumeralStyle {
                pub const Normal: FontNumeralStyle = FontNumeralStyle(0i32);
                pub const Lining: FontNumeralStyle = FontNumeralStyle(1i32);
                pub const OldStyle: FontNumeralStyle = FontNumeralStyle(2i32);
            }
            impl ::std::convert::From<i32> for FontNumeralStyle {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontNumeralStyle {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontNumeralStyle {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.FontNumeralStyle;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IThicknessHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for IThicknessHelper {
                type Vtable = IThicknessHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2825629259,
                    7823,
                    20203,
                    [144, 19, 11, 40, 56, 169, 123, 52],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IThicknessHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IColorPaletteResourcesFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IColorPaletteResourcesFactory {
                type Vtable = IColorPaletteResourcesFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2776565635,
                    6262,
                    23744,
                    [142, 165, 188, 119, 177, 126, 15, 126],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IColorPaletteResourcesFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IDataTemplateExtension(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataTemplateExtension {
                type Vtable = IDataTemplateExtension_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1499370823,
                    52735,
                    19346,
                    [183, 115, 171, 57, 104, 120, 243, 83],
                );
            }
            impl IDataTemplateExtension {
                pub fn ResetTemplate(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn ProcessBinding(&self, phase: u32) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            phase,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IDataTemplateExtension {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{595e9547-cdff-4b92-b773-ab396878f353}");
            }
            impl ::std::convert::From<IDataTemplateExtension> for ::windows::IInspectable {
                fn from(value: IDataTemplateExtension) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IDataTemplateExtension> for ::windows::IInspectable {
                fn from(value: &IDataTemplateExtension) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IDataTemplateExtension {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IDataTemplateExtension {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataTemplateExtension_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    phase: u32,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct RoutedEvent(::windows::IInspectable);
            impl RoutedEvent {}
            unsafe impl ::windows::RuntimeType for RoutedEvent {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.RoutedEvent;{a6b25818-43c1-4c70-865c-7bdd5a32e327})",
                );
            }
            unsafe impl ::windows::Interface for RoutedEvent {
                type Vtable = IRoutedEvent_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2796705816,
                    17345,
                    19568,
                    [134, 92, 123, 221, 90, 50, 227, 39],
                );
            }
            impl ::windows::RuntimeName for RoutedEvent {
                const NAME: &'static str = "Windows.UI.Xaml.RoutedEvent";
            }
            impl ::std::convert::From<RoutedEvent> for ::windows::IInspectable {
                fn from(value: RoutedEvent) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&RoutedEvent> for ::windows::IInspectable {
                fn from(value: &RoutedEvent) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for RoutedEvent {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a RoutedEvent {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for RoutedEvent {}
            unsafe impl ::std::marker::Sync for RoutedEvent {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IRectHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IRectHelperStatics {
                type Vtable = IRectHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1591829476,
                    49534,
                    18767,
                    [181, 128, 47, 5, 116, 252, 58, 21],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IRectHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct RectHelper(::windows::IInspectable);
            impl RectHelper {
                pub fn IRectHelperStatics<
                    R,
                    F: FnOnce(&IRectHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<RectHelper, IRectHelperStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for RectHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.RectHelper;{a38781e2-4bfb-4ee2-afe5-89f31b37478d})",
                );
            }
            unsafe impl ::windows::Interface for RectHelper {
                type Vtable = IRectHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2743566818,
                    19451,
                    20194,
                    [175, 229, 137, 243, 27, 55, 71, 141],
                );
            }
            impl ::windows::RuntimeName for RectHelper {
                const NAME: &'static str = "Windows.UI.Xaml.RectHelper";
            }
            impl ::std::convert::From<RectHelper> for ::windows::IInspectable {
                fn from(value: RectHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&RectHelper> for ::windows::IInspectable {
                fn from(value: &RectHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for RectHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a RectHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for RectHelper {}
            unsafe impl ::std::marker::Sync for RectHelper {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ResourceDictionary(::windows::IInspectable);
            impl ResourceDictionary {
                pub fn MergedDictionaries(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVector<ResourceDictionary>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVector<
                            ResourceDictionary,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVector :: < ResourceDictionary > > ( result__ )
                    }
                }
                pub fn ThemeDictionaries(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >>(result__)
                    }
                }
                pub fn First(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IIterator<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IIterator<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >>(result__)
                    }
                }
                pub fn Lookup<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn HasKey<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IMapView<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IMapView<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IMapView<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >>(result__)
                    }
                }
                pub fn Insert<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            value.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Remove<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn new() -> ::windows::Result<ResourceDictionary> {
                    Self::IResourceDictionaryFactory(|this| unsafe {
                        let mut result__: <ResourceDictionary as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<ResourceDictionary>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IResourceDictionaryFactory<
                    R,
                    F: FnOnce(&IResourceDictionaryFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ResourceDictionary,
                        IResourceDictionaryFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ResourceDictionary {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ResourceDictionary;{c1ea4f24-d6de-4191-8e3a-f48601f7489c})" ) ;
            }
            unsafe impl ::windows::Interface for ResourceDictionary {
                type Vtable = IResourceDictionary_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3253358372,
                    55006,
                    16785,
                    [142, 58, 244, 134, 1, 247, 72, 156],
                );
            }
            impl ::windows::RuntimeName for ResourceDictionary {
                const NAME: &'static str = "Windows.UI.Xaml.ResourceDictionary";
            }
            impl ::std::convert::From<ResourceDictionary> for ::windows::IInspectable {
                fn from(value: ResourceDictionary) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ResourceDictionary> for ::windows::IInspectable {
                fn from(value: &ResourceDictionary) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ResourceDictionary {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ResourceDictionary {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ResourceDictionary>
                for super::super::Foundation::Collections::IIterable<
                    super::super::Foundation::Collections::IKeyValuePair<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                >
            {
                fn from(value: ResourceDictionary) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ResourceDictionary>
                for super::super::Foundation::Collections::IIterable<
                    super::super::Foundation::Collections::IKeyValuePair<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                >
            {
                fn from(value: &ResourceDictionary) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > for ResourceDictionary
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > for &'a ResourceDictionary
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ResourceDictionary>
                for super::super::Foundation::Collections::IMap<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >
            {
                fn from(value: ResourceDictionary) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ResourceDictionary>
                for super::super::Foundation::Collections::IMap<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >
            {
                fn from(value: &ResourceDictionary) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > for ResourceDictionary
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > for &'a ResourceDictionary
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ResourceDictionary> for DependencyObject {
                fn from(value: ResourceDictionary) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&ResourceDictionary> for DependencyObject {
                fn from(value: &ResourceDictionary) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for ResourceDictionary {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a ResourceDictionary {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for ResourceDictionary {}
            unsafe impl ::std::marker::Sync for ResourceDictionary {}
            impl ::std::iter::IntoIterator for ResourceDictionary {
                type Item = super::super::Foundation::Collections::IKeyValuePair<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >;
                type IntoIter = super::super::Foundation::Collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a ResourceDictionary {
                type Item = super::super::Foundation::Collections::IKeyValuePair<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >;
                type IntoIter = super::super::Foundation::Collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ColorPaletteResources(::windows::IInspectable);
            impl ColorPaletteResources {
                pub fn new() -> ::windows::Result<ColorPaletteResources> {
                    Self::IColorPaletteResourcesFactory(|this| unsafe {
                        let mut result__: <ColorPaletteResources as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<ColorPaletteResources>(result__)
                    })
                }
                pub fn First(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IIterator<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IIterator<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >>(result__)
                    }
                }
                pub fn Lookup<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn HasKey<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IMapView<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IMapView<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IMapView<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >>(result__)
                    }
                }
                pub fn Insert<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                            value.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Remove<'a>(
                    &self,
                    key: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            key.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn MergedDictionaries(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVector<ResourceDictionary>,
                > {
                    let this = &::windows::Interface::cast::<IResourceDictionary>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVector<
                            ResourceDictionary,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVector :: < ResourceDictionary > > ( result__ )
                    }
                }
                pub fn ThemeDictionaries(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    let this = &::windows::Interface::cast::<IResourceDictionary>(self).unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >>(result__)
                    }
                }
                pub fn IColorPaletteResourcesFactory<
                    R,
                    F: FnOnce(&IColorPaletteResourcesFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ColorPaletteResources,
                        IColorPaletteResourcesFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ColorPaletteResources {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ColorPaletteResources;{258088c4-aef2-5d3f-833b-c36db6278ed9})" ) ;
            }
            unsafe impl ::windows::Interface for ColorPaletteResources {
                type Vtable = IColorPaletteResources_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    629180612,
                    44786,
                    23871,
                    [131, 59, 195, 109, 182, 39, 142, 217],
                );
            }
            impl ::windows::RuntimeName for ColorPaletteResources {
                const NAME: &'static str = "Windows.UI.Xaml.ColorPaletteResources";
            }
            impl ::std::convert::From<ColorPaletteResources> for ::windows::IInspectable {
                fn from(value: ColorPaletteResources) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ColorPaletteResources> for ::windows::IInspectable {
                fn from(value: &ColorPaletteResources) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ColorPaletteResources {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ColorPaletteResources {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<ColorPaletteResources>
                for super::super::Foundation::Collections::IIterable<
                    super::super::Foundation::Collections::IKeyValuePair<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                >
            {
                fn from(value: ColorPaletteResources) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ColorPaletteResources>
                for super::super::Foundation::Collections::IIterable<
                    super::super::Foundation::Collections::IKeyValuePair<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                >
            {
                fn from(value: &ColorPaletteResources) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > for ColorPaletteResources
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > for &'a ColorPaletteResources
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<
                        super::super::Foundation::Collections::IKeyValuePair<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<
                            super::super::Foundation::Collections::IKeyValuePair<
                                ::windows::IInspectable,
                                ::windows::IInspectable,
                            >,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ColorPaletteResources>
                for super::super::Foundation::Collections::IMap<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >
            {
                fn from(value: ColorPaletteResources) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&ColorPaletteResources>
                for super::super::Foundation::Collections::IMap<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >
            {
                fn from(value: &ColorPaletteResources) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > for ColorPaletteResources
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > for &'a ColorPaletteResources
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IMap<
                        ::windows::IInspectable,
                        ::windows::IInspectable,
                    >,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IMap<
                            ::windows::IInspectable,
                            ::windows::IInspectable,
                        >,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<ColorPaletteResources> for ResourceDictionary {
                fn from(value: ColorPaletteResources) -> Self {
                    ::std::convert::Into::<ResourceDictionary>::into(&value)
                }
            }
            impl ::std::convert::From<&ColorPaletteResources> for ResourceDictionary {
                fn from(value: &ColorPaletteResources) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ResourceDictionary> for ColorPaletteResources {
                fn into_param(self) -> ::windows::Param<'a, ResourceDictionary> {
                    ::windows::Param::Owned(::std::convert::Into::<ResourceDictionary>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ResourceDictionary> for &'a ColorPaletteResources {
                fn into_param(self) -> ::windows::Param<'a, ResourceDictionary> {
                    ::windows::Param::Owned(::std::convert::Into::<ResourceDictionary>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<ColorPaletteResources> for DependencyObject {
                fn from(value: ColorPaletteResources) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&ColorPaletteResources> for DependencyObject {
                fn from(value: &ColorPaletteResources) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for ColorPaletteResources {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a ColorPaletteResources {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for ColorPaletteResources {}
            unsafe impl ::std::marker::Sync for ColorPaletteResources {}
            impl ::std::iter::IntoIterator for ColorPaletteResources {
                type Item = super::super::Foundation::Collections::IKeyValuePair<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >;
                type IntoIter = super::super::Foundation::Collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a ColorPaletteResources {
                type Item = super::super::Foundation::Collections::IKeyValuePair<
                    ::windows::IInspectable,
                    ::windows::IInspectable,
                >;
                type IntoIter = super::super::Foundation::Collections::IIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    self.First().unwrap()
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowVisibilityChangedEventHandler(::windows::IUnknown);
            impl WindowVisibilityChangedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::VisibilityChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = WindowVisibilityChangedEventHandler_box::<F> {
                        vtable: &WindowVisibilityChangedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, super::Core::VisibilityChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowVisibilityChangedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({10406ad6-b090-4a4a-b2ad-d682df27130f})",
                );
            }
            unsafe impl ::windows::Interface for WindowVisibilityChangedEventHandler {
                type Vtable = WindowVisibilityChangedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    272657110,
                    45200,
                    19018,
                    [178, 173, 214, 130, 223, 39, 19, 15],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct WindowVisibilityChangedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct WindowVisibilityChangedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<super::Core::VisibilityChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const WindowVisibilityChangedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::VisibilityChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > WindowVisibilityChangedEventHandler_box<F>
            {
                const VTABLE: WindowVisibilityChangedEventHandler_abi =
                    WindowVisibilityChangedEventHandler_abi(
                        Self::QueryInterface,
                        Self::AddRef,
                        Self::Release,
                        Self::Invoke,
                    );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<WindowVisibilityChangedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: Core :: VisibilityChangedEventArgs as :: windows :: Abi > :: Abi as * const < super :: Core :: VisibilityChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDragStartingEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDragStartingEventArgs {
                type Vtable = IDragStartingEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1744884730,
                    37048,
                    18169,
                    [142, 48, 90, 194, 95, 115, 240, 249],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDragStartingEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: bool,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DragStartingEventArgs(::windows::IInspectable);
            impl DragStartingEventArgs {
                pub fn Cancel(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetCancel(&self, value: bool) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn DragUI(&self) -> ::windows::Result<DragUI> {
                    let this = self;
                    unsafe {
                        let mut result__: <DragUI as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DragUI>(result__)
                    }
                }
                pub fn GetDeferral(&self) -> ::windows::Result<DragOperationDeferral> {
                    let this = self;
                    unsafe {
                        let mut result__: <DragOperationDeferral as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DragOperationDeferral>(result__)
                    }
                }
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DragStartingEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DragStartingEventArgs;{6800d3fa-90b8-46f9-8e30-5ac25f73f0f9})" ) ;
            }
            unsafe impl ::windows::Interface for DragStartingEventArgs {
                type Vtable = IDragStartingEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1744884730,
                    37048,
                    18169,
                    [142, 48, 90, 194, 95, 115, 240, 249],
                );
            }
            impl ::windows::RuntimeName for DragStartingEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.DragStartingEventArgs";
            }
            impl ::std::convert::From<DragStartingEventArgs> for ::windows::IInspectable {
                fn from(value: DragStartingEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DragStartingEventArgs> for ::windows::IInspectable {
                fn from(value: &DragStartingEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DragStartingEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DragStartingEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DragStartingEventArgs> for RoutedEventArgs {
                fn from(value: DragStartingEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&DragStartingEventArgs> for RoutedEventArgs {
                fn from(value: &DragStartingEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for DragStartingEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a DragStartingEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for DragStartingEventArgs {}
            unsafe impl ::std::marker::Sync for DragStartingEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindow3(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindow3 {
                type Vtable = IWindow3_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3071007901,
                    7221,
                    17962,
                    [155, 151, 128, 141, 90, 249, 242, 142],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindow3_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct Visibility(pub i32);
            impl Visibility {
                pub const Visible: Visibility = Visibility(0i32);
                pub const Collapsed: Visibility = Visibility(1i32);
            }
            impl ::std::convert::From<i32> for Visibility {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for Visibility {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for Visibility {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.Visibility;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DependencyProperty(::windows::IInspectable);
            impl DependencyProperty {
                pub fn UnsetValue() -> ::windows::Result<::windows::IInspectable> {
                    Self::IDependencyPropertyStatics(|this| unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    })
                }
                pub fn IDependencyPropertyStatics<
                    R,
                    F: FnOnce(&IDependencyPropertyStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        DependencyProperty,
                        IDependencyPropertyStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for DependencyProperty {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DependencyProperty;{85b13970-9bc4-4e96-acf1-30c8fd3d55c8})" ) ;
            }
            unsafe impl ::windows::Interface for DependencyProperty {
                type Vtable = IDependencyProperty_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2242984304,
                    39876,
                    20118,
                    [172, 241, 48, 200, 253, 61, 85, 200],
                );
            }
            impl ::windows::RuntimeName for DependencyProperty {
                const NAME: &'static str = "Windows.UI.Xaml.DependencyProperty";
            }
            impl ::std::convert::From<DependencyProperty> for ::windows::IInspectable {
                fn from(value: DependencyProperty) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DependencyProperty> for ::windows::IInspectable {
                fn from(value: &DependencyProperty) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DependencyProperty {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DependencyProperty {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DependencyProperty {}
            unsafe impl ::std::marker::Sync for DependencyProperty {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowClosedEventHandler(::windows::IUnknown);
            impl WindowClosedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::CoreWindowEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = WindowClosedEventHandler_box::<F> {
                        vtable: &WindowClosedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, super::Core::CoreWindowEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowClosedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({0db89161-20d7-45df-9122-ba89576703ba})",
                );
            }
            unsafe impl ::windows::Interface for WindowClosedEventHandler {
                type Vtable = WindowClosedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    230199649,
                    8407,
                    17887,
                    [145, 34, 186, 137, 87, 103, 3, 186],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct WindowClosedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct WindowClosedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<super::Core::CoreWindowEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const WindowClosedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::CoreWindowEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > WindowClosedEventHandler_box<F>
            {
                const VTABLE: WindowClosedEventHandler_abi = WindowClosedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<WindowClosedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: Core :: CoreWindowEventArgs as :: windows :: Abi > :: Abi as * const < super :: Core :: CoreWindowEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPropertyPathFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPropertyPathFactory {
                type Vtable = IPropertyPathFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1313660825,
                    38950,
                    20054,
                    [132, 124, 202, 5, 95, 22, 41, 5],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPropertyPathFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    path: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontFraction(pub i32);
            impl FontFraction {
                pub const Normal: FontFraction = FontFraction(0i32);
                pub const Stacked: FontFraction = FontFraction(1i32);
                pub const Slashed: FontFraction = FontFraction(2i32);
            }
            impl ::std::convert::From<i32> for FontFraction {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontFraction {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontFraction {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.FontFraction;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementFactoryRecycleArgsFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementFactoryRecycleArgsFactory {
                type Vtable = IElementFactoryRecycleArgsFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2375181577,
                    59917,
                    21531,
                    [130, 113, 249, 233, 17, 143, 94, 124],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementFactoryRecycleArgsFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ICornerRadiusHelper(::windows::IInspectable);
            unsafe impl ::windows::Interface for ICornerRadiusHelper {
                type Vtable = ICornerRadiusHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4252754306,
                    7387,
                    17032,
                    [184, 200, 133, 238, 121, 41, 123, 252],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ICornerRadiusHelper_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CornerRadiusHelper(::windows::IInspectable);
            impl CornerRadiusHelper {
                pub fn FromRadii(
                    topleft: f64,
                    topright: f64,
                    bottomright: f64,
                    bottomleft: f64,
                ) -> ::windows::Result<CornerRadius> {
                    Self::ICornerRadiusHelperStatics(|this| unsafe {
                        let mut result__: <CornerRadius as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            topleft,
                            topright,
                            bottomright,
                            bottomleft,
                            &mut result__,
                        )
                        .from_abi::<CornerRadius>(result__)
                    })
                }
                pub fn FromUniformRadius(uniformradius: f64) -> ::windows::Result<CornerRadius> {
                    Self::ICornerRadiusHelperStatics(|this| unsafe {
                        let mut result__: <CornerRadius as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            uniformradius,
                            &mut result__,
                        )
                        .from_abi::<CornerRadius>(result__)
                    })
                }
                pub fn ICornerRadiusHelperStatics<
                    R,
                    F: FnOnce(&ICornerRadiusHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        CornerRadiusHelper,
                        ICornerRadiusHelperStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for CornerRadiusHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.CornerRadiusHelper;{fd7be182-1cdb-4288-b8c8-85ee79297bfc})" ) ;
            }
            unsafe impl ::windows::Interface for CornerRadiusHelper {
                type Vtable = ICornerRadiusHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    4252754306,
                    7387,
                    17032,
                    [184, 200, 133, 238, 121, 41, 123, 252],
                );
            }
            impl ::windows::RuntimeName for CornerRadiusHelper {
                const NAME: &'static str = "Windows.UI.Xaml.CornerRadiusHelper";
            }
            impl ::std::convert::From<CornerRadiusHelper> for ::windows::IInspectable {
                fn from(value: CornerRadiusHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&CornerRadiusHelper> for ::windows::IInspectable {
                fn from(value: &CornerRadiusHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for CornerRadiusHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a CornerRadiusHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for CornerRadiusHelper {}
            unsafe impl ::std::marker::Sync for CornerRadiusHelper {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IElementFactoryRecycleArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementFactoryRecycleArgs {
                type Vtable = IElementFactoryRecycleArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2263968532,
                    14312,
                    24024,
                    [169, 12, 37, 211, 113, 3, 24, 176],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementFactoryRecycleArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ElementFactoryRecycleArgs(::windows::IInspectable);
            impl ElementFactoryRecycleArgs {
                pub fn Element(&self) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn SetElement<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Parent(&self) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn SetParent<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<ElementFactoryRecycleArgs> {
                    Self::IElementFactoryRecycleArgsFactory(|this| unsafe {
                        let mut result__: <ElementFactoryRecycleArgs as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<ElementFactoryRecycleArgs>(result__)
                    })
                }
                pub fn IElementFactoryRecycleArgsFactory<
                    R,
                    F: FnOnce(&IElementFactoryRecycleArgsFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ElementFactoryRecycleArgs,
                        IElementFactoryRecycleArgsFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ElementFactoryRecycleArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.ElementFactoryRecycleArgs;{86f16b14-37e8-5dd8-a90c-25d3710318b0})" ) ;
            }
            unsafe impl ::windows::Interface for ElementFactoryRecycleArgs {
                type Vtable = IElementFactoryRecycleArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2263968532,
                    14312,
                    24024,
                    [169, 12, 37, 211, 113, 3, 24, 176],
                );
            }
            impl ::windows::RuntimeName for ElementFactoryRecycleArgs {
                const NAME: &'static str = "Windows.UI.Xaml.ElementFactoryRecycleArgs";
            }
            impl ::std::convert::From<ElementFactoryRecycleArgs> for ::windows::IInspectable {
                fn from(value: ElementFactoryRecycleArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ElementFactoryRecycleArgs> for ::windows::IInspectable {
                fn from(value: &ElementFactoryRecycleArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ElementFactoryRecycleArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ElementFactoryRecycleArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for ElementFactoryRecycleArgs {}
            unsafe impl ::std::marker::Sync for ElementFactoryRecycleArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindow2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindow2 {
                type Vtable = IWindow2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3548673439,
                    13558,
                    17538,
                    [132, 53, 245, 82, 249, 178, 76, 200],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindow2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontEastAsianWidths(pub i32);
            impl FontEastAsianWidths {
                pub const Normal: FontEastAsianWidths = FontEastAsianWidths(0i32);
                pub const Full: FontEastAsianWidths = FontEastAsianWidths(1i32);
                pub const Half: FontEastAsianWidths = FontEastAsianWidths(2i32);
                pub const Proportional: FontEastAsianWidths = FontEastAsianWidths(3i32);
                pub const Quarter: FontEastAsianWidths = FontEastAsianWidths(4i32);
                pub const Third: FontEastAsianWidths = FontEastAsianWidths(5i32);
            }
            impl ::std::convert::From<i32> for FontEastAsianWidths {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontEastAsianWidths {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontEastAsianWidths {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.FontEastAsianWidths;i4)",
                );
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontVariants(pub i32);
            impl FontVariants {
                pub const Normal: FontVariants = FontVariants(0i32);
                pub const Superscript: FontVariants = FontVariants(1i32);
                pub const Subscript: FontVariants = FontVariants(2i32);
                pub const Ordinal: FontVariants = FontVariants(3i32);
                pub const Inferior: FontVariants = FontVariants(4i32);
                pub const Ruby: FontVariants = FontVariants(5i32);
            }
            impl ::std::convert::From<i32> for FontVariants {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontVariants {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontVariants {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.FontVariants;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FrameworkView(::windows::IInspectable);
            impl FrameworkView {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkView,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn Load<'a>(
                    &self,
                    entrypoint: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::ApplicationModel::Core::IFrameworkView,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            entrypoint.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Run(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::ApplicationModel::Core::IFrameworkView,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Uninitialize(&self) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<
                        super::super::ApplicationModel::Core::IFrameworkView,
                    >(self)
                    .unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FrameworkView {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.FrameworkView;{ddba664b-b603-47aa-942d-3833174f0d80})",
                );
            }
            unsafe impl ::windows::Interface for FrameworkView {
                type Vtable = IFrameworkView_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3719980619,
                    46595,
                    18346,
                    [148, 45, 56, 51, 23, 79, 13, 128],
                );
            }
            impl ::windows::RuntimeName for FrameworkView {
                const NAME: &'static str = "Windows.UI.Xaml.FrameworkView";
            }
            impl ::std::convert::From<FrameworkView> for ::windows::IInspectable {
                fn from(value: FrameworkView) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FrameworkView> for ::windows::IInspectable {
                fn from(value: &FrameworkView) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FrameworkView {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a FrameworkView {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FrameworkView> for super::super::ApplicationModel::Core::IFrameworkView {
                fn from(value: FrameworkView) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FrameworkView> for super::super::ApplicationModel::Core::IFrameworkView {
                fn from(value: &FrameworkView) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::super::ApplicationModel::Core::IFrameworkView>
                for FrameworkView
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::ApplicationModel::Core::IFrameworkView>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::ApplicationModel::Core::IFrameworkView,
                    >::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, super::super::ApplicationModel::Core::IFrameworkView>
                for &'a FrameworkView
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::ApplicationModel::Core::IFrameworkView>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::ApplicationModel::Core::IFrameworkView,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for FrameworkView {}
            unsafe impl ::std::marker::Sync for FrameworkView {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontNumeralAlignment(pub i32);
            impl FontNumeralAlignment {
                pub const Normal: FontNumeralAlignment = FontNumeralAlignment(0i32);
                pub const Proportional: FontNumeralAlignment = FontNumeralAlignment(1i32);
                pub const Tabular: FontNumeralAlignment = FontNumeralAlignment(2i32);
            }
            impl ::std::convert::From<i32> for FontNumeralAlignment {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontNumeralAlignment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontNumeralAlignment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.FontNumeralAlignment;i4)",
                );
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ApplicationHighContrastAdjustment(pub u32);
            impl ApplicationHighContrastAdjustment {
                pub const None: ApplicationHighContrastAdjustment =
                    ApplicationHighContrastAdjustment(0u32);
                pub const Auto: ApplicationHighContrastAdjustment =
                    ApplicationHighContrastAdjustment(4294967295u32);
            }
            impl ::std::convert::From<u32> for ApplicationHighContrastAdjustment {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ApplicationHighContrastAdjustment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ApplicationHighContrastAdjustment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ApplicationHighContrastAdjustment;u4)",
                );
            }
            impl ::std::ops::BitOr for ApplicationHighContrastAdjustment {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for ApplicationHighContrastAdjustment {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
            impl ::std::ops::BitOrAssign for ApplicationHighContrastAdjustment {
                fn bitor_assign(&mut self, rhs: Self) {
                    self.0.bitor_assign(rhs.0)
                }
            }
            impl ::std::ops::BitAndAssign for ApplicationHighContrastAdjustment {
                fn bitand_assign(&mut self, rhs: Self) {
                    self.0.bitand_assign(rhs.0)
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SuspendingEventHandler(::windows::IUnknown);
            impl SuspendingEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<
                                super::super::ApplicationModel::SuspendingEventArgs,
                            >,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = SuspendingEventHandler_box::<F> {
                        vtable: &SuspendingEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::SuspendingEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SuspendingEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({23429465-e36a-40e2-b139-a4704602a6e1})",
                );
            }
            unsafe impl ::windows::Interface for SuspendingEventHandler {
                type Vtable = SuspendingEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    591565925,
                    58218,
                    16610,
                    [177, 57, 164, 112, 70, 2, 166, 225],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct SuspendingEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct SuspendingEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<super::super::ApplicationModel::SuspendingEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const SuspendingEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<
                                super::super::ApplicationModel::SuspendingEventArgs,
                            >,
                        ) -> ::windows::Result<()>
                        + 'static,
                > SuspendingEventHandler_box<F>
            {
                const VTABLE: SuspendingEventHandler_abi = SuspendingEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<SuspendingEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: super :: ApplicationModel :: SuspendingEventArgs as :: windows :: Abi > :: Abi as * const < super :: super :: ApplicationModel :: SuspendingEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IFrameworkTemplateFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IFrameworkTemplateFactory {
                type Vtable = IFrameworkTemplateFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    444113061,
                    37757,
                    18132,
                    [131, 43, 148, 255, 20, 218, 176, 97],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IFrameworkTemplateFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FrameworkTemplate(::windows::IInspectable);
            impl FrameworkTemplate {
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FrameworkTemplate {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.FrameworkTemplate;{a1e254d8-a446-4a27-9a9d-a0f59e1258a5})",
                );
            }
            unsafe impl ::windows::Interface for FrameworkTemplate {
                type Vtable = IFrameworkTemplate_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2715964632,
                    42054,
                    18983,
                    [154, 157, 160, 245, 158, 18, 88, 165],
                );
            }
            impl ::windows::RuntimeName for FrameworkTemplate {
                const NAME: &'static str = "Windows.UI.Xaml.FrameworkTemplate";
            }
            impl ::std::convert::From<FrameworkTemplate> for ::windows::IInspectable {
                fn from(value: FrameworkTemplate) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FrameworkTemplate> for ::windows::IInspectable {
                fn from(value: &FrameworkTemplate) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FrameworkTemplate {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a FrameworkTemplate {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FrameworkTemplate> for DependencyObject {
                fn from(value: FrameworkTemplate) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&FrameworkTemplate> for DependencyObject {
                fn from(value: &FrameworkTemplate) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for FrameworkTemplate {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a FrameworkTemplate {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for FrameworkTemplate {}
            unsafe impl ::std::marker::Sync for FrameworkTemplate {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDataTemplateStatics2(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataTemplateStatics2 {
                type Vtable = IDataTemplateStatics2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2331475315,
                    43521,
                    18206,
                    [190, 221, 139, 173, 134, 33, 155, 119],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataTemplateStatics2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    element: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    element: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDataTemplateKeyFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataTemplateKeyFactory {
                type Vtable = IDataTemplateKeyFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3916114265,
                    55682,
                    16722,
                    [145, 203, 222, 14, 77, 253, 118, 147],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataTemplateKeyFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    datatype: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IPropertyPath(::windows::IInspectable);
            unsafe impl ::windows::Interface for IPropertyPath {
                type Vtable = IPropertyPath_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    806247818,
                    8179,
                    19756,
                    [149, 236, 39, 248, 29, 235, 172, 184],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IPropertyPath_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStyle(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStyle {
                type Vtable = IStyle_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3299471909,
                    40375,
                    19069,
                    [182, 209, 247, 78, 219, 146, 147, 194],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStyle_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IStyleFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IStyleFactory {
                type Vtable = IStyleFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2741511395,
                    15745,
                    19685,
                    [170, 81, 139, 65, 15, 96, 47, 205],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IStyleFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct Style(::windows::IInspectable);
            impl Style {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        Style,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IsSealed(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Setters(&self) -> ::windows::Result<SetterBaseCollection> {
                    let this = self;
                    unsafe {
                        let mut result__: <SetterBaseCollection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<SetterBaseCollection>(result__)
                    }
                }
                pub fn BasedOn(&self) -> ::windows::Result<Style> {
                    let this = self;
                    unsafe {
                        let mut result__: <Style as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Style>(result__)
                    }
                }
                pub fn SetBasedOn<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, Style>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Seal(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IStyleFactory<R, F: FnOnce(&IStyleFactory) -> ::windows::Result<R>>(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<Style, IStyleFactory> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for Style {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.Style;{c4a9f225-9db7-4a7d-b6d1-f74edb9293c2})",
                );
            }
            unsafe impl ::windows::Interface for Style {
                type Vtable = IStyle_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3299471909,
                    40375,
                    19069,
                    [182, 209, 247, 78, 219, 146, 147, 194],
                );
            }
            impl ::windows::RuntimeName for Style {
                const NAME: &'static str = "Windows.UI.Xaml.Style";
            }
            impl ::std::convert::From<Style> for ::windows::IInspectable {
                fn from(value: Style) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&Style> for ::windows::IInspectable {
                fn from(value: &Style) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for Style {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a Style {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<Style> for DependencyObject {
                fn from(value: Style) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&Style> for DependencyObject {
                fn from(value: &Style) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for Style {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a Style {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for Style {}
            unsafe impl ::std::marker::Sync for Style {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct TextAlignment(pub i32);
            impl TextAlignment {
                pub const Center: TextAlignment = TextAlignment(0i32);
                pub const Left: TextAlignment = TextAlignment(1i32);
                pub const Start: TextAlignment = TextAlignment(1i32);
                pub const Right: TextAlignment = TextAlignment(2i32);
                pub const End: TextAlignment = TextAlignment(2i32);
                pub const Justify: TextAlignment = TextAlignment(3i32);
                pub const DetectFromContent: TextAlignment = TextAlignment(4i32);
            }
            impl ::std::convert::From<i32> for TextAlignment {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for TextAlignment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for TextAlignment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.TextAlignment;i4)");
            }
            #[repr(C)]
            #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
            pub struct Thickness {
                pub Left: f64,
                pub Top: f64,
                pub Right: f64,
                pub Bottom: f64,
            }
            impl Thickness {}
            impl ::std::default::Default for Thickness {
                fn default() -> Self {
                    Self {
                        Left: 0.0,
                        Top: 0.0,
                        Right: 0.0,
                        Bottom: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for Thickness {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("Thickness")
                        .field("Left", &format_args!("{:?}", self.Left))
                        .field("Top", &format_args!("{:?}", self.Top))
                        .field("Right", &format_args!("{:?}", self.Right))
                        .field("Bottom", &format_args!("{:?}", self.Bottom))
                        .finish()
                }
            }
            impl ::std::cmp::PartialEq for Thickness {
                fn eq(&self, other: &Self) -> bool {
                    self.Left == other.Left
                        && self.Top == other.Top
                        && self.Right == other.Right
                        && self.Bottom == other.Bottom
                }
            }
            impl ::std::cmp::Eq for Thickness {}
            unsafe impl ::windows::Abi for Thickness {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for Thickness {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.UI.Xaml.Thickness;f8;f8;f8;f8)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ApplicationInitializationCallback(::windows::IUnknown);
            impl ApplicationInitializationCallback {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<ApplicationInitializationCallbackParams>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = ApplicationInitializationCallback_box::<F> {
                        vtable: &ApplicationInitializationCallback_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    p: impl ::windows::IntoParam<'a, ApplicationInitializationCallbackParams>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            p.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for ApplicationInitializationCallback {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({b6351c55-c284-46e4-8310-fb0967fab76f})",
                );
            }
            unsafe impl ::windows::Interface for ApplicationInitializationCallback {
                type Vtable = ApplicationInitializationCallback_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3056933973,
                    49796,
                    18148,
                    [131, 16, 251, 9, 103, 250, 183, 111],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ApplicationInitializationCallback_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    p: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct ApplicationInitializationCallback_box<
                F: FnMut(
                        &::std::option::Option<ApplicationInitializationCallbackParams>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const ApplicationInitializationCallback_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<ApplicationInitializationCallbackParams>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > ApplicationInitializationCallback_box<F>
            {
                const VTABLE: ApplicationInitializationCallback_abi =
                    ApplicationInitializationCallback_abi(
                        Self::QueryInterface,
                        Self::AddRef,
                        Self::Release,
                        Self::Invoke,
                    );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<ApplicationInitializationCallback as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    p: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & p as * const < ApplicationInitializationCallbackParams as :: windows :: Abi > :: Abi as * const < ApplicationInitializationCallbackParams as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DependencyPropertyChangedEventHandler(::windows::IUnknown);
            impl DependencyPropertyChangedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<DependencyPropertyChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = DependencyPropertyChangedEventHandler_box::<F> {
                        vtable: &DependencyPropertyChangedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, DependencyPropertyChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DependencyPropertyChangedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({09223e5a-75be-4499-8180-1ddc005421c0})",
                );
            }
            unsafe impl ::windows::Interface for DependencyPropertyChangedEventHandler {
                type Vtable = DependencyPropertyChangedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    153239130,
                    30142,
                    17561,
                    [129, 128, 29, 220, 0, 84, 33, 192],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct DependencyPropertyChangedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct DependencyPropertyChangedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<DependencyPropertyChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const DependencyPropertyChangedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<DependencyPropertyChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > DependencyPropertyChangedEventHandler_box<F>
            {
                const VTABLE: DependencyPropertyChangedEventHandler_abi =
                    DependencyPropertyChangedEventHandler_abi(
                        Self::QueryInterface,
                        Self::AddRef,
                        Self::Release,
                        Self::Invoke,
                    );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<DependencyPropertyChangedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < DependencyPropertyChangedEventArgs as :: windows :: Abi > :: Abi as * const < DependencyPropertyChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct TriggerActionCollection(::windows::IInspectable);
            impl TriggerActionCollection {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        TriggerActionCollection,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn GetAt(&self, index: u32) -> ::windows::Result<TriggerAction> {
                    let this = self;
                    unsafe {
                        let mut result__: <TriggerAction as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<TriggerAction>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVectorView<TriggerAction>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVectorView<
                            TriggerAction,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVectorView :: < TriggerAction > > ( result__ )
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, TriggerAction>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, TriggerAction>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, TriggerAction>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, TriggerAction>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<TriggerAction as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<TriggerAction as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn First(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IIterator<TriggerAction>,
                > {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<TriggerAction>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            TriggerAction,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .6 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IIterator :: < TriggerAction > > ( result__ )
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for TriggerActionCollection {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.TriggerActionCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Windows.UI.Xaml.TriggerAction;{a2c0df02-63d5-4b46-9b83-0868d3079621})))" ) ;
            }
            unsafe impl ::windows::Interface for TriggerActionCollection {
                type Vtable = super::super::Foundation::Collections::IVector_abi<TriggerAction>;
                const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < super :: super :: Foundation :: Collections :: IVector :: < TriggerAction > as :: windows :: RuntimeType > :: SIGNATURE ) ;
            }
            impl ::windows::RuntimeName for TriggerActionCollection {
                const NAME: &'static str = "Windows.UI.Xaml.TriggerActionCollection";
            }
            impl ::std::convert::From<TriggerActionCollection> for ::windows::IInspectable {
                fn from(value: TriggerActionCollection) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TriggerActionCollection> for ::windows::IInspectable {
                fn from(value: &TriggerActionCollection) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TriggerActionCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TriggerActionCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<TriggerActionCollection>
                for super::super::Foundation::Collections::IVector<TriggerAction>
            {
                fn from(value: TriggerActionCollection) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&TriggerActionCollection>
                for super::super::Foundation::Collections::IVector<TriggerAction>
            {
                fn from(value: &TriggerActionCollection) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IVector<TriggerAction>,
                > for TriggerActionCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IVector<TriggerAction>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<TriggerAction>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IVector<TriggerAction>,
                > for &'a TriggerActionCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IVector<TriggerAction>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<TriggerAction>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<TriggerActionCollection>
                for super::super::Foundation::Collections::IIterable<TriggerAction>
            {
                fn from(value: TriggerActionCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&TriggerActionCollection>
                for super::super::Foundation::Collections::IIterable<TriggerAction>
            {
                fn from(value: &TriggerActionCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerAction>,
                > for TriggerActionCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerAction>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<TriggerAction>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerAction>,
                > for &'a TriggerActionCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerAction>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<TriggerAction>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for TriggerActionCollection {}
            unsafe impl ::std::marker::Sync for TriggerActionCollection {}
            impl ::std::iter::IntoIterator for TriggerActionCollection {
                type Item = TriggerAction;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a TriggerActionCollection {
                type Item = TriggerAction;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct EnteredBackgroundEventHandler(::windows::IUnknown);
            impl EnteredBackgroundEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<
                                super::super::ApplicationModel::EnteredBackgroundEventArgs,
                            >,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = EnteredBackgroundEventHandler_box::<F> {
                        vtable: &EnteredBackgroundEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::EnteredBackgroundEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for EnteredBackgroundEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({93a956ae-1d7f-438b-b7b8-227d96b609c0})",
                );
            }
            unsafe impl ::windows::Interface for EnteredBackgroundEventHandler {
                type Vtable = EnteredBackgroundEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2477348526,
                    7551,
                    17291,
                    [183, 184, 34, 125, 150, 182, 9, 192],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct EnteredBackgroundEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct EnteredBackgroundEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<
                            super::super::ApplicationModel::EnteredBackgroundEventArgs,
                        >,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const EnteredBackgroundEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<
                                super::super::ApplicationModel::EnteredBackgroundEventArgs,
                            >,
                        ) -> ::windows::Result<()>
                        + 'static,
                > EnteredBackgroundEventHandler_box<F>
            {
                const VTABLE: EnteredBackgroundEventHandler_abi = EnteredBackgroundEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<EnteredBackgroundEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: super :: ApplicationModel :: EnteredBackgroundEventArgs as :: windows :: Abi > :: Abi as * const < super :: super :: ApplicationModel :: EnteredBackgroundEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ScalarTransition(::windows::IInspectable);
            impl ScalarTransition {
                pub fn Duration(&self) -> ::windows::Result<super::super::Foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::TimeSpan>(result__)
                    }
                }
                pub fn SetDuration<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, super::super::Foundation::TimeSpan>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<ScalarTransition> {
                    Self::IScalarTransitionFactory(|this| unsafe {
                        let mut result__: <ScalarTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<ScalarTransition>(result__)
                    })
                }
                pub fn IScalarTransitionFactory<
                    R,
                    F: FnOnce(&IScalarTransitionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ScalarTransition,
                        IScalarTransitionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ScalarTransition {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.ScalarTransition;{4cb68238-e15d-524e-a73c-9d4dcfbea226})",
                );
            }
            unsafe impl ::windows::Interface for ScalarTransition {
                type Vtable = IScalarTransition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1287029304,
                    57693,
                    21070,
                    [167, 60, 157, 77, 207, 190, 162, 38],
                );
            }
            impl ::windows::RuntimeName for ScalarTransition {
                const NAME: &'static str = "Windows.UI.Xaml.ScalarTransition";
            }
            impl ::std::convert::From<ScalarTransition> for ::windows::IInspectable {
                fn from(value: ScalarTransition) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ScalarTransition> for ::windows::IInspectable {
                fn from(value: &ScalarTransition) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ScalarTransition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ScalarTransition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for ScalarTransition {}
            unsafe impl ::std::marker::Sync for ScalarTransition {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IWindow(::windows::IInspectable);
            unsafe impl ::windows::Interface for IWindow {
                type Vtable = IWindow_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    846599805,
                    51702,
                    17965,
                    [157, 226, 174, 76, 31, 216, 194, 229],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IWindow_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut bool,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
                pub unsafe extern "system" fn(),
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    handler: ::windows::RawPtr,
                    result__: *mut super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    token: super::super::Foundation::EventRegistrationToken,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct Window(::windows::IInspectable);
            impl Window {
                pub fn Visible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn Content(&self) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn SetContent<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Activated<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, WindowActivatedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveActivated<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Closed<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, WindowClosedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).14)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveClosed<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn SizeChanged<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, WindowSizeChangedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveSizeChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn VisibilityChanged<'a>(
                    &self,
                    handler: impl ::windows::IntoParam<'a, WindowVisibilityChangedEventHandler>,
                ) -> ::windows::Result<super::super::Foundation::EventRegistrationToken>
                {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).18)(
                            ::windows::Abi::abi(this),
                            handler.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::EventRegistrationToken>(result__)
                    }
                }
                pub fn RemoveVisibilityChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).19)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Activate(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).20)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Close(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).21)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn SetTitleBar<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, UIElement>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IWindow2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Current() -> ::windows::Result<Window> {
                    Self::IWindowStatics(|this| unsafe {
                        let mut result__: <Window as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Window>(result__)
                    })
                }
                pub fn IWindowStatics<R, F: FnOnce(&IWindowStatics) -> ::windows::Result<R>>(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<Window, IWindowStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for Window {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.Window;{3276167d-c9f6-462d-9de2-ae4c1fd8c2e5})",
                );
            }
            unsafe impl ::windows::Interface for Window {
                type Vtable = IWindow_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    846599805,
                    51702,
                    17965,
                    [157, 226, 174, 76, 31, 216, 194, 229],
                );
            }
            impl ::windows::RuntimeName for Window {
                const NAME: &'static str = "Windows.UI.Xaml.Window";
            }
            impl ::std::convert::From<Window> for ::windows::IInspectable {
                fn from(value: Window) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&Window> for ::windows::IInspectable {
                fn from(value: &Window) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for Window {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a Window {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for Window {}
            unsafe impl ::std::marker::Sync for Window {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDropCompletedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDropCompletedEventArgs {
                type Vtable = IDropCompletedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1817166216,
                    38332,
                    16993,
                    [158, 197, 33, 202, 182, 119, 183, 52],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDropCompletedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(),
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DropCompletedEventArgs(::windows::IInspectable);
            impl DropCompletedEventArgs {
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DropCompletedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.DropCompletedEventArgs;{6c4fc188-95bc-4261-9ec5-21cab677b734})" ) ;
            }
            unsafe impl ::windows::Interface for DropCompletedEventArgs {
                type Vtable = IDropCompletedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1817166216,
                    38332,
                    16993,
                    [158, 197, 33, 202, 182, 119, 183, 52],
                );
            }
            impl ::windows::RuntimeName for DropCompletedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.DropCompletedEventArgs";
            }
            impl ::std::convert::From<DropCompletedEventArgs> for ::windows::IInspectable {
                fn from(value: DropCompletedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DropCompletedEventArgs> for ::windows::IInspectable {
                fn from(value: &DropCompletedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DropCompletedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DropCompletedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DropCompletedEventArgs> for RoutedEventArgs {
                fn from(value: DropCompletedEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&DropCompletedEventArgs> for RoutedEventArgs {
                fn from(value: &DropCompletedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for DropCompletedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a DropCompletedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for DropCompletedEventArgs {}
            unsafe impl ::std::marker::Sync for DropCompletedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ElementTheme(pub i32);
            impl ElementTheme {
                pub const Default: ElementTheme = ElementTheme(0i32);
                pub const Light: ElementTheme = ElementTheme(1i32);
                pub const Dark: ElementTheme = ElementTheme(2i32);
            }
            impl ::std::convert::From<i32> for ElementTheme {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ElementTheme {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ElementTheme {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.ElementTheme;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IBrushTransitionFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IBrushTransitionFactory {
                type Vtable = IBrushTransitionFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1035891560,
                    5076,
                    20748,
                    [162, 21, 117, 57, 244, 120, 123, 82],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IBrushTransitionFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct BrushTransition(::windows::IInspectable);
            impl BrushTransition {
                pub fn Duration(&self) -> ::windows::Result<super::super::Foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::TimeSpan>(result__)
                    }
                }
                pub fn SetDuration<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, super::super::Foundation::TimeSpan>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<BrushTransition> {
                    Self::IBrushTransitionFactory(|this| unsafe {
                        let mut result__: <BrushTransition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<BrushTransition>(result__)
                    })
                }
                pub fn IBrushTransitionFactory<
                    R,
                    F: FnOnce(&IBrushTransitionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        BrushTransition,
                        IBrushTransitionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for BrushTransition {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.BrushTransition;{1116972c-9dad-5429-a7dd-b2b7d061ab8e})",
                );
            }
            unsafe impl ::windows::Interface for BrushTransition {
                type Vtable = IBrushTransition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    286693164,
                    40365,
                    21545,
                    [167, 221, 178, 183, 208, 97, 171, 142],
                );
            }
            impl ::windows::RuntimeName for BrushTransition {
                const NAME: &'static str = "Windows.UI.Xaml.BrushTransition";
            }
            impl ::std::convert::From<BrushTransition> for ::windows::IInspectable {
                fn from(value: BrushTransition) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&BrushTransition> for ::windows::IInspectable {
                fn from(value: &BrushTransition) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for BrushTransition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a BrushTransition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for BrushTransition {}
            unsafe impl ::std::marker::Sync for BrushTransition {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IEventTrigger(::windows::IInspectable);
            unsafe impl ::windows::Interface for IEventTrigger {
                type Vtable = IEventTrigger_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3740858453,
                    2889,
                    16519,
                    [177, 169, 184, 179, 132, 136, 247, 134],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IEventTrigger_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISetter2(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISetter2 {
                type Vtable = ISetter2_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1880528225,
                    1457,
                    20387,
                    [157, 83, 142, 12, 140, 116, 122, 252],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISetter2_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IThicknessHelperStatics(::windows::IInspectable);
            unsafe impl ::windows::Interface for IThicknessHelperStatics {
                type Vtable = IThicknessHelperStatics_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3231259260,
                    1804,
                    19878,
                    [135, 132, 1, 202, 128, 14, 183, 58],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IThicknessHelperStatics_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    left: f64,
                    top: f64,
                    right: f64,
                    bottom: f64,
                    result__: *mut Thickness,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    uniformlength: f64,
                    result__: *mut Thickness,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct ThicknessHelper(::windows::IInspectable);
            impl ThicknessHelper {
                pub fn FromLengths(
                    left: f64,
                    top: f64,
                    right: f64,
                    bottom: f64,
                ) -> ::windows::Result<Thickness> {
                    Self::IThicknessHelperStatics(|this| unsafe {
                        let mut result__: <Thickness as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            left,
                            top,
                            right,
                            bottom,
                            &mut result__,
                        )
                        .from_abi::<Thickness>(result__)
                    })
                }
                pub fn FromUniformLength(uniformlength: f64) -> ::windows::Result<Thickness> {
                    Self::IThicknessHelperStatics(|this| unsafe {
                        let mut result__: <Thickness as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            uniformlength,
                            &mut result__,
                        )
                        .from_abi::<Thickness>(result__)
                    })
                }
                pub fn IThicknessHelperStatics<
                    R,
                    F: FnOnce(&IThicknessHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        ThicknessHelper,
                        IThicknessHelperStatics,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for ThicknessHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.ThicknessHelper;{a86bae4b-1e8f-4eeb-9013-0b2838a97b34})",
                );
            }
            unsafe impl ::windows::Interface for ThicknessHelper {
                type Vtable = IThicknessHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2825629259,
                    7823,
                    20203,
                    [144, 19, 11, 40, 56, 169, 123, 52],
                );
            }
            impl ::windows::RuntimeName for ThicknessHelper {
                const NAME: &'static str = "Windows.UI.Xaml.ThicknessHelper";
            }
            impl ::std::convert::From<ThicknessHelper> for ::windows::IInspectable {
                fn from(value: ThicknessHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&ThicknessHelper> for ::windows::IInspectable {
                fn from(value: &ThicknessHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for ThicknessHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a ThicknessHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for ThicknessHelper {}
            unsafe impl ::std::marker::Sync for ThicknessHelper {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct TriggerCollection(::windows::IInspectable);
            impl TriggerCollection {
                pub fn GetAt(&self, index: u32) -> ::windows::Result<TriggerBase> {
                    let this = self;
                    unsafe {
                        let mut result__: <TriggerBase as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            index,
                            &mut result__,
                        )
                        .from_abi::<TriggerBase>(result__)
                    }
                }
                pub fn Size(&self) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn GetView(
                    &self,
                ) -> ::windows::Result<
                    super::super::Foundation::Collections::IVectorView<TriggerBase>,
                > {
                    let this = self;
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IVectorView<
                            TriggerBase,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        ( :: windows :: Interface :: vtable ( this ) .8 ) ( :: windows :: Abi :: abi ( this ) , & mut result__ ) . from_abi :: < super :: super :: Foundation :: Collections :: IVectorView :: < TriggerBase > > ( result__ )
                    }
                }
                pub fn IndexOf<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, TriggerBase>,
                    index: &mut u32,
                ) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                            index,
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn SetAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, TriggerBase>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn InsertAt<'a>(
                    &self,
                    index: u32,
                    value: impl ::windows::IntoParam<'a, TriggerBase>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(
                            ::windows::Abi::abi(this),
                            index,
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAt(&self, index: u32) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this), index)
                            .ok()
                    }
                }
                pub fn Append<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, TriggerBase>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).13)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn RemoveAtEnd(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).14)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Clear(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).15)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn GetMany(
                    &self,
                    startindex: u32,
                    items: &mut [<TriggerBase as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<u32> {
                    let this = self;
                    unsafe {
                        let mut result__: <u32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).16)(
                            ::windows::Abi::abi(this),
                            startindex,
                            items.len() as u32,
                            ::std::mem::transmute_copy(&items),
                            &mut result__,
                        )
                        .from_abi::<u32>(result__)
                    }
                }
                pub fn ReplaceAll(
                    &self,
                    items: &[<TriggerBase as ::windows::RuntimeType>::DefaultType],
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).17)(
                            ::windows::Abi::abi(this),
                            items.len() as u32,
                            ::std::mem::transmute(items.as_ptr()),
                        )
                        .ok()
                    }
                }
                pub fn First(
                    &self,
                ) -> ::windows::Result<super::super::Foundation::Collections::IIterator<TriggerBase>>
                {
                    let this = &::windows::Interface::cast::<
                        super::super::Foundation::Collections::IIterable<TriggerBase>,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__: <super::super::Foundation::Collections::IIterator<
                            TriggerBase,
                        > as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::Collections::IIterator<TriggerBase>>(
                            result__,
                        )
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for TriggerCollection {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.TriggerCollection;pinterface({913337e9-11a1-4345-a3a2-4e7f956e222d};rc(Windows.UI.Xaml.TriggerBase;{e7ea222f-dee6-4393-a8b2-8923d641f395})))" ) ;
            }
            unsafe impl ::windows::Interface for TriggerCollection {
                type Vtable = super::super::Foundation::Collections::IVector_abi<TriggerBase>;
                const IID : :: windows :: Guid = :: windows :: Guid :: from_signature ( < super :: super :: Foundation :: Collections :: IVector :: < TriggerBase > as :: windows :: RuntimeType > :: SIGNATURE ) ;
            }
            impl ::windows::RuntimeName for TriggerCollection {
                const NAME: &'static str = "Windows.UI.Xaml.TriggerCollection";
            }
            impl ::std::convert::From<TriggerCollection> for ::windows::IInspectable {
                fn from(value: TriggerCollection) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&TriggerCollection> for ::windows::IInspectable {
                fn from(value: &TriggerCollection) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TriggerCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TriggerCollection {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<TriggerCollection>
                for super::super::Foundation::Collections::IVector<TriggerBase>
            {
                fn from(value: TriggerCollection) -> Self {
                    unsafe { ::std::mem::transmute(value) }
                }
            }
            impl ::std::convert::From<&TriggerCollection>
                for super::super::Foundation::Collections::IVector<TriggerBase>
            {
                fn from(value: &TriggerCollection) -> Self {
                    ::std::convert::From::from(::std::clone::Clone::clone(value))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IVector<TriggerBase>,
                > for TriggerCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IVector<TriggerBase>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<TriggerBase>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IVector<TriggerBase>,
                > for &'a TriggerCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::Foundation::Collections::IVector<TriggerBase>>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IVector<TriggerBase>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            impl ::std::convert::From<TriggerCollection>
                for super::super::Foundation::Collections::IIterable<TriggerBase>
            {
                fn from(value: TriggerCollection) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&TriggerCollection>
                for super::super::Foundation::Collections::IIterable<TriggerBase>
            {
                fn from(value: &TriggerCollection) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerBase>,
                > for TriggerCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerBase>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<TriggerBase>,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerBase>,
                > for &'a TriggerCollection
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<
                    'a,
                    super::super::Foundation::Collections::IIterable<TriggerBase>,
                > {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::Foundation::Collections::IIterable<TriggerBase>,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for TriggerCollection {}
            unsafe impl ::std::marker::Sync for TriggerCollection {}
            impl ::std::iter::IntoIterator for TriggerCollection {
                type Item = TriggerBase;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            impl<'a> ::std::iter::IntoIterator for &'a TriggerCollection {
                type Item = TriggerBase;
                type IntoIter = super::super::Foundation::Collections::VectorIterator<Self::Item>;
                fn into_iter(self) -> Self::IntoIter {
                    super::super::Foundation::Collections::VectorIterator::new(self.into())
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DependencyPropertyChangedCallback(::windows::IUnknown);
            impl DependencyPropertyChangedCallback {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<DependencyObject>,
                            &::std::option::Option<DependencyProperty>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = DependencyPropertyChangedCallback_box::<F> {
                        vtable: &DependencyPropertyChangedCallback_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, DependencyObject>,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DependencyPropertyChangedCallback {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({45883d16-27bf-4bc1-ac26-94c1601f3a49})",
                );
            }
            unsafe impl ::windows::Interface for DependencyPropertyChangedCallback {
                type Vtable = DependencyPropertyChangedCallback_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1166556438,
                    10175,
                    19393,
                    [172, 38, 148, 193, 96, 31, 58, 73],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct DependencyPropertyChangedCallback_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct DependencyPropertyChangedCallback_box<
                F: FnMut(
                        &::std::option::Option<DependencyObject>,
                        &::std::option::Option<DependencyProperty>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const DependencyPropertyChangedCallback_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<DependencyObject>,
                            &::std::option::Option<DependencyProperty>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > DependencyPropertyChangedCallback_box<F>
            {
                const VTABLE: DependencyPropertyChangedCallback_abi =
                    DependencyPropertyChangedCallback_abi(
                        Self::QueryInterface,
                        Self::AddRef,
                        Self::Release,
                        Self::Invoke,
                    );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<DependencyPropertyChangedCallback as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    dp: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ((*this).invoke)(
                        &*(&sender as *const <DependencyObject as ::windows::Abi>::Abi
                            as *const <DependencyObject as ::windows::RuntimeType>::DefaultType),
                        &*(&dp as *const <DependencyProperty as ::windows::Abi>::Abi
                            as *const <DependencyProperty as ::windows::RuntimeType>::DefaultType),
                    )
                    .into()
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDataTemplate(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDataTemplate {
                type Vtable = IDataTemplate_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2568007367,
                    35509,
                    16664,
                    [155, 198, 9, 244, 90, 53, 7, 61],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDataTemplate_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct IElementFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IElementFactory {
                type Vtable = IElementFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    399682960,
                    4976,
                    21960,
                    [128, 225, 120, 180, 144, 4, 169, 225],
                );
            }
            impl IElementFactory {
                pub fn GetElement<'a>(
                    &self,
                    args: impl ::windows::IntoParam<'a, ElementFactoryGetArgs>,
                ) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn RecycleElement<'a>(
                    &self,
                    args: impl ::windows::IntoParam<'a, ElementFactoryRecycleArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for IElementFactory {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"{17d2ad90-1370-55c8-80e1-78b49004a9e1}");
            }
            impl ::std::convert::From<IElementFactory> for ::windows::IInspectable {
                fn from(value: IElementFactory) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&IElementFactory> for ::windows::IInspectable {
                fn from(value: &IElementFactory) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for IElementFactory {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a IElementFactory {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IElementFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    args: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DataTemplate(::windows::IInspectable);
            impl DataTemplate {
                pub fn LoadContent(&self) -> ::windows::Result<DependencyObject> {
                    let this = self;
                    unsafe {
                        let mut result__: <DependencyObject as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyObject>(result__)
                    }
                }
                pub fn ExtensionInstanceProperty() -> ::windows::Result<DependencyProperty> {
                    Self::IDataTemplateStatics2(|this| unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    })
                }
                pub fn GetExtensionInstance<'a>(
                    element: impl ::windows::IntoParam<'a, FrameworkElement>,
                ) -> ::windows::Result<IDataTemplateExtension> {
                    Self::IDataTemplateStatics2(|this| unsafe {
                        let mut result__: <IDataTemplateExtension as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            element.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<IDataTemplateExtension>(result__)
                    })
                }
                pub fn SetExtensionInstance<'a>(
                    element: impl ::windows::IntoParam<'a, FrameworkElement>,
                    value: impl ::windows::IntoParam<'a, IDataTemplateExtension>,
                ) -> ::windows::Result<()> {
                    Self::IDataTemplateStatics2(|this| unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            element.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    })
                }
                pub fn new() -> ::windows::Result<DataTemplate> {
                    Self::IDataTemplateFactory(|this| unsafe {
                        let mut result__: <DataTemplate as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<DataTemplate>(result__)
                    })
                }
                pub fn GetElement<'a>(
                    &self,
                    args: impl ::windows::IntoParam<'a, ElementFactoryGetArgs>,
                ) -> ::windows::Result<UIElement> {
                    let this = &::windows::Interface::cast::<IElementFactory>(self).unwrap();
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn RecycleElement<'a>(
                    &self,
                    args: impl ::windows::IntoParam<'a, ElementFactoryRecycleArgs>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IElementFactory>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            args.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IDataTemplateStatics2<
                    R,
                    F: FnOnce(&IDataTemplateStatics2) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        DataTemplate,
                        IDataTemplateStatics2,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn IDataTemplateFactory<
                    R,
                    F: FnOnce(&IDataTemplateFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<DataTemplate, IDataTemplateFactory> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for DataTemplate {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DataTemplate;{9910aec7-8ab5-4118-9bc6-09f45a35073d})",
                );
            }
            unsafe impl ::windows::Interface for DataTemplate {
                type Vtable = IDataTemplate_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2568007367,
                    35509,
                    16664,
                    [155, 198, 9, 244, 90, 53, 7, 61],
                );
            }
            impl ::windows::RuntimeName for DataTemplate {
                const NAME: &'static str = "Windows.UI.Xaml.DataTemplate";
            }
            impl ::std::convert::From<DataTemplate> for ::windows::IInspectable {
                fn from(value: DataTemplate) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DataTemplate> for ::windows::IInspectable {
                fn from(value: &DataTemplate) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<DataTemplate> for IElementFactory {
                fn from(value: DataTemplate) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&DataTemplate> for IElementFactory {
                fn from(value: &DataTemplate) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, IElementFactory> for DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, IElementFactory> {
                    ::windows::Param::Owned(::std::convert::Into::<IElementFactory>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, IElementFactory> for &'a DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, IElementFactory> {
                    ::windows::Param::Owned(::std::convert::Into::<IElementFactory>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataTemplate> for FrameworkTemplate {
                fn from(value: DataTemplate) -> Self {
                    ::std::convert::Into::<FrameworkTemplate>::into(&value)
                }
            }
            impl ::std::convert::From<&DataTemplate> for FrameworkTemplate {
                fn from(value: &DataTemplate) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, FrameworkTemplate> for DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, FrameworkTemplate> {
                    ::windows::Param::Owned(::std::convert::Into::<FrameworkTemplate>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, FrameworkTemplate> for &'a DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, FrameworkTemplate> {
                    ::windows::Param::Owned(::std::convert::Into::<FrameworkTemplate>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<DataTemplate> for DependencyObject {
                fn from(value: DataTemplate) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&DataTemplate> for DependencyObject {
                fn from(value: &DataTemplate) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a DataTemplate {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for DataTemplate {}
            unsafe impl ::std::marker::Sync for DataTemplate {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IDispatcherTimerFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for IDispatcherTimerFactory {
                type Vtable = IDispatcherTimerFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3918929518,
                    13862,
                    16442,
                    [175, 224, 4, 13, 88, 22, 86, 50],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IDispatcherTimerFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    baseinterface: ::windows::RawPtr,
                    innerinterface: *mut ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
            pub struct GridLength {
                pub Value: f64,
                pub GridUnitType: GridUnitType,
            }
            impl GridLength {}
            impl ::std::default::Default for GridLength {
                fn default() -> Self {
                    Self {
                        Value: 0.0,
                        GridUnitType: ::std::default::Default::default(),
                    }
                }
            }
            impl ::std::fmt::Debug for GridLength {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("GridLength")
                        .field("Value", &format_args!("{:?}", self.Value))
                        .field("GridUnitType", &format_args!("{:?}", self.GridUnitType))
                        .finish()
                }
            }
            impl ::std::cmp::PartialEq for GridLength {
                fn eq(&self, other: &Self) -> bool {
                    self.Value == other.Value && self.GridUnitType == other.GridUnitType
                }
            }
            impl ::std::cmp::Eq for GridLength {}
            unsafe impl ::windows::Abi for GridLength {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for GridLength {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.UI.Xaml.GridLength;f8;enum(Windows.UI.Xaml.GridUnitType;i4))",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct EventTrigger(::windows::IInspectable);
            impl EventTrigger {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        EventTrigger,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn RoutedEvent(&self) -> ::windows::Result<RoutedEvent> {
                    let this = self;
                    unsafe {
                        let mut result__: <RoutedEvent as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<RoutedEvent>(result__)
                    }
                }
                pub fn SetRoutedEvent<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, RoutedEvent>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Actions(&self) -> ::windows::Result<TriggerActionCollection> {
                    let this = self;
                    unsafe {
                        let mut result__: <TriggerActionCollection as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<TriggerActionCollection>(result__)
                    }
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for EventTrigger {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.EventTrigger;{def8f855-0b49-4087-b1a9-b8b38488f786})",
                );
            }
            unsafe impl ::windows::Interface for EventTrigger {
                type Vtable = IEventTrigger_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3740858453,
                    2889,
                    16519,
                    [177, 169, 184, 179, 132, 136, 247, 134],
                );
            }
            impl ::windows::RuntimeName for EventTrigger {
                const NAME: &'static str = "Windows.UI.Xaml.EventTrigger";
            }
            impl ::std::convert::From<EventTrigger> for ::windows::IInspectable {
                fn from(value: EventTrigger) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&EventTrigger> for ::windows::IInspectable {
                fn from(value: &EventTrigger) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for EventTrigger {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a EventTrigger {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<EventTrigger> for TriggerBase {
                fn from(value: EventTrigger) -> Self {
                    ::std::convert::Into::<TriggerBase>::into(&value)
                }
            }
            impl ::std::convert::From<&EventTrigger> for TriggerBase {
                fn from(value: &EventTrigger) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, TriggerBase> for EventTrigger {
                fn into_param(self) -> ::windows::Param<'a, TriggerBase> {
                    ::windows::Param::Owned(::std::convert::Into::<TriggerBase>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, TriggerBase> for &'a EventTrigger {
                fn into_param(self) -> ::windows::Param<'a, TriggerBase> {
                    ::windows::Param::Owned(::std::convert::Into::<TriggerBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<EventTrigger> for DependencyObject {
                fn from(value: EventTrigger) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&EventTrigger> for DependencyObject {
                fn from(value: &EventTrigger) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for EventTrigger {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a EventTrigger {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for EventTrigger {}
            unsafe impl ::std::marker::Sync for EventTrigger {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DragUI(::windows::IInspectable);
            impl DragUI {
                pub fn SetContentFromDataPackage(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(::windows::Abi::abi(this)).ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for DragUI {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DragUI;{2d9bd838-7c60-4842-9170-346fe10a226a})",
                );
            }
            unsafe impl ::windows::Interface for DragUI {
                type Vtable = IDragUI_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    765188152,
                    31840,
                    18498,
                    [145, 112, 52, 111, 225, 10, 34, 106],
                );
            }
            impl ::windows::RuntimeName for DragUI {
                const NAME: &'static str = "Windows.UI.Xaml.DragUI";
            }
            impl ::std::convert::From<DragUI> for ::windows::IInspectable {
                fn from(value: DragUI) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DragUI> for ::windows::IInspectable {
                fn from(value: &DragUI) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DragUI {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DragUI {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DragUI {}
            unsafe impl ::std::marker::Sync for DragUI {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct LeavingBackgroundEventHandler(::windows::IUnknown);
            impl LeavingBackgroundEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<
                                super::super::ApplicationModel::LeavingBackgroundEventArgs,
                            >,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = LeavingBackgroundEventHandler_box::<F> {
                        vtable: &LeavingBackgroundEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<
                        'a,
                        super::super::ApplicationModel::LeavingBackgroundEventArgs,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for LeavingBackgroundEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({aaad5dad-4fc6-4aa4-b7cf-877e36ada4f6})",
                );
            }
            unsafe impl ::windows::Interface for LeavingBackgroundEventHandler {
                type Vtable = LeavingBackgroundEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2863488429,
                    20422,
                    19108,
                    [183, 207, 135, 126, 54, 173, 164, 246],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct LeavingBackgroundEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct LeavingBackgroundEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<
                            super::super::ApplicationModel::LeavingBackgroundEventArgs,
                        >,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const LeavingBackgroundEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<
                                super::super::ApplicationModel::LeavingBackgroundEventArgs,
                            >,
                        ) -> ::windows::Result<()>
                        + 'static,
                > LeavingBackgroundEventHandler_box<F>
            {
                const VTABLE: LeavingBackgroundEventHandler_abi = LeavingBackgroundEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<LeavingBackgroundEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: super :: ApplicationModel :: LeavingBackgroundEventArgs as :: windows :: Abi > :: Abi as * const < super :: super :: ApplicationModel :: LeavingBackgroundEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SizeChangedEventHandler(::windows::IUnknown);
            impl SizeChangedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<SizeChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = SizeChangedEventHandler_box::<F> {
                        vtable: &SizeChangedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, SizeChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for SizeChangedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({1115b13c-25d2-480b-89dc-eb3dcbd6b7fa})",
                );
            }
            unsafe impl ::windows::Interface for SizeChangedEventHandler {
                type Vtable = SizeChangedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    286634300,
                    9682,
                    18443,
                    [137, 220, 235, 61, 203, 214, 183, 250],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct SizeChangedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct SizeChangedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<SizeChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const SizeChangedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<SizeChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > SizeChangedEventHandler_box<F>
            {
                const VTABLE: SizeChangedEventHandler_abi = SizeChangedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid == &<SizeChangedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < SizeChangedEventArgs as :: windows :: Abi > :: Abi as * const < SizeChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct PropertyPath(::windows::IInspectable);
            impl PropertyPath {
                pub fn Path(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn CreateInstance<'a>(
                    path: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                ) -> ::windows::Result<PropertyPath> {
                    Self::IPropertyPathFactory(|this| unsafe {
                        let mut result__: <PropertyPath as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            path.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<PropertyPath>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IPropertyPathFactory<
                    R,
                    F: FnOnce(&IPropertyPathFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<PropertyPath, IPropertyPathFactory> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for PropertyPath {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.PropertyPath;{300e5d8a-1ff3-4d2c-95ec-27f81debacb8})",
                );
            }
            unsafe impl ::windows::Interface for PropertyPath {
                type Vtable = IPropertyPath_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    806247818,
                    8179,
                    19756,
                    [149, 236, 39, 248, 29, 235, 172, 184],
                );
            }
            impl ::windows::RuntimeName for PropertyPath {
                const NAME: &'static str = "Windows.UI.Xaml.PropertyPath";
            }
            impl ::std::convert::From<PropertyPath> for ::windows::IInspectable {
                fn from(value: PropertyPath) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&PropertyPath> for ::windows::IInspectable {
                fn from(value: &PropertyPath) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for PropertyPath {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a PropertyPath {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<PropertyPath> for DependencyObject {
                fn from(value: PropertyPath) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&PropertyPath> for DependencyObject {
                fn from(value: &PropertyPath) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for PropertyPath {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a PropertyPath {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for PropertyPath {}
            unsafe impl ::std::marker::Sync for PropertyPath {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowCreatedEventArgs(::windows::IInspectable);
            impl WindowCreatedEventArgs {
                pub fn Window(&self) -> ::windows::Result<Window> {
                    let this = self;
                    unsafe {
                        let mut result__: <Window as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Window>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowCreatedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.WindowCreatedEventArgs;{31b71470-feff-4654-af48-9b398ab5772b})" ) ;
            }
            unsafe impl ::windows::Interface for WindowCreatedEventArgs {
                type Vtable = IWindowCreatedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    834081904,
                    65279,
                    18004,
                    [175, 72, 155, 57, 138, 181, 119, 43],
                );
            }
            impl ::windows::RuntimeName for WindowCreatedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.WindowCreatedEventArgs";
            }
            impl ::std::convert::From<WindowCreatedEventArgs> for ::windows::IInspectable {
                fn from(value: WindowCreatedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&WindowCreatedEventArgs> for ::windows::IInspectable {
                fn from(value: &WindowCreatedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for WindowCreatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a WindowCreatedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for WindowCreatedEventArgs {}
            unsafe impl ::std::marker::Sync for WindowCreatedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ApplicationTheme(pub i32);
            impl ApplicationTheme {
                pub const Light: ApplicationTheme = ApplicationTheme(0i32);
                pub const Dark: ApplicationTheme = ApplicationTheme(1i32);
            }
            impl ::std::convert::From<i32> for ApplicationTheme {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ApplicationTheme {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ApplicationTheme {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ApplicationTheme;i4)",
                );
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct Vector3TransitionComponents(pub u32);
            impl Vector3TransitionComponents {
                pub const X: Vector3TransitionComponents = Vector3TransitionComponents(1u32);
                pub const Y: Vector3TransitionComponents = Vector3TransitionComponents(2u32);
                pub const Z: Vector3TransitionComponents = Vector3TransitionComponents(4u32);
            }
            impl ::std::convert::From<u32> for Vector3TransitionComponents {
                fn from(value: u32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for Vector3TransitionComponents {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for Vector3TransitionComponents {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.Vector3TransitionComponents;u4)",
                );
            }
            impl ::std::ops::BitOr for Vector3TransitionComponents {
                type Output = Self;
                fn bitor(self, rhs: Self) -> Self {
                    Self(self.0 | rhs.0)
                }
            }
            impl ::std::ops::BitAnd for Vector3TransitionComponents {
                type Output = Self;
                fn bitand(self, rhs: Self) -> Self {
                    Self(self.0 & rhs.0)
                }
            }
            impl ::std::ops::BitOrAssign for Vector3TransitionComponents {
                fn bitor_assign(&mut self, rhs: Self) {
                    self.0.bitor_assign(rhs.0)
                }
            }
            impl ::std::ops::BitAndAssign for Vector3TransitionComponents {
                fn bitand_assign(&mut self, rhs: Self) {
                    self.0.bitand_assign(rhs.0)
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct IMediaFailedRoutedEventArgs(::windows::IInspectable);
            unsafe impl ::windows::Interface for IMediaFailedRoutedEventArgs {
                type Vtable = IMediaFailedRoutedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1188166285,
                    20809,
                    16723,
                    [186, 60, 176, 62, 100, 238, 83, 30],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct IMediaFailedRoutedEventArgs_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct MediaFailedRoutedEventArgs(::windows::IInspectable);
            impl MediaFailedRoutedEventArgs {
                pub fn ErrorTrace(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn ErrorMessage(&self) -> ::windows::Result<::windows::HSTRING> {
                    let this =
                        &::windows::Interface::cast::<IExceptionRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::HSTRING>(result__)
                    }
                }
                pub fn OriginalSource(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IRoutedEventArgs>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for MediaFailedRoutedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.MediaFailedRoutedEventArgs;{46d1fa8d-5149-4153-ba3c-b03e64ee531e})" ) ;
            }
            unsafe impl ::windows::Interface for MediaFailedRoutedEventArgs {
                type Vtable = IMediaFailedRoutedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1188166285,
                    20809,
                    16723,
                    [186, 60, 176, 62, 100, 238, 83, 30],
                );
            }
            impl ::windows::RuntimeName for MediaFailedRoutedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.MediaFailedRoutedEventArgs";
            }
            impl ::std::convert::From<MediaFailedRoutedEventArgs> for ::windows::IInspectable {
                fn from(value: MediaFailedRoutedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&MediaFailedRoutedEventArgs> for ::windows::IInspectable {
                fn from(value: &MediaFailedRoutedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for MediaFailedRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a MediaFailedRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<MediaFailedRoutedEventArgs> for ExceptionRoutedEventArgs {
                fn from(value: MediaFailedRoutedEventArgs) -> Self {
                    ::std::convert::Into::<ExceptionRoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&MediaFailedRoutedEventArgs> for ExceptionRoutedEventArgs {
                fn from(value: &MediaFailedRoutedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ExceptionRoutedEventArgs> for MediaFailedRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ExceptionRoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ExceptionRoutedEventArgs>::into(
                        self,
                    ))
                }
            }
            impl<'a> ::windows::IntoParam<'a, ExceptionRoutedEventArgs> for &'a MediaFailedRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ExceptionRoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<ExceptionRoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<MediaFailedRoutedEventArgs> for RoutedEventArgs {
                fn from(value: MediaFailedRoutedEventArgs) -> Self {
                    ::std::convert::Into::<RoutedEventArgs>::into(&value)
                }
            }
            impl ::std::convert::From<&MediaFailedRoutedEventArgs> for RoutedEventArgs {
                fn from(value: &MediaFailedRoutedEventArgs) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for MediaFailedRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, RoutedEventArgs> for &'a MediaFailedRoutedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, RoutedEventArgs> {
                    ::windows::Param::Owned(::std::convert::Into::<RoutedEventArgs>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for MediaFailedRoutedEventArgs {}
            unsafe impl ::std::marker::Sync for MediaFailedRoutedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct FontCapitals(pub i32);
            impl FontCapitals {
                pub const Normal: FontCapitals = FontCapitals(0i32);
                pub const AllSmallCaps: FontCapitals = FontCapitals(1i32);
                pub const SmallCaps: FontCapitals = FontCapitals(2i32);
                pub const AllPetiteCaps: FontCapitals = FontCapitals(3i32);
                pub const PetiteCaps: FontCapitals = FontCapitals(4i32);
                pub const Unicase: FontCapitals = FontCapitals(5i32);
                pub const Titling: FontCapitals = FontCapitals(6i32);
            }
            impl ::std::convert::From<i32> for FontCapitals {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for FontCapitals {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for FontCapitals {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.FontCapitals;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DataTemplateKey(::windows::IInspectable);
            impl DataTemplateKey {
                pub fn DataType(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetDataType<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn new() -> ::windows::Result<DataTemplateKey> {
                    Self::IDataTemplateKeyFactory(|this| unsafe {
                        let mut result__: <DataTemplateKey as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<DataTemplateKey>(result__)
                    })
                }
                pub fn CreateInstanceWithType<'a>(
                    datatype: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<DataTemplateKey> {
                    Self::IDataTemplateKeyFactory(|this| unsafe {
                        let mut result__: <DataTemplateKey as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            datatype.into_param().abi(),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<DataTemplateKey>(result__)
                    })
                }
                pub fn IDataTemplateKeyFactory<
                    R,
                    F: FnOnce(&IDataTemplateKeyFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        DataTemplateKey,
                        IDataTemplateKeyFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for DataTemplateKey {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DataTemplateKey;{873b6c28-cceb-4b61-86fa-b2cec39cc2fa})",
                );
            }
            unsafe impl ::windows::Interface for DataTemplateKey {
                type Vtable = IDataTemplateKey_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2268818472,
                    52459,
                    19297,
                    [134, 250, 178, 206, 195, 156, 194, 250],
                );
            }
            impl ::windows::RuntimeName for DataTemplateKey {
                const NAME: &'static str = "Windows.UI.Xaml.DataTemplateKey";
            }
            impl ::std::convert::From<DataTemplateKey> for ::windows::IInspectable {
                fn from(value: DataTemplateKey) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DataTemplateKey> for ::windows::IInspectable {
                fn from(value: &DataTemplateKey) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DataTemplateKey {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DataTemplateKey {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DataTemplateKey {}
            unsafe impl ::std::marker::Sync for DataTemplateKey {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ApplicationRequiresPointerMode(pub i32);
            impl ApplicationRequiresPointerMode {
                pub const Auto: ApplicationRequiresPointerMode =
                    ApplicationRequiresPointerMode(0i32);
                pub const WhenRequested: ApplicationRequiresPointerMode =
                    ApplicationRequiresPointerMode(1i32);
            }
            impl ::std::convert::From<i32> for ApplicationRequiresPointerMode {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ApplicationRequiresPointerMode {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ApplicationRequiresPointerMode {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ApplicationRequiresPointerMode;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct WindowSizeChangedEventHandler(::windows::IUnknown);
            impl WindowSizeChangedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::WindowSizeChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = WindowSizeChangedEventHandler_box::<F> {
                        vtable: &WindowSizeChangedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, super::Core::WindowSizeChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for WindowSizeChangedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({5c21c742-2ced-4fd9-ba38-7118d40e966b})",
                );
            }
            unsafe impl ::windows::Interface for WindowSizeChangedEventHandler {
                type Vtable = WindowSizeChangedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1545717570,
                    11501,
                    20441,
                    [186, 56, 113, 24, 212, 14, 150, 107],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct WindowSizeChangedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct WindowSizeChangedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<super::Core::WindowSizeChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const WindowSizeChangedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<super::Core::WindowSizeChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > WindowSizeChangedEventHandler_box<F>
            {
                const VTABLE: WindowSizeChangedEventHandler_abi = WindowSizeChangedEventHandler_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<WindowSizeChangedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < super :: Core :: WindowSizeChangedEventArgs as :: windows :: Abi > :: Abi as * const < super :: Core :: WindowSizeChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct TextWrapping(pub i32);
            impl TextWrapping {
                pub const NoWrap: TextWrapping = TextWrapping(1i32);
                pub const Wrap: TextWrapping = TextWrapping(2i32);
                pub const WrapWholeWords: TextWrapping = TextWrapping(3i32);
            }
            impl ::std::convert::From<i32> for TextWrapping {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for TextWrapping {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for TextWrapping {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer =
                    ::windows::ConstBuffer::from_slice(b"enum(Windows.UI.Xaml.TextWrapping;i4)");
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct XamlRootChangedEventArgs(::windows::IInspectable);
            impl XamlRootChangedEventArgs {}
            unsafe impl ::windows::RuntimeType for XamlRootChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.XamlRootChangedEventArgs;{92d71c21-d23c-5a17-bcb8-001504b6bb19})" ) ;
            }
            unsafe impl ::windows::Interface for XamlRootChangedEventArgs {
                type Vtable = IXamlRootChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2463570977,
                    53820,
                    23063,
                    [188, 184, 0, 21, 4, 182, 187, 25],
                );
            }
            impl ::windows::RuntimeName for XamlRootChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.XamlRootChangedEventArgs";
            }
            impl ::std::convert::From<XamlRootChangedEventArgs> for ::windows::IInspectable {
                fn from(value: XamlRootChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&XamlRootChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &XamlRootChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for XamlRootChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a XamlRootChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for XamlRootChangedEventArgs {}
            unsafe impl ::std::marker::Sync for XamlRootChangedEventArgs {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct CreateDefaultValueCallback(::windows::IUnknown);
            impl CreateDefaultValueCallback {
                pub fn new<F: FnMut() -> ::windows::Result<::windows::IInspectable> + 'static>(
                    invoke: F,
                ) -> Self {
                    let com = CreateDefaultValueCallback_box::<F> {
                        vtable: &CreateDefaultValueCallback_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for CreateDefaultValueCallback {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({d6ecb12c-15b5-4ec8-b95c-cdd208f08153})",
                );
            }
            unsafe impl ::windows::Interface for CreateDefaultValueCallback {
                type Vtable = CreateDefaultValueCallback_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3605836076,
                    5557,
                    20168,
                    [185, 92, 205, 210, 8, 240, 129, 83],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct CreateDefaultValueCallback_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct CreateDefaultValueCallback_box<
                F: FnMut() -> ::windows::Result<::windows::IInspectable> + 'static,
            > {
                vtable: *const CreateDefaultValueCallback_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<F: FnMut() -> ::windows::Result<::windows::IInspectable> + 'static>
                CreateDefaultValueCallback_box<F>
            {
                const VTABLE: CreateDefaultValueCallback_abi = CreateDefaultValueCallback_abi(
                    Self::QueryInterface,
                    Self::AddRef,
                    Self::Release,
                    Self::Invoke,
                );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<CreateDefaultValueCallback as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    match ((*this).invoke)() {
                        ::std::result::Result::Ok(ok__) => {
                            *result__ = ::std::mem::transmute_copy(&ok__);
                            ::std::mem::forget(ok__);
                            ::windows::HRESULT(0)
                        }
                        ::std::result::Result::Err(err) => err.into(),
                    }
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct EffectiveViewportChangedEventArgs(::windows::IInspectable);
            impl EffectiveViewportChangedEventArgs {
                pub fn BringIntoViewDistanceX(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn BringIntoViewDistanceY(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for EffectiveViewportChangedEventArgs {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.EffectiveViewportChangedEventArgs;{55ee2e81-1c18-59ed-bd3d-c4ca8fa7d190})" ) ;
            }
            unsafe impl ::windows::Interface for EffectiveViewportChangedEventArgs {
                type Vtable = IEffectiveViewportChangedEventArgs_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    1441672833,
                    7192,
                    23021,
                    [189, 61, 196, 202, 143, 167, 209, 144],
                );
            }
            impl ::windows::RuntimeName for EffectiveViewportChangedEventArgs {
                const NAME: &'static str = "Windows.UI.Xaml.EffectiveViewportChangedEventArgs";
            }
            impl ::std::convert::From<EffectiveViewportChangedEventArgs> for ::windows::IInspectable {
                fn from(value: EffectiveViewportChangedEventArgs) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&EffectiveViewportChangedEventArgs> for ::windows::IInspectable {
                fn from(value: &EffectiveViewportChangedEventArgs) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for EffectiveViewportChangedEventArgs {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable>
                for &'a EffectiveViewportChangedEventArgs
            {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for EffectiveViewportChangedEventArgs {}
            unsafe impl ::std::marker::Sync for EffectiveViewportChangedEventArgs {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct TextReadingOrder(pub i32);
            impl TextReadingOrder {
                pub const Default: TextReadingOrder = TextReadingOrder(0i32);
                pub const UseFlowDirection: TextReadingOrder = TextReadingOrder(0i32);
                pub const DetectFromContent: TextReadingOrder = TextReadingOrder(1i32);
            }
            impl ::std::convert::From<i32> for TextReadingOrder {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for TextReadingOrder {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for TextReadingOrder {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.TextReadingOrder;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct SizeHelper(::windows::IInspectable);
            impl SizeHelper {
                pub fn ISizeHelperStatics<
                    R,
                    F: FnOnce(&ISizeHelperStatics) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<SizeHelper, ISizeHelperStatics> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for SizeHelper {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.SizeHelper;{e7225a94-5d03-4a03-ba94-967fc68fcefe})",
                );
            }
            unsafe impl ::windows::Interface for SizeHelper {
                type Vtable = ISizeHelper_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3877788308,
                    23811,
                    18947,
                    [186, 148, 150, 127, 198, 143, 206, 254],
                );
            }
            impl ::windows::RuntimeName for SizeHelper {
                const NAME: &'static str = "Windows.UI.Xaml.SizeHelper";
            }
            impl ::std::convert::From<SizeHelper> for ::windows::IInspectable {
                fn from(value: SizeHelper) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&SizeHelper> for ::windows::IInspectable {
                fn from(value: &SizeHelper) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for SizeHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a SizeHelper {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for SizeHelper {}
            unsafe impl ::std::marker::Sync for SizeHelper {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct VisualStateChangedEventHandler(::windows::IUnknown);
            impl VisualStateChangedEventHandler {
                pub fn new<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<VisualStateChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                >(
                    invoke: F,
                ) -> Self {
                    let com = VisualStateChangedEventHandler_box::<F> {
                        vtable: &VisualStateChangedEventHandler_box::<F>::VTABLE,
                        count: ::windows::RefCount::new(1),
                        invoke,
                    };
                    unsafe { std::mem::transmute(::std::boxed::Box::new(com)) }
                }
                pub fn Invoke<'a>(
                    &self,
                    sender: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    e: impl ::windows::IntoParam<'a, VisualStateChangedEventArgs>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).3)(
                            ::windows::Abi::abi(this),
                            sender.into_param().abi(),
                            e.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for VisualStateChangedEventHandler {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"delegate({e6d5bbd5-e029-43a6-b36d-84a81042d774})",
                );
            }
            unsafe impl ::windows::Interface for VisualStateChangedEventHandler {
                type Vtable = VisualStateChangedEventHandler_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3872766933,
                    57385,
                    17318,
                    [179, 109, 132, 168, 16, 66, 215, 116],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct VisualStateChangedEventHandler_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(C)]
            struct VisualStateChangedEventHandler_box<
                F: FnMut(
                        &::std::option::Option<::windows::IInspectable>,
                        &::std::option::Option<VisualStateChangedEventArgs>,
                    ) -> ::windows::Result<()>
                    + 'static,
            > {
                vtable: *const VisualStateChangedEventHandler_abi,
                invoke: F,
                count: ::windows::RefCount,
            }
            impl<
                    F: FnMut(
                            &::std::option::Option<::windows::IInspectable>,
                            &::std::option::Option<VisualStateChangedEventArgs>,
                        ) -> ::windows::Result<()>
                        + 'static,
                > VisualStateChangedEventHandler_box<F>
            {
                const VTABLE: VisualStateChangedEventHandler_abi =
                    VisualStateChangedEventHandler_abi(
                        Self::QueryInterface,
                        Self::AddRef,
                        Self::Release,
                        Self::Invoke,
                    );
                unsafe extern "system" fn QueryInterface(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    *interface = if iid
                        == &<VisualStateChangedEventHandler as ::windows::Interface>::IID
                        || iid == &<::windows::IUnknown as ::windows::Interface>::IID
                        || iid == &<::windows::IAgileObject as ::windows::Interface>::IID
                    {
                        &mut (*this).vtable as *mut _ as _
                    } else {
                        ::std::ptr::null_mut()
                    };
                    if (*interface).is_null() {
                        ::windows::HRESULT(0x8000_4002)
                    } else {
                        (*this).count.add_ref();
                        ::windows::HRESULT(0)
                    }
                }
                unsafe extern "system" fn AddRef(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    (*this).count.add_ref()
                }
                unsafe extern "system" fn Release(this: ::windows::RawPtr) -> u32 {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    let remaining = (*this).count.release();
                    if remaining == 0 {
                        Box::from_raw(this);
                    }
                    remaining
                }
                unsafe extern "system" fn Invoke(
                    this: ::windows::RawPtr,
                    sender: ::windows::RawPtr,
                    e: ::windows::RawPtr,
                ) -> ::windows::HRESULT {
                    let this = this as *mut ::windows::RawPtr as *mut Self;
                    ( ( * this ) . invoke ) ( & * ( & sender as * const < :: windows :: IInspectable as :: windows :: Abi > :: Abi as * const < :: windows :: IInspectable as :: windows :: RuntimeType > :: DefaultType ) , & * ( & e as * const < VisualStateChangedEventArgs as :: windows :: Abi > :: Abi as * const < VisualStateChangedEventArgs as :: windows :: RuntimeType > :: DefaultType ) , ) . into ( )
                }
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            #[doc(hidden)]
            pub struct ISetterFactory(::windows::IInspectable);
            unsafe impl ::windows::Interface for ISetterFactory {
                type Vtable = ISetterFactory_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3553246530,
                    2481,
                    18901,
                    [136, 145, 231, 181, 100, 142, 2, 162],
                );
            }
            #[repr(C)]
            #[doc(hidden)]
            pub struct ISetterFactory_abi(
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    iid: &::windows::Guid,
                    interface: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    count: *mut u32,
                    values: *mut *mut ::windows::Guid,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    value: *mut i32,
                ) -> ::windows::HRESULT,
                pub  unsafe extern "system" fn(
                    this: ::windows::RawPtr,
                    targetproperty: ::windows::RawPtr,
                    value: ::windows::RawPtr,
                    result__: *mut ::windows::RawPtr,
                ) -> ::windows::HRESULT,
            );
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct Setter(::windows::IInspectable);
            impl Setter {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        Setter,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn Property(&self) -> ::windows::Result<DependencyProperty> {
                    let this = self;
                    unsafe {
                        let mut result__: <DependencyProperty as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<DependencyProperty>(result__)
                    }
                }
                pub fn SetProperty<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Value(&self) -> ::windows::Result<::windows::IInspectable> {
                    let this = self;
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Target(&self) -> ::windows::Result<TargetPropertyPath> {
                    let this = &::windows::Interface::cast::<ISetter2>(self).unwrap();
                    unsafe {
                        let mut result__: <TargetPropertyPath as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<TargetPropertyPath>(result__)
                    }
                }
                pub fn SetTarget<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, TargetPropertyPath>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<ISetter2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn CreateInstance<'a>(
                    targetproperty: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<Setter> {
                    Self::ISetterFactory(|this| unsafe {
                        let mut result__: <Setter as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            targetproperty.into_param().abi(),
                            value.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<Setter>(result__)
                    })
                }
                pub fn GetValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn SetValue2<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ClearValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn ReadLocalValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn GetAnimationBaseValue<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                ) -> ::windows::Result<::windows::IInspectable> {
                    let this = &::windows::Interface::cast::<IDependencyObject>(self).unwrap();
                    unsafe {
                        let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<::windows::IInspectable>(result__)
                    }
                }
                pub fn RegisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    callback: impl ::windows::IntoParam<'a, DependencyPropertyChangedCallback>,
                ) -> ::windows::Result<i64> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            callback.into_param().abi(),
                            &mut result__,
                        )
                        .from_abi::<i64>(result__)
                    }
                }
                pub fn UnregisterPropertyChangedCallback<'a>(
                    &self,
                    dp: impl ::windows::IntoParam<'a, DependencyProperty>,
                    token: i64,
                ) -> ::windows::Result<()> {
                    let this = &::windows::Interface::cast::<IDependencyObject2>(self).unwrap();
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            dp.into_param().abi(),
                            token,
                        )
                        .ok()
                    }
                }
                pub fn IsSealed(&self) -> ::windows::Result<bool> {
                    let this = &::windows::Interface::cast::<ISetterBase>(self).unwrap();
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn ISetterFactory<R, F: FnOnce(&ISetterFactory) -> ::windows::Result<R>>(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<Setter, ISetterFactory> =
                        ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for Setter {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.Setter;{a73ded29-b4ae-4a81-be85-e690ba0d3b6e})",
                );
            }
            unsafe impl ::windows::Interface for Setter {
                type Vtable = ISetter_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    2805853481,
                    46254,
                    19073,
                    [190, 133, 230, 144, 186, 13, 59, 110],
                );
            }
            impl ::windows::RuntimeName for Setter {
                const NAME: &'static str = "Windows.UI.Xaml.Setter";
            }
            impl ::std::convert::From<Setter> for ::windows::IInspectable {
                fn from(value: Setter) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&Setter> for ::windows::IInspectable {
                fn from(value: &Setter) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for Setter {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a Setter {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<Setter> for SetterBase {
                fn from(value: Setter) -> Self {
                    ::std::convert::Into::<SetterBase>::into(&value)
                }
            }
            impl ::std::convert::From<&Setter> for SetterBase {
                fn from(value: &Setter) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, SetterBase> for Setter {
                fn into_param(self) -> ::windows::Param<'a, SetterBase> {
                    ::windows::Param::Owned(::std::convert::Into::<SetterBase>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, SetterBase> for &'a Setter {
                fn into_param(self) -> ::windows::Param<'a, SetterBase> {
                    ::windows::Param::Owned(::std::convert::Into::<SetterBase>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            impl ::std::convert::From<Setter> for DependencyObject {
                fn from(value: Setter) -> Self {
                    ::std::convert::Into::<DependencyObject>::into(&value)
                }
            }
            impl ::std::convert::From<&Setter> for DependencyObject {
                fn from(value: &Setter) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for Setter {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(self))
                }
            }
            impl<'a> ::windows::IntoParam<'a, DependencyObject> for &'a Setter {
                fn into_param(self) -> ::windows::Param<'a, DependencyObject> {
                    ::windows::Param::Owned(::std::convert::Into::<DependencyObject>::into(
                        ::std::clone::Clone::clone(self),
                    ))
                }
            }
            unsafe impl ::std::marker::Send for Setter {}
            unsafe impl ::std::marker::Sync for Setter {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct ElementSoundPlayerState(pub i32);
            impl ElementSoundPlayerState {
                pub const Auto: ElementSoundPlayerState = ElementSoundPlayerState(0i32);
                pub const Off: ElementSoundPlayerState = ElementSoundPlayerState(1i32);
                pub const On: ElementSoundPlayerState = ElementSoundPlayerState(2i32);
            }
            impl ::std::convert::From<i32> for ElementSoundPlayerState {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for ElementSoundPlayerState {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for ElementSoundPlayerState {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.ElementSoundPlayerState;i4)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct DispatcherTimer(::windows::IInspectable);
            impl DispatcherTimer {
                pub fn Interval(&self) -> ::windows::Result<super::super::Foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::TimeSpan>(result__)
                    }
                }
                pub fn SetInterval<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, super::super::Foundation::TimeSpan>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn IsEnabled(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn RemoveTick<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).10)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Start(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).11)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn Stop(&self) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(::windows::Abi::abi(this)).ok()
                    }
                }
                pub fn new() -> ::windows::Result<DispatcherTimer> {
                    Self::IDispatcherTimerFactory(|this| unsafe {
                        let mut result__: <DispatcherTimer as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<DispatcherTimer>(result__)
                    })
                }
                pub fn IDispatcherTimerFactory<
                    R,
                    F: FnOnce(&IDispatcherTimerFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        DispatcherTimer,
                        IDispatcherTimerFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for DispatcherTimer {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.DispatcherTimer;{d160ce46-cd22-4f5f-8c97-40e61da3e2dc})",
                );
            }
            unsafe impl ::windows::Interface for DispatcherTimer {
                type Vtable = IDispatcherTimer_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3512782406,
                    52514,
                    20319,
                    [140, 151, 64, 230, 29, 163, 226, 220],
                );
            }
            impl ::windows::RuntimeName for DispatcherTimer {
                const NAME: &'static str = "Windows.UI.Xaml.DispatcherTimer";
            }
            impl ::std::convert::From<DispatcherTimer> for ::windows::IInspectable {
                fn from(value: DispatcherTimer) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&DispatcherTimer> for ::windows::IInspectable {
                fn from(value: &DispatcherTimer) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for DispatcherTimer {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a DispatcherTimer {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for DispatcherTimer {}
            unsafe impl ::std::marker::Sync for DispatcherTimer {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct FrameworkViewSource(::windows::IInspectable);
            impl FrameworkViewSource {
                pub fn new() -> ::windows::Result<Self> {
                    Self::IActivationFactory(|f| f.activate_instance::<Self>())
                }
                fn IActivationFactory<
                    R,
                    F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        FrameworkViewSource,
                        ::windows::IActivationFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
                pub fn CreateView(
                    &self,
                ) -> ::windows::Result<super::super::ApplicationModel::Core::IFrameworkView>
                {
                    let this = &::windows::Interface::cast::<
                        super::super::ApplicationModel::Core::IFrameworkViewSource,
                    >(self)
                    .unwrap();
                    unsafe {
                        let mut result__ : < super :: super :: ApplicationModel :: Core :: IFrameworkView as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::ApplicationModel::Core::IFrameworkView>(result__)
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for FrameworkViewSource {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.FrameworkViewSource;{e3b077da-35ad-4b09-b5b2-27420041ba9f})" ) ;
            }
            unsafe impl ::windows::Interface for FrameworkViewSource {
                type Vtable = IFrameworkViewSource_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3819993050,
                    13741,
                    19209,
                    [181, 178, 39, 66, 0, 65, 186, 159],
                );
            }
            impl ::windows::RuntimeName for FrameworkViewSource {
                const NAME: &'static str = "Windows.UI.Xaml.FrameworkViewSource";
            }
            impl ::std::convert::From<FrameworkViewSource> for ::windows::IInspectable {
                fn from(value: FrameworkViewSource) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&FrameworkViewSource> for ::windows::IInspectable {
                fn from(value: &FrameworkViewSource) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for FrameworkViewSource {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a FrameworkViewSource {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            impl ::std::convert::From<FrameworkViewSource>
                for super::super::ApplicationModel::Core::IFrameworkViewSource
            {
                fn from(value: FrameworkViewSource) -> Self {
                    ::std::convert::From::from(&value)
                }
            }
            impl ::std::convert::From<&FrameworkViewSource>
                for super::super::ApplicationModel::Core::IFrameworkViewSource
            {
                fn from(value: &FrameworkViewSource) -> Self {
                    ::windows::Interface::cast(value).unwrap()
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, super::super::ApplicationModel::Core::IFrameworkViewSource>
                for FrameworkViewSource
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::ApplicationModel::Core::IFrameworkViewSource>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::ApplicationModel::Core::IFrameworkViewSource,
                    >::into(self))
                }
            }
            impl<'a>
                ::windows::IntoParam<'a, super::super::ApplicationModel::Core::IFrameworkViewSource>
                for &'a FrameworkViewSource
            {
                fn into_param(
                    self,
                ) -> ::windows::Param<'a, super::super::ApplicationModel::Core::IFrameworkViewSource>
                {
                    ::windows::Param::Owned(::std::convert::Into::<
                        super::super::ApplicationModel::Core::IFrameworkViewSource,
                    >::into(::std::clone::Clone::clone(
                        self,
                    )))
                }
            }
            unsafe impl ::std::marker::Send for FrameworkViewSource {}
            unsafe impl ::std::marker::Sync for FrameworkViewSource {}
            #[repr(C)]
            #[derive(:: std :: clone :: Clone, :: std :: marker :: Copy)]
            pub struct CornerRadius {
                pub TopLeft: f64,
                pub TopRight: f64,
                pub BottomRight: f64,
                pub BottomLeft: f64,
            }
            impl CornerRadius {}
            impl ::std::default::Default for CornerRadius {
                fn default() -> Self {
                    Self {
                        TopLeft: 0.0,
                        TopRight: 0.0,
                        BottomRight: 0.0,
                        BottomLeft: 0.0,
                    }
                }
            }
            impl ::std::fmt::Debug for CornerRadius {
                fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    fmt.debug_struct("CornerRadius")
                        .field("TopLeft", &format_args!("{:?}", self.TopLeft))
                        .field("TopRight", &format_args!("{:?}", self.TopRight))
                        .field("BottomRight", &format_args!("{:?}", self.BottomRight))
                        .field("BottomLeft", &format_args!("{:?}", self.BottomLeft))
                        .finish()
                }
            }
            impl ::std::cmp::PartialEq for CornerRadius {
                fn eq(&self, other: &Self) -> bool {
                    self.TopLeft == other.TopLeft
                        && self.TopRight == other.TopRight
                        && self.BottomRight == other.BottomRight
                        && self.BottomLeft == other.BottomLeft
                }
            }
            impl ::std::cmp::Eq for CornerRadius {}
            unsafe impl ::windows::Abi for CornerRadius {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for CornerRadius {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"struct(Windows.UI.Xaml.CornerRadius;f8;f8;f8;f8)",
                );
            }
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct Vector3Transition(::windows::IInspectable);
            impl Vector3Transition {
                pub fn Duration(&self) -> ::windows::Result<super::super::Foundation::TimeSpan> {
                    let this = self;
                    unsafe {
                        let mut result__ : < super :: super :: Foundation :: TimeSpan as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<super::super::Foundation::TimeSpan>(result__)
                    }
                }
                pub fn SetDuration<'a>(
                    &self,
                    value: impl ::windows::IntoParam<'a, super::super::Foundation::TimeSpan>,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).7)(
                            ::windows::Abi::abi(this),
                            value.into_param().abi(),
                        )
                        .ok()
                    }
                }
                pub fn Components(&self) -> ::windows::Result<Vector3TransitionComponents> {
                    let this = self;
                    unsafe {
                        let mut result__: <Vector3TransitionComponents as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<Vector3TransitionComponents>(result__)
                    }
                }
                pub fn SetComponents(
                    &self,
                    value: Vector3TransitionComponents,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                            .ok()
                    }
                }
                pub fn new() -> ::windows::Result<Vector3Transition> {
                    Self::IVector3TransitionFactory(|this| unsafe {
                        let mut result__: <Vector3Transition as ::windows::Abi>::Abi =
                            ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            ::std::ptr::null_mut(),
                            ::windows::Abi::set_abi(
                                &mut ::std::option::Option::<::windows::IInspectable>::None,
                            ),
                            &mut result__,
                        )
                        .from_abi::<Vector3Transition>(result__)
                    })
                }
                pub fn IVector3TransitionFactory<
                    R,
                    F: FnOnce(&IVector3TransitionFactory) -> ::windows::Result<R>,
                >(
                    callback: F,
                ) -> ::windows::Result<R> {
                    static mut SHARED: ::windows::FactoryCache<
                        Vector3Transition,
                        IVector3TransitionFactory,
                    > = ::windows::FactoryCache::new();
                    unsafe { SHARED.call(callback) }
                }
            }
            unsafe impl ::windows::RuntimeType for Vector3Transition {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.Vector3Transition;{d2e209dc-c4a2-5101-9a68-fa0150505589})",
                );
            }
            unsafe impl ::windows::Interface for Vector3Transition {
                type Vtable = IVector3Transition_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    3538029020,
                    50338,
                    20737,
                    [154, 104, 250, 1, 80, 80, 85, 137],
                );
            }
            impl ::windows::RuntimeName for Vector3Transition {
                const NAME: &'static str = "Windows.UI.Xaml.Vector3Transition";
            }
            impl ::std::convert::From<Vector3Transition> for ::windows::IInspectable {
                fn from(value: Vector3Transition) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&Vector3Transition> for ::windows::IInspectable {
                fn from(value: &Vector3Transition) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for Vector3Transition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a Vector3Transition {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for Vector3Transition {}
            unsafe impl ::std::marker::Sync for Vector3Transition {}
            #[repr(transparent)]
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: clone :: Clone,
                :: std :: fmt :: Debug,
            )]
            pub struct XamlRoot(::windows::IInspectable);
            impl XamlRoot {
                pub fn Content(&self) -> ::windows::Result<UIElement> {
                    let this = self;
                    unsafe {
                        let mut result__: <UIElement as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).6)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<UIElement>(result__)
                    }
                }
                pub fn RasterizationScale(&self) -> ::windows::Result<f64> {
                    let this = self;
                    unsafe {
                        let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).8)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<f64>(result__)
                    }
                }
                pub fn IsHostVisible(&self) -> ::windows::Result<bool> {
                    let this = self;
                    unsafe {
                        let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                        (::windows::Interface::vtable(this).9)(
                            ::windows::Abi::abi(this),
                            &mut result__,
                        )
                        .from_abi::<bool>(result__)
                    }
                }
                pub fn RemoveChanged<'a>(
                    &self,
                    token: impl ::windows::IntoParam<
                        'a,
                        super::super::Foundation::EventRegistrationToken,
                    >,
                ) -> ::windows::Result<()> {
                    let this = self;
                    unsafe {
                        (::windows::Interface::vtable(this).12)(
                            ::windows::Abi::abi(this),
                            token.into_param().abi(),
                        )
                        .ok()
                    }
                }
            }
            unsafe impl ::windows::RuntimeType for XamlRoot {
                type DefaultType = ::std::option::Option<Self>;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"rc(Windows.UI.Xaml.XamlRoot;{34b50756-1696-5b6d-8e9b-c71464ccad5a})",
                );
            }
            unsafe impl ::windows::Interface for XamlRoot {
                type Vtable = IXamlRoot_abi;
                const IID: ::windows::Guid = ::windows::Guid::from_values(
                    884279126,
                    5782,
                    23405,
                    [142, 155, 199, 20, 100, 204, 173, 90],
                );
            }
            impl ::windows::RuntimeName for XamlRoot {
                const NAME: &'static str = "Windows.UI.Xaml.XamlRoot";
            }
            impl ::std::convert::From<XamlRoot> for ::windows::IInspectable {
                fn from(value: XamlRoot) -> Self {
                    value.0
                }
            }
            impl ::std::convert::From<&XamlRoot> for ::windows::IInspectable {
                fn from(value: &XamlRoot) -> Self {
                    value.0.clone()
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for XamlRoot {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Owned(self.0)
                }
            }
            impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a XamlRoot {
                fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                    ::windows::Param::Borrowed(&self.0)
                }
            }
            unsafe impl ::std::marker::Send for XamlRoot {}
            unsafe impl ::std::marker::Sync for XamlRoot {}
            #[derive(
                :: std :: cmp :: PartialEq,
                :: std :: cmp :: Eq,
                :: std :: marker :: Copy,
                :: std :: clone :: Clone,
                :: std :: default :: Default,
                :: std :: fmt :: Debug,
            )]
            #[repr(transparent)]
            pub struct HorizontalAlignment(pub i32);
            impl HorizontalAlignment {
                pub const Left: HorizontalAlignment = HorizontalAlignment(0i32);
                pub const Center: HorizontalAlignment = HorizontalAlignment(1i32);
                pub const Right: HorizontalAlignment = HorizontalAlignment(2i32);
                pub const Stretch: HorizontalAlignment = HorizontalAlignment(3i32);
            }
            impl ::std::convert::From<i32> for HorizontalAlignment {
                fn from(value: i32) -> Self {
                    Self(value)
                }
            }
            unsafe impl ::windows::Abi for HorizontalAlignment {
                type Abi = Self;
            }
            unsafe impl ::windows::RuntimeType for HorizontalAlignment {
                type DefaultType = Self;
                const SIGNATURE: ::windows::ConstBuffer = ::windows::ConstBuffer::from_slice(
                    b"enum(Windows.UI.Xaml.HorizontalAlignment;i4)",
                );
            }
            #[allow(
                unused_variables,
                non_upper_case_globals,
                non_snake_case,
                unused_unsafe,
                non_camel_case_types,
                dead_code,
                clippy::all
            )]
            pub mod Controls {
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock {
                    type Vtable = ITextBlock_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2922222193,
                        15178,
                        17916,
                        [132, 104, 247, 148, 149, 72, 244, 213],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut f64,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: f64,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: i32,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::TextWrapping,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::TextWrapping,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::TextTrimming,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::TextTrimming,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::TextAlignment,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::TextAlignment,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::Thickness,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::Thickness,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut f64,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: f64,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::LineStackingStrategy,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::LineStackingStrategy,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut bool,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: bool,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut f64,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        handler: ::windows::RawPtr,
                        result__: *mut super::super::super::Foundation::EventRegistrationToken,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        token: super::super::super::Foundation::EventRegistrationToken,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        token: super::super::super::Foundation::EventRegistrationToken,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::FocusState,
                        result__: *mut bool,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock2(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock2 {
                    type Vtable = ITextBlock2_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        1159752268,
                        2638,
                        20415,
                        [174, 233, 51, 93, 90, 32, 95, 110],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock2_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::TextLineBounds,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::TextLineBounds,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::OpticalMarginAlignment,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::OpticalMarginAlignment,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut bool,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: bool,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::TextReadingOrder,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::TextReadingOrder,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock3(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock3 {
                    type Vtable = ITextBlock3_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        3058818394,
                        16971,
                        18627,
                        [155, 103, 72, 111, 78, 19, 152, 153],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock3_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut bool,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: bool,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock4(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock4 {
                    type Vtable = ITextBlock4_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2954162800,
                        38920,
                        19164,
                        [180, 82, 96, 205, 165, 65, 0, 193],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock4_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock5(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock5 {
                    type Vtable = ITextBlock5_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        1649028408,
                        60861,
                        19034,
                        [182, 120, 228, 159, 30, 7, 175, 189],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock5_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock6(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock6 {
                    type Vtable = ITextBlock6_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        830565593,
                        1028,
                        16655,
                        [145, 236, 51, 176, 160, 187, 146, 178],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock6_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut bool,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut super::TextAlignment,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: super::TextAlignment,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        token: super::super::super::Foundation::EventRegistrationToken,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlock7(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlock7 {
                    type Vtable = ITextBlock7_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        3756132942,
                        35815,
                        24115,
                        [159, 55, 114, 65, 104, 117, 177, 33],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlock7_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(),
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlockStatics3(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlockStatics3 {
                    type Vtable = ITextBlockStatics3_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2367076843,
                        8353,
                        20139,
                        [187, 242, 29, 107, 220, 188, 215, 5],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlockStatics3_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlockStatics2(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlockStatics2 {
                    type Vtable = ITextBlockStatics2_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2282752795,
                        65316,
                        19347,
                        [160, 230, 240, 41, 201, 72, 113, 241],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlockStatics2_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlockStatics(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlockStatics {
                    type Vtable = ITextBlockStatics_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        423542850,
                        43079,
                        17746,
                        [180, 232, 219, 54, 101, 91, 132, 10],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlockStatics_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlockStatics6(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlockStatics6 {
                    type Vtable = ITextBlockStatics6_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        1024463785,
                        63910,
                        17314,
                        [153, 211, 87, 59, 137, 168, 60, 163],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlockStatics6_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlockStatics5(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlockStatics5 {
                    type Vtable = ITextBlockStatics5_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2387450992,
                        3406,
                        18655,
                        [174, 127, 187, 122, 154, 246, 133, 46],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlockStatics5_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                #[doc(hidden)]
                pub struct ITextBlockStatics7(::windows::IInspectable);
                unsafe impl ::windows::Interface for ITextBlockStatics7 {
                    type Vtable = ITextBlockStatics7_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        3486875195,
                        598,
                        22621,
                        [139, 63, 254, 175, 182, 157, 51, 32],
                    );
                }
                #[repr(C)]
                #[doc(hidden)]
                pub struct ITextBlockStatics7_abi(
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        iid: &::windows::Guid,
                        interface: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub unsafe extern "system" fn(this: ::windows::RawPtr) -> u32,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        count: *mut u32,
                        values: *mut *mut ::windows::Guid,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        value: *mut i32,
                    ) -> ::windows::HRESULT,
                    pub  unsafe extern "system" fn(
                        this: ::windows::RawPtr,
                        result__: *mut ::windows::RawPtr,
                    ) -> ::windows::HRESULT,
                );
                #[repr(transparent)]
                #[derive(
                    :: std :: cmp :: PartialEq,
                    :: std :: cmp :: Eq,
                    :: std :: clone :: Clone,
                    :: std :: fmt :: Debug,
                )]
                pub struct TextBlock(::windows::IInspectable);
                impl TextBlock {
                    pub fn new() -> ::windows::Result<Self> {
                        Self::IActivationFactory(|f| f.activate_instance::<Self>())
                    }
                    fn IActivationFactory<
                        R,
                        F: FnOnce(&::windows::IActivationFactory) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<
                            TextBlock,
                            ::windows::IActivationFactory,
                        > = ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                    pub fn FontSize(&self) -> ::windows::Result<f64> {
                        let this = self;
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetFontSize(&self, value: f64) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn CharacterSpacing(&self) -> ::windows::Result<i32> {
                        let this = self;
                        unsafe {
                            let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).16)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<i32>(result__)
                        }
                    }
                    pub fn SetCharacterSpacing(&self, value: i32) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).17)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn TextWrapping(&self) -> ::windows::Result<super::TextWrapping> {
                        let this = self;
                        unsafe {
                            let mut result__: <super::TextWrapping as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).20)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TextWrapping>(result__)
                        }
                    }
                    pub fn SetTextWrapping(
                        &self,
                        value: super::TextWrapping,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).21)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn TextTrimming(&self) -> ::windows::Result<super::TextTrimming> {
                        let this = self;
                        unsafe {
                            let mut result__: <super::TextTrimming as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).22)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TextTrimming>(result__)
                        }
                    }
                    pub fn SetTextTrimming(
                        &self,
                        value: super::TextTrimming,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).23)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn TextAlignment(&self) -> ::windows::Result<super::TextAlignment> {
                        let this = self;
                        unsafe {
                            let mut result__: <super::TextAlignment as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).24)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TextAlignment>(result__)
                        }
                    }
                    pub fn SetTextAlignment(
                        &self,
                        value: super::TextAlignment,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).25)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn Text(&self) -> ::windows::Result<::windows::HSTRING> {
                        let this = self;
                        unsafe {
                            let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).26)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::HSTRING>(result__)
                        }
                    }
                    pub fn SetText<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).27)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Padding(&self) -> ::windows::Result<super::Thickness> {
                        let this = self;
                        unsafe {
                            let mut result__: <super::Thickness as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).29)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Thickness>(result__)
                        }
                    }
                    pub fn SetPadding<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Thickness>,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).30)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn LineHeight(&self) -> ::windows::Result<f64> {
                        let this = self;
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).31)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetLineHeight(&self, value: f64) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).32)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn LineStackingStrategy(
                        &self,
                    ) -> ::windows::Result<super::LineStackingStrategy> {
                        let this = self;
                        unsafe {
                            let mut result__: <super::LineStackingStrategy as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).33)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::LineStackingStrategy>(result__)
                        }
                    }
                    pub fn SetLineStackingStrategy(
                        &self,
                        value: super::LineStackingStrategy,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).34)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsTextSelectionEnabled(&self) -> ::windows::Result<bool> {
                        let this = self;
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).35)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsTextSelectionEnabled(&self, value: bool) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).36)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn SelectedText(&self) -> ::windows::Result<::windows::HSTRING> {
                        let this = self;
                        unsafe {
                            let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).37)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::HSTRING>(result__)
                        }
                    }
                    pub fn BaselineOffset(&self) -> ::windows::Result<f64> {
                        let this = self;
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).42)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SelectionChanged<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::RoutedEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = self;
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).43)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveSelectionChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).44)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveContextMenuOpening<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).46)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn SelectAll(&self) -> ::windows::Result<()> {
                        let this = self;
                        unsafe {
                            (::windows::Interface::vtable(this).47)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn Focus(&self, value: super::FocusState) -> ::windows::Result<bool> {
                        let this = self;
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).49)(
                                ::windows::Abi::abi(this),
                                value,
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn MaxLines(&self) -> ::windows::Result<i32> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            let mut result__: <i32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<i32>(result__)
                        }
                    }
                    pub fn SetMaxLines(&self, value: i32) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn TextLineBounds(&self) -> ::windows::Result<super::TextLineBounds> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            let mut result__: <super::TextLineBounds as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TextLineBounds>(result__)
                        }
                    }
                    pub fn SetTextLineBounds(
                        &self,
                        value: super::TextLineBounds,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn OpticalMarginAlignment(
                        &self,
                    ) -> ::windows::Result<super::OpticalMarginAlignment> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: OpticalMarginAlignment as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::OpticalMarginAlignment>(result__)
                        }
                    }
                    pub fn SetOpticalMarginAlignment(
                        &self,
                        value: super::OpticalMarginAlignment,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsColorFontEnabled(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).14)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsColorFontEnabled(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).15)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn TextReadingOrder(&self) -> ::windows::Result<super::TextReadingOrder> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            let mut result__: <super::TextReadingOrder as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).16)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TextReadingOrder>(result__)
                        }
                    }
                    pub fn SetTextReadingOrder(
                        &self,
                        value: super::TextReadingOrder,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).17)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsTextScaleFactorEnabled(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<ITextBlock3>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsTextScaleFactorEnabled(
                        &self,
                        value: bool,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock3>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn FontSizeProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn FontFamilyProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn FontWeightProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn FontStyleProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn FontStretchProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn CharacterSpacingProperty() -> ::windows::Result<super::DependencyProperty>
                    {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn ForegroundProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextWrappingProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextTrimmingProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).14)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextAlignmentProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).15)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).16)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn PaddingProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).17)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn LineHeightProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).18)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn LineStackingStrategyProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).19)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn IsTextSelectionEnabledProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).20)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn SelectedTextProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).21)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn SelectionHighlightColorProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics2(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn MaxLinesProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics2(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextLineBoundsProperty() -> ::windows::Result<super::DependencyProperty>
                    {
                        Self::ITextBlockStatics2(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn OpticalMarginAlignmentProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics2(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn IsColorFontEnabledProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics2(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextReadingOrderProperty() -> ::windows::Result<super::DependencyProperty>
                    {
                        Self::ITextBlockStatics2(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn IsTextScaleFactorEnabledProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics3(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn TextDecorationsProperty() -> ::windows::Result<super::DependencyProperty>
                    {
                        Self::ITextBlockStatics5(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn IsTextTrimmed(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<ITextBlock6>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn HorizontalTextAlignment(
                        &self,
                    ) -> ::windows::Result<super::TextAlignment> {
                        let this = &::windows::Interface::cast::<ITextBlock6>(self).unwrap();
                        unsafe {
                            let mut result__: <super::TextAlignment as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TextAlignment>(result__)
                        }
                    }
                    pub fn SetHorizontalTextAlignment(
                        &self,
                        value: super::TextAlignment,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock6>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn RemoveIsTextTrimmedChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock6>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn IsTextTrimmedProperty() -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics6(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn HorizontalTextAlignmentProperty(
                    ) -> ::windows::Result<super::DependencyProperty> {
                        Self::ITextBlockStatics6(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn CopySelectionToClipboard(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<ITextBlock7>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn SelectionFlyoutProperty() -> ::windows::Result<super::DependencyProperty>
                    {
                        Self::ITextBlockStatics7(|this| unsafe {
                            let mut result__: <super::DependencyProperty as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyProperty>(result__)
                        })
                    }
                    pub fn GetValue<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                    ) -> ::windows::Result<::windows::IInspectable> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<::windows::IInspectable>(result__)
                        }
                    }
                    pub fn SetValue<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                        value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ClearValue<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ReadLocalValue<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                    ) -> ::windows::Result<::windows::IInspectable> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<::windows::IInspectable>(result__)
                        }
                    }
                    pub fn GetAnimationBaseValue<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                    ) -> ::windows::Result<::windows::IInspectable> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<::windows::IInspectable>(result__)
                        }
                    }
                    pub fn RegisterPropertyChangedCallback<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                        callback: impl ::windows::IntoParam<
                            'a,
                            super::DependencyPropertyChangedCallback,
                        >,
                    ) -> ::windows::Result<i64> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject2>(self).unwrap();
                        unsafe {
                            let mut result__: <i64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                                callback.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<i64>(result__)
                        }
                    }
                    pub fn UnregisterPropertyChangedCallback<'a>(
                        &self,
                        dp: impl ::windows::IntoParam<'a, super::DependencyProperty>,
                        token: i64,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IDependencyObject2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                dp.into_param().abi(),
                                token,
                            )
                            .ok()
                        }
                    }
                    pub fn Triggers(&self) -> ::windows::Result<super::TriggerCollection> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::TriggerCollection as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::TriggerCollection>(result__)
                        }
                    }
                    pub fn Resources(&self) -> ::windows::Result<super::ResourceDictionary> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::ResourceDictionary as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::ResourceDictionary>(result__)
                        }
                    }
                    pub fn SetResources<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::ResourceDictionary>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Tag(&self) -> ::windows::Result<::windows::IInspectable> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::IInspectable>(result__)
                        }
                    }
                    pub fn SetTag<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Language(&self) -> ::windows::Result<::windows::HSTRING> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::HSTRING>(result__)
                        }
                    }
                    pub fn SetLanguage<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ActualWidth(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn ActualHeight(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).14)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn Width(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).15)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetWidth(&self, value: f64) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).16)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn Height(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).17)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetHeight(&self, value: f64) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).18)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn MinWidth(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).19)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetMinWidth(&self, value: f64) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).20)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn MaxWidth(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).21)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetMaxWidth(&self, value: f64) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).22)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn MinHeight(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).23)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetMinHeight(&self, value: f64) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).24)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn MaxHeight(&self) -> ::windows::Result<f64> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).25)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetMaxHeight(&self, value: f64) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).26)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn HorizontalAlignment(
                        &self,
                    ) -> ::windows::Result<super::HorizontalAlignment> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::HorizontalAlignment as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).27)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::HorizontalAlignment>(result__)
                        }
                    }
                    pub fn SetHorizontalAlignment(
                        &self,
                        value: super::HorizontalAlignment,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).28)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn VerticalAlignment(&self) -> ::windows::Result<super::VerticalAlignment> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::VerticalAlignment as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).29)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::VerticalAlignment>(result__)
                        }
                    }
                    pub fn SetVerticalAlignment(
                        &self,
                        value: super::VerticalAlignment,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).30)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn Margin(&self) -> ::windows::Result<super::Thickness> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Thickness as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).31)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Thickness>(result__)
                        }
                    }
                    pub fn SetMargin<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Thickness>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).32)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Name(&self) -> ::windows::Result<::windows::HSTRING> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).33)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::HSTRING>(result__)
                        }
                    }
                    pub fn SetName<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).34)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn DataContext(&self) -> ::windows::Result<::windows::IInspectable> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).36)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::IInspectable>(result__)
                        }
                    }
                    pub fn SetDataContext<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).37)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Style(&self) -> ::windows::Result<super::Style> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Style as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).38)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Style>(result__)
                        }
                    }
                    pub fn SetStyle<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Style>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).39)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Parent(&self) -> ::windows::Result<super::DependencyObject> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::DependencyObject as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).40)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyObject>(result__)
                        }
                    }
                    pub fn FlowDirection(&self) -> ::windows::Result<super::FlowDirection> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::FlowDirection as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).41)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::FlowDirection>(result__)
                        }
                    }
                    pub fn SetFlowDirection(
                        &self,
                        value: super::FlowDirection,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).42)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn Loaded<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::RoutedEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).43)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveLoaded<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).44)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Unloaded<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::RoutedEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).45)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveUnloaded<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).46)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn SizeChanged<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::SizeChangedEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).47)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveSizeChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).48)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveLayoutUpdated<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).50)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn FindName<'a>(
                        &self,
                        name: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                    ) -> ::windows::Result<::windows::IInspectable> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::IInspectable as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).51)(
                                ::windows::Abi::abi(this),
                                name.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<::windows::IInspectable>(result__)
                        }
                    }
                    pub fn RequestedTheme(&self) -> ::windows::Result<super::ElementTheme> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement2>(self).unwrap();
                        unsafe {
                            let mut result__: <super::ElementTheme as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::ElementTheme>(result__)
                        }
                    }
                    pub fn SetRequestedTheme(
                        &self,
                        value: super::ElementTheme,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn RemoveDataContextChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement2>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveLoading<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement3>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn AllowDrop(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetAllowDrop(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn Opacity(&self) -> ::windows::Result<f64> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetOpacity(&self, value: f64) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsHitTestVisible(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).19)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsHitTestVisible(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).20)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn Visibility(&self) -> ::windows::Result<super::Visibility> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Visibility as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).21)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Visibility>(result__)
                        }
                    }
                    pub fn SetVisibility(&self, value: super::Visibility) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).22)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn UseLayoutRounding(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).24)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetUseLayoutRounding(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).25)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsTapEnabled(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).30)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).31)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsDoubleTapEnabled(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).32)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsDoubleTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).33)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsRightTapEnabled(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).34)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsRightTapEnabled(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).35)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn IsHoldingEnabled(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).36)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsHoldingEnabled(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).37)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveKeyUp<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).42)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveKeyDown<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).44)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn GotFocus<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::RoutedEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).45)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveGotFocus<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).46)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn LostFocus<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::RoutedEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).47)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveLostFocus<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).48)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn DragEnter<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::DragEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).49)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveDragEnter<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).50)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn DragLeave<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::DragEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).51)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveDragLeave<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).52)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn DragOver<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::DragEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).53)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveDragOver<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).54)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Drop<'a>(
                        &self,
                        handler: impl ::windows::IntoParam<'a, super::DragEventHandler>,
                    ) -> ::windows::Result<super::super::super::Foundation::EventRegistrationToken>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: EventRegistrationToken as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).55)(
                                ::windows::Abi::abi(this),
                                handler.into_param().abi(),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::EventRegistrationToken>(
                                result__,
                            )
                        }
                    }
                    pub fn RemoveDrop<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).56)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerPressed<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).58)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerMoved<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).60)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerReleased<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).62)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerEntered<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).64)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerExited<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).66)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerCaptureLost<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).68)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerCanceled<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).70)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePointerWheelChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).72)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveTapped<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).74)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveDoubleTapped<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).76)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveHolding<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).78)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveRightTapped<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).80)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveManipulationStarting<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).82)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveManipulationInertiaStarting<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).84)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveManipulationStarted<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).86)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveManipulationDelta<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).88)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveManipulationCompleted<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).90)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ReleasePointerCaptures(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).95)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn AddHandler<'a>(
                        &self,
                        routedevent: impl ::windows::IntoParam<'a, super::RoutedEvent>,
                        handler: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                        handledeventstoo: bool,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).96)(
                                ::windows::Abi::abi(this),
                                routedevent.into_param().abi(),
                                handler.into_param().abi(),
                                handledeventstoo,
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveHandler<'a>(
                        &self,
                        routedevent: impl ::windows::IntoParam<'a, super::RoutedEvent>,
                        handler: impl ::windows::IntoParam<'a, ::windows::IInspectable>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).97)(
                                ::windows::Abi::abi(this),
                                routedevent.into_param().abi(),
                                handler.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn InvalidateMeasure(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).99)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn InvalidateArrange(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).100)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn UpdateLayout(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).101)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn CancelDirectManipulations(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement2>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn CanDrag(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement3>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetCanDrag(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement3>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn RemoveDragStarting<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement3>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveDropCompleted<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement3>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn OnApplyTemplate(&self) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElementOverrides>(self)
                                .unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn GoToElementStateCore<'a>(
                        &self,
                        statename: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                        usetransitions: bool,
                    ) -> ::windows::Result<bool> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElementOverrides2>(self)
                                .unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                statename.into_param().abi(),
                                usetransitions,
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn OnDisconnectVisualChildren(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElementOverrides>(self)
                            .unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn AllowFocusOnInteraction(&self) -> ::windows::Result<bool> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetAllowFocusOnInteraction(&self, value: bool) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn FocusVisualMargin(&self) -> ::windows::Result<super::Thickness> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Thickness as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Thickness>(result__)
                        }
                    }
                    pub fn SetFocusVisualMargin<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Thickness>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn FocusVisualSecondaryThickness(
                        &self,
                    ) -> ::windows::Result<super::Thickness> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Thickness as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Thickness>(result__)
                        }
                    }
                    pub fn SetFocusVisualSecondaryThickness<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Thickness>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn FocusVisualPrimaryThickness(
                        &self,
                    ) -> ::windows::Result<super::Thickness> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Thickness as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Thickness>(result__)
                        }
                    }
                    pub fn SetFocusVisualPrimaryThickness<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Thickness>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn AllowFocusWhenDisabled(&self) -> ::windows::Result<bool> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).18)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetAllowFocusWhenDisabled(&self, value: bool) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).19)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn ExitDisplayModeOnAccessKeyInvoked(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetExitDisplayModeOnAccessKeyInvoked(
                        &self,
                        value: bool,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn IsAccessKeyScope(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetIsAccessKeyScope(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn AccessKeyScopeOwner(
                        &self,
                    ) -> ::windows::Result<super::DependencyObject> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <super::DependencyObject as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyObject>(result__)
                        }
                    }
                    pub fn SetAccessKeyScopeOwner<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::DependencyObject>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn AccessKey(&self) -> ::windows::Result<::windows::HSTRING> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            let mut result__: <::windows::HSTRING as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).14)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<::windows::HSTRING>(result__)
                        }
                    }
                    pub fn SetAccessKey<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, ::windows::HSTRING>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).15)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveContextRequested<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).17)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveContextCanceled<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).19)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveAccessKeyDisplayRequested<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).21)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveAccessKeyDisplayDismissed<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).23)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveAccessKeyInvoked<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement4>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).25)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn KeyTipHorizontalOffset(&self) -> ::windows::Result<f64> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetKeyTipHorizontalOffset(&self, value: f64) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn KeyTipVerticalOffset(&self) -> ::windows::Result<f64> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            let mut result__: <f64 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).11)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f64>(result__)
                        }
                    }
                    pub fn SetKeyTipVerticalOffset(&self, value: f64) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn HighContrastAdjustment(
                        &self,
                    ) -> ::windows::Result<super::ElementHighContrastAdjustment>
                    {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            let mut result__ : < super :: ElementHighContrastAdjustment as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).23)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::ElementHighContrastAdjustment>(result__)
                        }
                    }
                    pub fn SetHighContrastAdjustment(
                        &self,
                        value: super::ElementHighContrastAdjustment,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).24)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveGettingFocus<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).28)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveLosingFocus<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).30)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveNoFocusCandidateFound<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).32)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn StartBringIntoView(&self) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).33)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn StartBringIntoViewWithOptions<'a>(
                        &self,
                        options: impl ::windows::IntoParam<'a, super::BringIntoViewOptions>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement5>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).34)(
                                ::windows::Abi::abi(this),
                                options.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ActualTheme(&self) -> ::windows::Result<super::ElementTheme> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement6>(self).unwrap();
                        unsafe {
                            let mut result__: <super::ElementTheme as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::ElementTheme>(result__)
                        }
                    }
                    pub fn RemoveActualThemeChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement6>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveCharacterReceived<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement7>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveProcessKeyboardAccelerators<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement7>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).10)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePreviewKeyDown<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement7>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemovePreviewKeyUp<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement7>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).14)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn GetChildrenInTabFocusOrder(
                        &self,
                    ) -> ::windows::Result<
                        super::super::super::Foundation::Collections::IIterable<
                            super::DependencyObject,
                        >,
                    > {
                        let this = &::windows::Interface::cast::<super::IUIElementOverrides7>(self)
                            .unwrap();
                        unsafe {
                            let mut result__ : < super :: super :: super :: Foundation :: Collections :: IIterable :: < super :: DependencyObject > as :: windows :: Abi > :: Abi = :: std :: mem :: zeroed ( ) ;
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::super::super::Foundation::Collections::IIterable<
                                super::DependencyObject,
                            >>(result__)
                        }
                    }
                    pub fn KeyTipTarget(&self) -> ::windows::Result<super::DependencyObject> {
                        let this = &::windows::Interface::cast::<super::IUIElement8>(self).unwrap();
                        unsafe {
                            let mut result__: <super::DependencyObject as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyObject>(result__)
                        }
                    }
                    pub fn SetKeyTipTarget<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::DependencyObject>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement8>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn KeyboardAcceleratorPlacementTarget(
                        &self,
                    ) -> ::windows::Result<super::DependencyObject> {
                        let this = &::windows::Interface::cast::<super::IUIElement8>(self).unwrap();
                        unsafe {
                            let mut result__: <super::DependencyObject as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::DependencyObject>(result__)
                        }
                    }
                    pub fn SetKeyboardAcceleratorPlacementTarget<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::DependencyObject>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement8>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn RemoveBringIntoViewRequested<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement8>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn OnBringIntoViewRequested<'a>(
                        &self,
                        e: impl ::windows::IntoParam<'a, super::BringIntoViewRequestedEventArgs>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElementOverrides8>(self)
                            .unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(
                                ::windows::Abi::abi(this),
                                e.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn IsLoaded(&self) -> ::windows::Result<bool> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement7>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn RemoveEffectiveViewportChanged<'a>(
                        &self,
                        token: impl ::windows::IntoParam<
                            'a,
                            super::super::super::Foundation::EventRegistrationToken,
                        >,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElement7>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                token.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn InvalidateViewport(&self) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IFrameworkElementProtected7>(self)
                                .unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).6)(::windows::Abi::abi(this)).ok()
                        }
                    }
                    pub fn CanBeScrollAnchor(&self) -> ::windows::Result<bool> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            let mut result__: <bool as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).6)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<bool>(result__)
                        }
                    }
                    pub fn SetCanBeScrollAnchor(&self, value: bool) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).7)(::windows::Abi::abi(this), value)
                                .ok()
                        }
                    }
                    pub fn OpacityTransition(&self) -> ::windows::Result<super::ScalarTransition> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            let mut result__: <super::ScalarTransition as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::ScalarTransition>(result__)
                        }
                    }
                    pub fn SetOpacityTransition<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::ScalarTransition>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn TranslationTransition(
                        &self,
                    ) -> ::windows::Result<super::Vector3Transition> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Vector3Transition as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).12)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Vector3Transition>(result__)
                        }
                    }
                    pub fn SetTranslationTransition<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Vector3Transition>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).13)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn Rotation(&self) -> ::windows::Result<f32> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            let mut result__: <f32 as ::windows::Abi>::Abi = ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).14)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<f32>(result__)
                        }
                    }
                    pub fn SetRotation(&self, value: f32) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).15)(
                                ::windows::Abi::abi(this),
                                value,
                            )
                            .ok()
                        }
                    }
                    pub fn RotationTransition(&self) -> ::windows::Result<super::ScalarTransition> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            let mut result__: <super::ScalarTransition as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).16)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::ScalarTransition>(result__)
                        }
                    }
                    pub fn SetRotationTransition<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::ScalarTransition>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).17)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ScaleTransition(&self) -> ::windows::Result<super::Vector3Transition> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            let mut result__: <super::Vector3Transition as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).20)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::Vector3Transition>(result__)
                        }
                    }
                    pub fn SetScaleTransition<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::Vector3Transition>,
                    ) -> ::windows::Result<()> {
                        let this = &::windows::Interface::cast::<super::IUIElement9>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).21)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn XamlRoot(&self) -> ::windows::Result<super::XamlRoot> {
                        let this =
                            &::windows::Interface::cast::<super::IUIElement10>(self).unwrap();
                        unsafe {
                            let mut result__: <super::XamlRoot as ::windows::Abi>::Abi =
                                ::std::mem::zeroed();
                            (::windows::Interface::vtable(this).8)(
                                ::windows::Abi::abi(this),
                                &mut result__,
                            )
                            .from_abi::<super::XamlRoot>(result__)
                        }
                    }
                    pub fn SetXamlRoot<'a>(
                        &self,
                        value: impl ::windows::IntoParam<'a, super::XamlRoot>,
                    ) -> ::windows::Result<()> {
                        let this =
                            &::windows::Interface::cast::<super::IUIElement10>(self).unwrap();
                        unsafe {
                            (::windows::Interface::vtable(this).9)(
                                ::windows::Abi::abi(this),
                                value.into_param().abi(),
                            )
                            .ok()
                        }
                    }
                    pub fn ITextBlockStatics<
                        R,
                        F: FnOnce(&ITextBlockStatics) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<TextBlock, ITextBlockStatics> =
                            ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                    pub fn ITextBlockStatics2<
                        R,
                        F: FnOnce(&ITextBlockStatics2) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<TextBlock, ITextBlockStatics2> =
                            ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                    pub fn ITextBlockStatics3<
                        R,
                        F: FnOnce(&ITextBlockStatics3) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<TextBlock, ITextBlockStatics3> =
                            ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                    pub fn ITextBlockStatics5<
                        R,
                        F: FnOnce(&ITextBlockStatics5) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<TextBlock, ITextBlockStatics5> =
                            ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                    pub fn ITextBlockStatics6<
                        R,
                        F: FnOnce(&ITextBlockStatics6) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<TextBlock, ITextBlockStatics6> =
                            ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                    pub fn ITextBlockStatics7<
                        R,
                        F: FnOnce(&ITextBlockStatics7) -> ::windows::Result<R>,
                    >(
                        callback: F,
                    ) -> ::windows::Result<R> {
                        static mut SHARED: ::windows::FactoryCache<TextBlock, ITextBlockStatics7> =
                            ::windows::FactoryCache::new();
                        unsafe { SHARED.call(callback) }
                    }
                }
                unsafe impl ::windows::RuntimeType for TextBlock {
                    type DefaultType = ::std::option::Option<Self>;
                    const SIGNATURE : :: windows :: ConstBuffer = :: windows :: ConstBuffer :: from_slice ( b"rc(Windows.UI.Xaml.Controls.TextBlock;{ae2d9271-3b4a-45fc-8468-f7949548f4d5})" ) ;
                }
                unsafe impl ::windows::Interface for TextBlock {
                    type Vtable = ITextBlock_abi;
                    const IID: ::windows::Guid = ::windows::Guid::from_values(
                        2922222193,
                        15178,
                        17916,
                        [132, 104, 247, 148, 149, 72, 244, 213],
                    );
                }
                impl ::windows::RuntimeName for TextBlock {
                    const NAME: &'static str = "Windows.UI.Xaml.Controls.TextBlock";
                }
                impl ::std::convert::From<TextBlock> for ::windows::IInspectable {
                    fn from(value: TextBlock) -> Self {
                        value.0
                    }
                }
                impl ::std::convert::From<&TextBlock> for ::windows::IInspectable {
                    fn from(value: &TextBlock) -> Self {
                        value.0.clone()
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                        ::windows::Param::Owned(self.0)
                    }
                }
                impl<'a> ::windows::IntoParam<'a, ::windows::IInspectable> for &'a TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, ::windows::IInspectable> {
                        ::windows::Param::Borrowed(&self.0)
                    }
                }
                impl ::std::convert::From<TextBlock> for super::super::Composition::IAnimationObject {
                    fn from(value: TextBlock) -> Self {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&TextBlock> for super::super::Composition::IAnimationObject {
                    fn from(value: &TextBlock) -> Self {
                        ::windows::Interface::cast(value).unwrap()
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::super::Composition::IAnimationObject> for TextBlock {
                    fn into_param(
                        self,
                    ) -> ::windows::Param<'a, super::super::Composition::IAnimationObject>
                    {
                        ::windows::Param::Owned(::std::convert::Into::<
                            super::super::Composition::IAnimationObject,
                        >::into(self))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::super::Composition::IAnimationObject> for &'a TextBlock {
                    fn into_param(
                        self,
                    ) -> ::windows::Param<'a, super::super::Composition::IAnimationObject>
                    {
                        ::windows::Param::Owned(::std::convert::Into::<
                            super::super::Composition::IAnimationObject,
                        >::into(
                            ::std::clone::Clone::clone(self)
                        ))
                    }
                }
                impl ::std::convert::From<TextBlock> for super::super::Composition::IVisualElement {
                    fn from(value: TextBlock) -> Self {
                        ::std::convert::From::from(&value)
                    }
                }
                impl ::std::convert::From<&TextBlock> for super::super::Composition::IVisualElement {
                    fn from(value: &TextBlock) -> Self {
                        ::windows::Interface::cast(value).unwrap()
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::super::Composition::IVisualElement> for TextBlock {
                    fn into_param(
                        self,
                    ) -> ::windows::Param<'a, super::super::Composition::IVisualElement>
                    {
                        ::windows::Param::Owned(::std::convert::Into::<
                            super::super::Composition::IVisualElement,
                        >::into(self))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::super::Composition::IVisualElement> for &'a TextBlock {
                    fn into_param(
                        self,
                    ) -> ::windows::Param<'a, super::super::Composition::IVisualElement>
                    {
                        ::windows::Param::Owned(::std::convert::Into::<
                            super::super::Composition::IVisualElement,
                        >::into(
                            ::std::clone::Clone::clone(self)
                        ))
                    }
                }
                impl ::std::convert::From<TextBlock> for super::FrameworkElement {
                    fn from(value: TextBlock) -> Self {
                        ::std::convert::Into::<super::FrameworkElement>::into(&value)
                    }
                }
                impl ::std::convert::From<&TextBlock> for super::FrameworkElement {
                    fn from(value: &TextBlock) -> Self {
                        ::windows::Interface::cast(value).unwrap()
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::FrameworkElement> for TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, super::FrameworkElement> {
                        ::windows::Param::Owned(
                            ::std::convert::Into::<super::FrameworkElement>::into(self),
                        )
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::FrameworkElement> for &'a TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, super::FrameworkElement> {
                        ::windows::Param::Owned(
                            ::std::convert::Into::<super::FrameworkElement>::into(
                                ::std::clone::Clone::clone(self),
                            ),
                        )
                    }
                }
                impl ::std::convert::From<TextBlock> for super::UIElement {
                    fn from(value: TextBlock) -> Self {
                        ::std::convert::Into::<super::UIElement>::into(&value)
                    }
                }
                impl ::std::convert::From<&TextBlock> for super::UIElement {
                    fn from(value: &TextBlock) -> Self {
                        ::windows::Interface::cast(value).unwrap()
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::UIElement> for TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, super::UIElement> {
                        ::windows::Param::Owned(::std::convert::Into::<super::UIElement>::into(
                            self,
                        ))
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::UIElement> for &'a TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, super::UIElement> {
                        ::windows::Param::Owned(::std::convert::Into::<super::UIElement>::into(
                            ::std::clone::Clone::clone(self),
                        ))
                    }
                }
                impl ::std::convert::From<TextBlock> for super::DependencyObject {
                    fn from(value: TextBlock) -> Self {
                        ::std::convert::Into::<super::DependencyObject>::into(&value)
                    }
                }
                impl ::std::convert::From<&TextBlock> for super::DependencyObject {
                    fn from(value: &TextBlock) -> Self {
                        ::windows::Interface::cast(value).unwrap()
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::DependencyObject> for TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, super::DependencyObject> {
                        ::windows::Param::Owned(
                            ::std::convert::Into::<super::DependencyObject>::into(self),
                        )
                    }
                }
                impl<'a> ::windows::IntoParam<'a, super::DependencyObject> for &'a TextBlock {
                    fn into_param(self) -> ::windows::Param<'a, super::DependencyObject> {
                        ::windows::Param::Owned(
                            ::std::convert::Into::<super::DependencyObject>::into(
                                ::std::clone::Clone::clone(self),
                            ),
                        )
                    }
                }
                unsafe impl ::std::marker::Send for TextBlock {}
                unsafe impl ::std::marker::Sync for TextBlock {}
            }
        }
    }
}
